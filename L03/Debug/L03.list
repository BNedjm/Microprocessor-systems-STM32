
L03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008284  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008458  08008458  00018458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088ac  080088ac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080088ac  080088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088b4  080088b4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088b8  080088b8  000188b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080088bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e8  08008aa4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08008aa4  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012653  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293d  00000000  00000000  0003286b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  000351a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003688  00000000  00000000  00036f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a2f  00000000  00000000  0003a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f220a  00000000  00000000  0004dfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001401f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005294  00000000  00000000  0014024c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800843c 	.word	0x0800843c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800843c 	.word	0x0800843c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9aa 	b.w	8000fe4 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468e      	mov	lr, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14d      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4694      	mov	ip, r2
 8000d26:	d969      	bls.n	8000dfc <__udivmoddi4+0xe8>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b152      	cbz	r2, 8000d44 <__udivmoddi4+0x30>
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	f1c2 0120 	rsb	r1, r2, #32
 8000d36:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d42:	4094      	lsls	r4, r2
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	0c21      	lsrs	r1, r4, #16
 8000d4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d4e:	fa1f f78c 	uxth.w	r7, ip
 8000d52:	fb08 e316 	mls	r3, r8, r6, lr
 8000d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5a:	fb06 f107 	mul.w	r1, r6, r7
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 811f 	bcs.w	8000fac <__udivmoddi4+0x298>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 811c 	bls.w	8000fac <__udivmoddi4+0x298>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 f707 	mul.w	r7, r0, r7
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x92>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	f080 810a 	bcs.w	8000fb0 <__udivmoddi4+0x29c>
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	f240 8107 	bls.w	8000fb0 <__udivmoddi4+0x29c>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000daa:	1be4      	subs	r4, r4, r7
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa4>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xc2>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80ef 	beq.w	8000fa6 <__udivmoddi4+0x292>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x160>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd4>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80f9 	bhi.w	8000fda <__udivmoddi4+0x2c6>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	469e      	mov	lr, r3
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa4>
 8000df6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xec>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 8092 	bne.w	8000f2e <__udivmoddi4+0x21a>
 8000e0a:	eba1 010c 	sub.w	r1, r1, ip
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2601      	movs	r6, #1
 8000e18:	0c20      	lsrs	r0, r4, #16
 8000e1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e26:	fb0e f003 	mul.w	r0, lr, r3
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x12c>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x12a>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2c0>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x156>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x154>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2ca>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x9a>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa20 f407 	lsr.w	r4, r0, r7
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	40f9      	lsrs	r1, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	fa00 f306 	lsl.w	r3, r0, r6
 8000e96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9a:	0c20      	lsrs	r0, r4, #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eac:	4288      	cmp	r0, r1
 8000eae:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b8>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	1a09      	subs	r1, r1, r0
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000edc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee0:	458e      	cmp	lr, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1e2>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2b4>
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2b4>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efa:	fba0 9402 	umull	r9, r4, r0, r2
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46a6      	mov	lr, r4
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x2a4>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x212>
 8000f0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f12:	eb61 010e 	sbc.w	r1, r1, lr
 8000f16:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f1e:	40f1      	lsrs	r1, r6
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e9c5 7100 	strd	r7, r1, [r5]
 8000f26:	2600      	movs	r6, #0
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	f1c2 0320 	rsb	r3, r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f56:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x260>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b8>
 8000f6c:	429e      	cmp	r6, r3
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b8>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	b289      	uxth	r1, r1
 8000f78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb06 f30e 	mul.w	r3, r6, lr
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x28a>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f9a:	3e02      	subs	r6, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0x104>
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e705      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e3      	b.n	8000d78 <__udivmoddi4+0x64>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6f8      	b.n	8000da6 <__udivmoddi4+0x92>
 8000fb4:	454b      	cmp	r3, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f8>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f8>
 8000fc4:	4646      	mov	r6, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x28a>
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1e2>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b8>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	4461      	add	r1, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x12c>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e709      	b.n	8000df2 <__udivmoddi4+0xde>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x156>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__led_gpio_toggle>:
  * @brief Toggles LED's GPIO pin
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void __led_gpio_toggle(const LED_GPIO_Handle_TypeDef* hled)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(hled->Port, hled->Pin);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f001 f8c9 	bl	8002192 <HAL_GPIO_TogglePin>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <__led_gpio_read>:
  * @brief Reads LED's GPIO pin
  * @param[in] hled		: LED GPIO handler
  * @retval GPIO pin state (0/1)
  */
_Bool __led_gpio_read(const LED_GPIO_Handle_TypeDef* hled)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	return (_Bool)HAL_GPIO_ReadPin(hled->Port, hled->Pin);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	889b      	ldrh	r3, [r3, #4]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f001 f888 	bl	8002130 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf14      	ite	ne
 8001026:	2301      	movne	r3, #1
 8001028:	2300      	moveq	r3, #0
 800102a:	b2db      	uxtb	r3, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <LED_GPIO_Toggle>:
  * @brief Toggles LED state
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_Toggle(const LED_GPIO_Handle_TypeDef* hled)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	__led_gpio_toggle(hled);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ffd3 	bl	8000fe8 <__led_gpio_toggle>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <LED_GPIO_Read>:
  * @brief Reads LED state
  * @param[in] hled		: LED GPIO handler
  * @retval	LED state (LED_OFF or LED_ON)
  */
LED_GPIO_State_TypeDef LED_GPIO_Read(const LED_GPIO_Handle_TypeDef* hled)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	_Bool state = __led_gpio_read(hled);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffd8 	bl	8001008 <__led_gpio_read>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
	return hled->ActiveState == LED_ON_HIGH ? state : !state;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	799b      	ldrb	r3, [r3, #6]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <LED_GPIO_Read+0x1e>
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	e003      	b.n	8001070 <LED_GPIO_Read+0x26>
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4bb3      	ldr	r3, [pc, #716]	; (800135c <MX_GPIO_Init+0x2e4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4ab2      	ldr	r2, [pc, #712]	; (800135c <MX_GPIO_Init+0x2e4>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4bb0      	ldr	r3, [pc, #704]	; (800135c <MX_GPIO_Init+0x2e4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4bad      	ldr	r3, [pc, #692]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4aac      	ldr	r2, [pc, #688]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4baa      	ldr	r3, [pc, #680]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4ba7      	ldr	r3, [pc, #668]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4aa6      	ldr	r2, [pc, #664]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4ba4      	ldr	r3, [pc, #656]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4ba1      	ldr	r3, [pc, #644]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4aa0      	ldr	r2, [pc, #640]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b9e      	ldr	r3, [pc, #632]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b9b      	ldr	r3, [pc, #620]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a9a      	ldr	r2, [pc, #616]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b98      	ldr	r3, [pc, #608]	; (800135c <MX_GPIO_Init+0x2e4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b95      	ldr	r3, [pc, #596]	; (800135c <MX_GPIO_Init+0x2e4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a94      	ldr	r2, [pc, #592]	; (800135c <MX_GPIO_Init+0x2e4>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b92      	ldr	r3, [pc, #584]	; (800135c <MX_GPIO_Init+0x2e4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111e:	4b8f      	ldr	r3, [pc, #572]	; (800135c <MX_GPIO_Init+0x2e4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a8e      	ldr	r2, [pc, #568]	; (800135c <MX_GPIO_Init+0x2e4>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b8c      	ldr	r3, [pc, #560]	; (800135c <MX_GPIO_Init+0x2e4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP_TRIAC_GPIO_Port, LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2108      	movs	r1, #8
 800113a:	4889      	ldr	r0, [pc, #548]	; (8001360 <MX_GPIO_Init+0x2e8>)
 800113c:	f001 f810 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2108      	movs	r1, #8
 8001144:	4887      	ldr	r0, [pc, #540]	; (8001364 <MX_GPIO_Init+0x2ec>)
 8001146:	f001 f80b 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001150:	4885      	ldr	r0, [pc, #532]	; (8001368 <MX_GPIO_Init+0x2f0>)
 8001152:	f001 f805 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4884      	ldr	r0, [pc, #528]	; (800136c <MX_GPIO_Init+0x2f4>)
 800115c:	f001 f800 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	487e      	ldr	r0, [pc, #504]	; (8001370 <MX_GPIO_Init+0x2f8>)
 8001178:	f000 fe2e 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 800117c:	2308      	movs	r3, #8
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	2302      	movs	r3, #2
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4873      	ldr	r0, [pc, #460]	; (8001360 <MX_GPIO_Init+0x2e8>)
 8001194:	f000 fe20 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8001198:	2320      	movs	r3, #32
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	486c      	ldr	r0, [pc, #432]	; (8001360 <MX_GPIO_Init+0x2e8>)
 80011ae:	f000 fe13 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	486a      	ldr	r0, [pc, #424]	; (8001370 <MX_GPIO_Init+0x2f8>)
 80011c8:	f000 fe06 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011cc:	2332      	movs	r3, #50	; 0x32
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011dc:	230b      	movs	r3, #11
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4862      	ldr	r0, [pc, #392]	; (8001370 <MX_GPIO_Init+0x2f8>)
 80011e8:	f000 fdf6 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 80011ec:	2308      	movs	r3, #8
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f6:	2302      	movs	r3, #2
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	485b      	ldr	r0, [pc, #364]	; (8001370 <MX_GPIO_Init+0x2f8>)
 8001202:	f000 fde9 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001206:	2386      	movs	r3, #134	; 0x86
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001216:	230b      	movs	r3, #11
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4850      	ldr	r0, [pc, #320]	; (8001364 <MX_GPIO_Init+0x2ec>)
 8001222:	f000 fdd9 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001226:	2308      	movs	r3, #8
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800122e:	2302      	movs	r3, #2
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4849      	ldr	r0, [pc, #292]	; (8001364 <MX_GPIO_Init+0x2ec>)
 800123e:	f000 fdcb 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001242:	f244 0381 	movw	r3, #16513	; 0x4081
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4843      	ldr	r0, [pc, #268]	; (8001368 <MX_GPIO_Init+0x2f0>)
 800125c:	f000 fdbc 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001272:	230b      	movs	r3, #11
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	483a      	ldr	r0, [pc, #232]	; (8001368 <MX_GPIO_Init+0x2f0>)
 800127e:	f000 fdab 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4834      	ldr	r0, [pc, #208]	; (800136c <MX_GPIO_Init+0x2f4>)
 800129a:	f000 fd9d 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	482e      	ldr	r0, [pc, #184]	; (800136c <MX_GPIO_Init+0x2f4>)
 80012b2:	f000 fd91 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012c8:	230a      	movs	r3, #10
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4824      	ldr	r0, [pc, #144]	; (8001364 <MX_GPIO_Init+0x2ec>)
 80012d4:	f000 fd80 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	481d      	ldr	r0, [pc, #116]	; (8001364 <MX_GPIO_Init+0x2ec>)
 80012ee:	f000 fd73 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4817      	ldr	r0, [pc, #92]	; (800136c <MX_GPIO_Init+0x2f4>)
 8001310:	f000 fd62 	bl	8001dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2006      	movs	r0, #6
 800131a:	f000 fc94 	bl	8001c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800131e:	2006      	movs	r0, #6
 8001320:	f000 fcad 	bl	8001c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2009      	movs	r0, #9
 800132a:	f000 fc8c 	bl	8001c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800132e:	2009      	movs	r0, #9
 8001330:	f000 fca5 	bl	8001c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2017      	movs	r0, #23
 800133a:	f000 fc84 	bl	8001c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800133e:	2017      	movs	r0, #23
 8001340:	f000 fc9d 	bl	8001c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2028      	movs	r0, #40	; 0x28
 800134a:	f000 fc7c 	bl	8001c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800134e:	2028      	movs	r0, #40	; 0x28
 8001350:	f000 fc95 	bl	8001c7e <HAL_NVIC_EnableIRQ>

}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40021400 	.word	0x40021400
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40021800 	.word	0x40021800
 8001370:	40020800 	.word	0x40020800

08001374 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

#if TASK >= 2 && TASK !=4

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d10d      	bne.n	80013a0 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
    LED_GPIO_Toggle(&hld1);
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001386:	f7ff fe55 	bl	8001034 <LED_GPIO_Toggle>
    LD1_State = LED_GPIO_Read(&hld1);
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 800138c:	f7ff fe5d 	bl	800104a <LED_GPIO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf14      	ite	ne
 8001396:	2301      	movne	r3, #1
 8001398:	2300      	moveq	r3, #0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800139e:	701a      	strb	r2, [r3, #0]
  }
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000204 	.word	0x20000204

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b8:	f000 fb0d 	bl	80019d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013bc:	f000 f80c 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c0:	f7ff fe5a 	bl	8001078 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80013c4:	f000 fa46 	bl	8001854 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80013c8:	f000 f9d2 	bl	8001770 <MX_TIM2_Init>

#endif

#if TASK != 1 && TASK != 4

  HAL_TIM_Base_Start_IT(&htim2);
 80013cc:	4801      	ldr	r0, [pc, #4]	; (80013d4 <main+0x20>)
 80013ce:	f002 f891 	bl	80034f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <main+0x1e>
 80013d4:	2000020c 	.word	0x2000020c

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	; 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	; 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fd06 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013fc:	f000 ff08 	bl	8002210 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <SystemClock_Config+0xd4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a29      	ldr	r2, [pc, #164]	; (80014ac <SystemClock_Config+0xd4>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <SystemClock_Config+0xd4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <SystemClock_Config+0xd8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <SystemClock_Config+0xd8>)
 800141e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <SystemClock_Config+0xd8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001434:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001444:	2304      	movs	r3, #4
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001448:	23d8      	movs	r3, #216	; 0xd8
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001450:	2303      	movs	r3, #3
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f000 ff39 	bl	80022d0 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001464:	f000 f826 	bl	80014b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001468:	f000 fee2 	bl	8002230 <HAL_PWREx_EnableOverDrive>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001472:	f000 f81f 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001482:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001488:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800148c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2107      	movs	r1, #7
 8001494:	4618      	mov	r0, r3
 8001496:	f001 f9bf 	bl	8002818 <HAL_RCC_ClockConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80014a0:	f000 f808 	bl	80014b4 <Error_Handler>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3750      	adds	r7, #80	; 0x50
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_MspInit+0x44>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_MspInit+0x44>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x44>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x44>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x44>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f000 fa7c 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT1_Btn_Pin);
 8001560:	2001      	movs	r0, #1
 8001562:	f000 fe31 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}

0800156a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT2_Btn_Pin);
 800156e:	2008      	movs	r0, #8
 8001570:	f000 fe2a 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAMP_SYNC_Pin);
 800157c:	2020      	movs	r0, #32
 800157e:	f000 fe23 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <TIM2_IRQHandler+0x10>)
 800158e:	f002 f829 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000020c 	.word	0x2000020c

0800159c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <USART3_IRQHandler+0x10>)
 80015a2:	f002 fc65 	bl	8003e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000258 	.word	0x20000258

080015b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80015b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015b8:	f000 fe06 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_getpid>:
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	2301      	movs	r3, #1
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_kill>:
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	f003 fbe3 	bl	8004da4 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
 8001602:	e7fe      	b.n	8001602 <_exit+0x12>

08001604 <_read>:
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_write>:
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e009      	b.n	8001664 <_write+0x26>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f3af 8000 	nop.w
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf1      	blt.n	8001650 <_write+0x12>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_fstat>:
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	2300      	movs	r3, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_isatty>:
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	2301      	movs	r3, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_lseek>:
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	2300      	movs	r3, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
 8001710:	f003 fb48 	bl	8004da4 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20050000 	.word	0x20050000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000208 	.word	0x20000208
 8001748:	200002f8 	.word	0x200002f8

0800174c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_TIM2_Init+0x98>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_TIM2_Init+0x98>)
 8001798:	226b      	movs	r2, #107	; 0x6b
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_TIM2_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_TIM2_Init+0x98>)
 80017a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_TIM2_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_TIM2_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b6:	4814      	ldr	r0, [pc, #80]	; (8001808 <MX_TIM2_Init+0x98>)
 80017b8:	f001 fe44 	bl	8003444 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017c2:	f7ff fe77 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_TIM2_Init+0x98>)
 80017d4:	f002 f826 	bl	8003824 <HAL_TIM_ConfigClockSource>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017de:	f7ff fe69 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <MX_TIM2_Init+0x98>)
 80017f0:	f002 fa44 	bl	8003c7c <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017fa:	f7ff fe5b 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000020c 	.word	0x2000020c

0800180c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d113      	bne.n	8001846 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_TIM_Base_MspInit+0x44>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_TIM_Base_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_TIM_Base_MspInit+0x44>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	201c      	movs	r0, #28
 800183c:	f000 fa03 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001840:	201c      	movs	r0, #28
 8001842:	f000 fa1c 	bl	8001c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800185a:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <MX_USART3_UART_Init+0x5c>)
 800185c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001860:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001898:	f002 fa9c 	bl	8003dd4 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018a2:	f7ff fe07 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000258 	.word	0x20000258
 80018b0:	40004800 	.word	0x40004800

080018b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0aa      	sub	sp, #168	; 0xa8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2284      	movs	r2, #132	; 0x84
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 fa8f 	bl	8004df8 <memset>
  if(uartHandle->Instance==USART3)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_UART_MspInit+0xc4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d144      	bne.n	800196e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80018ea:	2310      	movs	r3, #16
 80018ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 f9b6 	bl	8002c64 <HAL_RCCEx_PeriphCLKConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018fe:	f7ff fdd9 	bl	80014b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_UART_MspInit+0xc8>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_UART_MspInit+0xc8>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_UART_MspInit+0xc8>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0xc8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_UART_MspInit+0xc8>)
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0xc8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800194c:	2307      	movs	r3, #7
 800194e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001952:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001956:	4619      	mov	r1, r3
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_UART_MspInit+0xcc>)
 800195a:	f000 fa3d 	bl	8001dd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2027      	movs	r0, #39	; 0x27
 8001964:	f000 f96f 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001968:	2027      	movs	r0, #39	; 0x27
 800196a:	f000 f988 	bl	8001c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	37a8      	adds	r7, #168	; 0xa8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004800 	.word	0x40004800
 800197c:	40023800 	.word	0x40023800
 8001980:	40020c00 	.word	0x40020c00

08001984 <Reset_Handler>:
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x12>
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopFillZerobss+0x16>)
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1a>)
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1e>)
 800198e:	2300      	movs	r3, #0
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:
 8001992:	58d4      	ldr	r4, [r2, r3]
 8001994:	50c4      	str	r4, [r0, r3]
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:
 8001998:	18c4      	adds	r4, r0, r3
 800199a:	428c      	cmp	r4, r1
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x22>)
 80019a0:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LoopFillZerobss+0x26>)
 80019a2:	2300      	movs	r3, #0
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:
 80019aa:	42a2      	cmp	r2, r4
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>
 80019ae:	f7ff fecd 	bl	800174c <SystemInit>
 80019b2:	f003 f9fd 	bl	8004db0 <__libc_init_array>
 80019b6:	f7ff fcfd 	bl	80013b4 <main>
 80019ba:	4770      	bx	lr
 80019bc:	20050000 	.word	0x20050000
 80019c0:	20000000 	.word	0x20000000
 80019c4:	200001e8 	.word	0x200001e8
 80019c8:	080088bc 	.word	0x080088bc
 80019cc:	200001e8 	.word	0x200001e8
 80019d0:	200002f4 	.word	0x200002f4

080019d4 <ADC_IRQHandler>:
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>

080019d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019da:	2003      	movs	r0, #3
 80019dc:	f000 f928 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 f805 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e6:	f7ff fd6b 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x54>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_InitTick+0x58>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f943 	bl	8001c9a <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00e      	b.n	8001a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d80a      	bhi.n	8001a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f90b 	bl	8001c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_InitTick+0x5c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000010 	.word	0x20000010
 8001a74:	200002e0 	.word	0x200002e0

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	200002e0 	.word	0x200002e0

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	05fa0000 	.word	0x05fa0000

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bfc:	d301      	bcc.n	8001c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00f      	b.n	8001c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <SysTick_Config+0x40>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f7ff ff8e 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <SysTick_Config+0x40>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <SysTick_Config+0x40>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	e000e010 	.word	0xe000e010

08001c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff29 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c58:	f7ff ff3e 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7ff ff8e 	bl	8001b84 <NVIC_EncodePriority>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff5d 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff31 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffa2 	bl	8001bec <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff feda 	bl	8001a78 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d008      	beq.n	8001ce4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e052      	b.n	8001d8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0216 	bic.w	r2, r2, #22
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d103      	bne.n	8001d14 <HAL_DMA_Abort+0x62>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0208 	bic.w	r2, r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d34:	e013      	b.n	8001d5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d36:	f7ff fe9f 	bl	8001a78 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d90c      	bls.n	8001d5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e015      	b.n	8001d8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e4      	bne.n	8001d36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e00c      	b.n	8001dca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2205      	movs	r2, #5
 8001db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e175      	b.n	80020e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 8164 	bne.w	80020de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d005      	beq.n	8001e2e <HAL_GPIO_Init+0x56>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d130      	bne.n	8001e90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0201 	and.w	r2, r3, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d017      	beq.n	8001ecc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d123      	bne.n	8001f20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	69b9      	ldr	r1, [r7, #24]
 8001f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80be 	beq.w	80020de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_GPIO_Init+0x324>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_GPIO_Init+0x324>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_GPIO_Init+0x324>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f7a:	4a61      	ldr	r2, [pc, #388]	; (8002100 <HAL_GPIO_Init+0x328>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_GPIO_Init+0x32c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d037      	beq.n	8002016 <HAL_GPIO_Init+0x23e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_GPIO_Init+0x330>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_GPIO_Init+0x23a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a56      	ldr	r2, [pc, #344]	; (800210c <HAL_GPIO_Init+0x334>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <HAL_GPIO_Init+0x236>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a55      	ldr	r2, [pc, #340]	; (8002110 <HAL_GPIO_Init+0x338>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x232>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a54      	ldr	r2, [pc, #336]	; (8002114 <HAL_GPIO_Init+0x33c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x22e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a53      	ldr	r2, [pc, #332]	; (8002118 <HAL_GPIO_Init+0x340>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x22a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_GPIO_Init+0x344>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x226>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_GPIO_Init+0x348>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_GPIO_Init+0x34c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x21e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x350>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x21a>
 8001fee:	2309      	movs	r3, #9
 8001ff0:	e012      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	e010      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	e00e      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00c      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ffe:	2306      	movs	r3, #6
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002002:	2305      	movs	r3, #5
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x240>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x240>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002016:	2300      	movs	r3, #0
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	; (8002100 <HAL_GPIO_Init+0x328>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_GPIO_Init+0x354>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205a:	4a34      	ldr	r2, [pc, #208]	; (800212c <HAL_GPIO_Init+0x354>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <HAL_GPIO_Init+0x354>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002084:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_GPIO_Init+0x354>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_GPIO_Init+0x354>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1f      	ldr	r2, [pc, #124]	; (800212c <HAL_GPIO_Init+0x354>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_GPIO_Init+0x354>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <HAL_GPIO_Init+0x354>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f ae86 	bls.w	8001df8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40021400 	.word	0x40021400
 800211c:	40021800 	.word	0x40021800
 8002120:	40021c00 	.word	0x40021c00
 8002124:	40022000 	.word	0x40022000
 8002128:	40022400 	.word	0x40022400
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e001      	b.n	8002152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a4:	887a      	ldrh	r2, [r7, #2]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	400b      	ands	r3, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f806 	bl	80021f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40007000 	.word	0x40007000

08002230 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800225e:	f7ff fc0b 	bl	8001a78 <HAL_GetTick>
 8002262:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002264:	e009      	b.n	800227a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002266:	f7ff fc07 	bl	8001a78 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002274:	d901      	bls.n	800227a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e022      	b.n	80022c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d1ee      	bne.n	8002266 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800228e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002292:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002294:	f7ff fbf0 	bl	8001a78 <HAL_GetTick>
 8002298:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800229a:	e009      	b.n	80022b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800229c:	f7ff fbec 	bl	8001a78 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022aa:	d901      	bls.n	80022b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e007      	b.n	80022c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022bc:	d1ee      	bne.n	800229c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e291      	b.n	800280a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f4:	4b96      	ldr	r3, [pc, #600]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d00c      	beq.n	800231a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002300:	4b93      	ldr	r3, [pc, #588]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x62>
 800230c:	4b90      	ldr	r3, [pc, #576]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002318:	d10b      	bne.n	8002332 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d06c      	beq.n	8002400 <HAL_RCC_OscConfig+0x130>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d168      	bne.n	8002400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e26b      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x7a>
 800233c:	4b84      	ldr	r3, [pc, #528]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a83      	ldr	r2, [pc, #524]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e02e      	b.n	80023a8 <HAL_RCC_OscConfig+0xd8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x9c>
 8002352:	4b7f      	ldr	r3, [pc, #508]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a7e      	ldr	r2, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7b      	ldr	r2, [pc, #492]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xd8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0xc0>
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a72      	ldr	r2, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xd8>
 8002390:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6b      	ldr	r2, [pc, #428]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff fb62 	bl	8001a78 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fb5e 	bl	8001a78 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e21f      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe8>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff fb4e 	bl	8001a78 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fb4a 	bl	8001a78 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e20b      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x110>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d069      	beq.n	80024e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240e:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x190>
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x17a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1df      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	493d      	ldr	r1, [pc, #244]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e040      	b.n	80024e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d023      	beq.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff fb00 	bl	8001a78 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff fafc 	bl	8001a78 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1bd      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4929      	ldr	r1, [pc, #164]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
 80024ae:	e018      	b.n	80024e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a26      	ldr	r2, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff fadc 	bl	8001a78 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7ff fad8 	bl	8001a78 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e199      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d038      	beq.n	8002560 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d019      	beq.n	800252a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	4a15      	ldr	r2, [pc, #84]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7ff fab9 	bl	8001a78 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250a:	f7ff fab5 	bl	8001a78 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e176      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x23a>
 8002528:	e01a      	b.n	8002560 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800252c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7ff fa9f 	bl	8001a78 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7ff fa9b 	bl	8001a78 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d903      	bls.n	8002554 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e15c      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
 8002550:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4b91      	ldr	r3, [pc, #580]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ee      	bne.n	800253e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a4 	beq.w	80026b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b8b      	ldr	r3, [pc, #556]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b88      	ldr	r3, [pc, #544]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a87      	ldr	r2, [pc, #540]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b85      	ldr	r3, [pc, #532]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025a2:	4b7f      	ldr	r3, [pc, #508]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7e      	ldr	r2, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7ff fa63 	bl	8001a78 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7ff fa5f 	bl	8001a78 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e120      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c8:	4b75      	ldr	r3, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x31a>
 80025dc:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a6e      	ldr	r2, [pc, #440]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	e02d      	b.n	8002646 <HAL_RCC_OscConfig+0x376>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x33c>
 80025f2:	4b6a      	ldr	r3, [pc, #424]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a66      	ldr	r2, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	e01c      	b.n	8002646 <HAL_RCC_OscConfig+0x376>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x35e>
 8002614:	4b61      	ldr	r3, [pc, #388]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a60      	ldr	r2, [pc, #384]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	4b5e      	ldr	r3, [pc, #376]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
 800262c:	e00b      	b.n	8002646 <HAL_RCC_OscConfig+0x376>
 800262e:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a57      	ldr	r2, [pc, #348]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff fa13 	bl	8001a78 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff fa0f 	bl	8001a78 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0ce      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ee      	beq.n	8002656 <HAL_RCC_OscConfig+0x386>
 8002678:	e014      	b.n	80026a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7ff f9fd 	bl	8001a78 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff f9f9 	bl	8001a78 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0b8      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a3b      	ldr	r2, [pc, #236]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80a4 	beq.w	8002808 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d06b      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d149      	bne.n	8002768 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7ff f9ca 	bl	8001a78 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7ff f9c6 	bl	8001a78 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e087      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	4313      	orrs	r3, r2
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800272e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002732:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff f99a 	bl	8001a78 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7ff f996 	bl	8001a78 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e057      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x478>
 8002766:	e04f      	b.n	8002808 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800276e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7ff f980 	bl	8001a78 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7ff f97c 	bl	8001a78 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e03d      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x4ac>
 800279a:	e035      	b.n	8002808 <HAL_RCC_OscConfig+0x538>
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x544>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d028      	beq.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d121      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11a      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027dc:	4293      	cmp	r3, r2
 80027de:	d111      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d0      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d910      	bls.n	8002860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 020f 	bic.w	r2, r3, #15
 8002846:	4965      	ldr	r1, [pc, #404]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494d      	ldr	r1, [pc, #308]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d040      	beq.n	800293c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d115      	bne.n	80028fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e073      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290c:	f7ff f8b4 	bl	8001a78 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7ff f8b0 	bl	8001a78 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e053      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d210      	bcs.n	800296c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	4922      	ldr	r1, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e032      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4916      	ldr	r1, [pc, #88]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f821 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	490a      	ldr	r1, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x1cc>)
 80029bc:	5ccb      	ldrb	r3, [r1, r3]
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1d0>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1d4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f810 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023c00 	.word	0x40023c00
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08008458 	.word	0x08008458
 80029e8:	20000008 	.word	0x20000008
 80029ec:	2000000c 	.word	0x2000000c

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b094      	sub	sp, #80	; 0x50
 80029f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	647b      	str	r3, [r7, #68]	; 0x44
 80029fc:	2300      	movs	r3, #0
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a00:	2300      	movs	r3, #0
 8002a02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a08:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d00d      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x40>
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	f200 80e1 	bhi.w	8002bdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a22:	e0db      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a24:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a28:	e0db      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2a:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2e:	e0d8      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a30:	4b6f      	ldr	r3, [pc, #444]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d063      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a46:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a62:	4622      	mov	r2, r4
 8002a64:	462b      	mov	r3, r5
 8002a66:	f04f 0000 	mov.w	r0, #0
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	0159      	lsls	r1, r3, #5
 8002a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a74:	0150      	lsls	r0, r2, #5
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	1a51      	subs	r1, r2, r1
 8002a7e:	6139      	str	r1, [r7, #16]
 8002a80:	4629      	mov	r1, r5
 8002a82:	eb63 0301 	sbc.w	r3, r3, r1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a94:	4659      	mov	r1, fp
 8002a96:	018b      	lsls	r3, r1, #6
 8002a98:	4651      	mov	r1, sl
 8002a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	018a      	lsls	r2, r1, #6
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	ebb2 0801 	subs.w	r8, r2, r1
 8002aa8:	4659      	mov	r1, fp
 8002aaa:	eb63 0901 	sbc.w	r9, r3, r1
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac2:	4690      	mov	r8, r2
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	eb18 0303 	adds.w	r3, r8, r3
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	462b      	mov	r3, r5
 8002ad0:	eb49 0303 	adc.w	r3, r9, r3
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	024b      	lsls	r3, r1, #9
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aec:	4621      	mov	r1, r4
 8002aee:	024a      	lsls	r2, r1, #9
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af6:	2200      	movs	r2, #0
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b00:	f7fe f8ba 	bl	8000c78 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	e058      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	2200      	movs	r2, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	4611      	mov	r1, r2
 8002b1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b1e:	623b      	str	r3, [r7, #32]
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b28:	4642      	mov	r2, r8
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	f04f 0000 	mov.w	r0, #0
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	0159      	lsls	r1, r3, #5
 8002b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3a:	0150      	lsls	r0, r2, #5
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4641      	mov	r1, r8
 8002b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b46:	4649      	mov	r1, r9
 8002b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b60:	ebb2 040a 	subs.w	r4, r2, sl
 8002b64:	eb63 050b 	sbc.w	r5, r3, fp
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00eb      	lsls	r3, r5, #3
 8002b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b76:	00e2      	lsls	r2, r4, #3
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	18e3      	adds	r3, r4, r3
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	464b      	mov	r3, r9
 8002b84:	eb45 0303 	adc.w	r3, r5, r3
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b96:	4629      	mov	r1, r5
 8002b98:	028b      	lsls	r3, r1, #10
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	028a      	lsls	r2, r1, #10
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002baa:	2200      	movs	r2, #0
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	61fa      	str	r2, [r7, #28]
 8002bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb4:	f7fe f860 	bl	8000c78 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3750      	adds	r7, #80	; 0x50
 8002be8:	46bd      	mov	sp, r7
 8002bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	007a1200 	.word	0x007a1200

08002bfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000008 	.word	0x20000008

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff0 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0a9b      	lsrs	r3, r3, #10
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08008468 	.word	0x08008468

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff ffdc 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0b5b      	lsrs	r3, r3, #13
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08008468 	.word	0x08008468

08002c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c8c:	4b69      	ldr	r3, [pc, #420]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a68      	ldr	r2, [pc, #416]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c96:	6093      	str	r3, [r2, #8]
 8002c98:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	4964      	ldr	r1, [pc, #400]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d017      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	4959      	ldr	r1, [pc, #356]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d017      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	494a      	ldr	r1, [pc, #296]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d18:	d101      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 808b 	beq.w	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	4a39      	ldr	r2, [pc, #228]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d52:	6413      	str	r3, [r2, #64]	; 0x40
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d60:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fe84 	bl	8001a78 <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7fe fe80 	bl	8001a78 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e357      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d86:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d035      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d02e      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dd2:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d114      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fe48 	bl	8001a78 <HAL_GetTick>
 8002de8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe fe44 	bl	8001a78 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e319      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ee      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	4901      	ldr	r1, [pc, #4]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
 8002e32:	e00b      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	0ffffcff 	.word	0x0ffffcff
 8002e40:	4baa      	ldr	r3, [pc, #680]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4aa9      	ldr	r2, [pc, #676]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e4a:	6093      	str	r3, [r2, #8]
 8002e4c:	4ba7      	ldr	r3, [pc, #668]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	49a4      	ldr	r1, [pc, #656]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e6a:	4ba0      	ldr	r3, [pc, #640]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e70:	4a9e      	ldr	r2, [pc, #632]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e7a:	4b9c      	ldr	r3, [pc, #624]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	4999      	ldr	r1, [pc, #612]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e98:	4b94      	ldr	r3, [pc, #592]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea6:	4991      	ldr	r1, [pc, #580]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eba:	4b8c      	ldr	r3, [pc, #560]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec8:	4988      	ldr	r1, [pc, #544]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002edc:	4b83      	ldr	r3, [pc, #524]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eea:	4980      	ldr	r1, [pc, #512]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002efe:	4b7b      	ldr	r3, [pc, #492]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4977      	ldr	r1, [pc, #476]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f20:	4b72      	ldr	r3, [pc, #456]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f023 0203 	bic.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	496f      	ldr	r1, [pc, #444]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f42:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f023 020c 	bic.w	r2, r3, #12
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	4966      	ldr	r1, [pc, #408]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	495e      	ldr	r1, [pc, #376]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f86:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f94:	4955      	ldr	r1, [pc, #340]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	494d      	ldr	r1, [pc, #308]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fca:	4b48      	ldr	r3, [pc, #288]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	4944      	ldr	r1, [pc, #272]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fec:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	493c      	ldr	r1, [pc, #240]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301c:	4933      	ldr	r1, [pc, #204]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003030:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303e:	492b      	ldr	r1, [pc, #172]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d011      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003060:	4922      	ldr	r1, [pc, #136]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800306c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003070:	d101      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	4912      	ldr	r1, [pc, #72]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c4:	4909      	ldr	r1, [pc, #36]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d006      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80d9 	beq.w	8003292 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030e0:	4b02      	ldr	r3, [pc, #8]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a01      	ldr	r2, [pc, #4]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f2:	f7fe fcc1 	bl	8001a78 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030fa:	f7fe fcbd 	bl	8001a78 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	; 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e194      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800310c:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d021      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11d      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800312c:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003140:	0e1b      	lsrs	r3, r3, #24
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	019a      	lsls	r2, r3, #6
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	071b      	lsls	r3, r3, #28
 8003160:	4957      	ldr	r1, [pc, #348]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02e      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003192:	d129      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a8:	0f1b      	lsrs	r3, r3, #28
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	019a      	lsls	r2, r3, #6
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	071b      	lsls	r3, r3, #28
 80031c8:	493d      	ldr	r1, [pc, #244]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031d0:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d6:	f023 021f 	bic.w	r2, r3, #31
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	3b01      	subs	r3, #1
 80031e0:	4937      	ldr	r1, [pc, #220]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01d      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fa:	0e1b      	lsrs	r3, r3, #24
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003208:	0f1b      	lsrs	r3, r3, #28
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	019a      	lsls	r2, r3, #6
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	071b      	lsls	r3, r3, #28
 8003228:	4925      	ldr	r1, [pc, #148]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d011      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	019a      	lsls	r2, r3, #6
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	071b      	lsls	r3, r3, #28
 8003258:	4919      	ldr	r1, [pc, #100]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe fc04 	bl	8001a78 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003274:	f7fe fc00 	bl	8001a78 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0d7      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 80cd 	bne.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a6:	f7fe fbe7 	bl	8001a78 <HAL_GetTick>
 80032aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032ae:	f7fe fbe3 	bl	8001a78 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d903      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0ba      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032c4:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d0:	d0ed      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12a      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032fa:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003308:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	0f1b      	lsrs	r3, r3, #28
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	019a      	lsls	r2, r3, #6
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	4944      	ldr	r1, [pc, #272]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	493d      	ldr	r1, [pc, #244]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d022      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003364:	d11d      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	0e1b      	lsrs	r3, r3, #24
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	0f1b      	lsrs	r3, r3, #28
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	019a      	lsls	r2, r3, #6
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	4929      	ldr	r1, [pc, #164]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d028      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	0e1b      	lsrs	r3, r3, #24
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	019a      	lsls	r2, r3, #6
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	4917      	ldr	r1, [pc, #92]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4911      	ldr	r1, [pc, #68]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340c:	f7fe fb34 	bl	8001a78 <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003414:	f7fe fb30 	bl	8001a78 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e007      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003432:	d1ef      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e049      	b.n	80034ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe f9ce 	bl	800180c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 fac0 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d001      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e054      	b.n	80035b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d01d      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a21      	ldr	r2, [pc, #132]	; (80035cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_TIM_Base_Start_IT+0xe8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d115      	bne.n	80035a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_TIM_Base_Start_IT+0xec>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d015      	beq.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d011      	beq.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	e008      	b.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e000      	b.n	80035b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40001800 	.word	0x40001800
 80035e0:	00010007 	.word	0x00010007

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9d0 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9c2 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f9d3 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9a6 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f998 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9a9 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0208 	mvn.w	r2, #8
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f97c 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f96e 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f97f 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f952 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f944 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f955 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fe06 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fb0c 	bl	8003dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	d10e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 faff 	bl	8003dc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f903 	bl	80039f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d10e      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d107      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0220 	mvn.w	r2, #32
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fabf 	bl	8003d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIM_ConfigClockSource+0x1c>
 800383c:	2302      	movs	r3, #2
 800383e:	e0b4      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x186>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4b56      	ldr	r3, [pc, #344]	; (80039b4 <HAL_TIM_ConfigClockSource+0x190>)
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	d03e      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0xd4>
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387e:	f200 8087 	bhi.w	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	f000 8086 	beq.w	8003996 <HAL_TIM_ConfigClockSource+0x172>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d87f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b70      	cmp	r3, #112	; 0x70
 8003892:	d01a      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0xa6>
 8003894:	2b70      	cmp	r3, #112	; 0x70
 8003896:	d87b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b60      	cmp	r3, #96	; 0x60
 800389a:	d050      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x11a>
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d877      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b50      	cmp	r3, #80	; 0x50
 80038a2:	d03c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xfa>
 80038a4:	2b50      	cmp	r3, #80	; 0x50
 80038a6:	d873      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d058      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x13a>
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d86f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b30      	cmp	r3, #48	; 0x30
 80038b2:	d064      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038b4:	2b30      	cmp	r3, #48	; 0x30
 80038b6:	d86b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d060      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d867      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05c      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d05a      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	e062      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f000 f9af 	bl	8003c3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	609a      	str	r2, [r3, #8]
      break;
 80038f6:	e04f      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f000 f998 	bl	8003c3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e03c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	461a      	mov	r2, r3
 800392c:	f000 f90c 	bl	8003b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2150      	movs	r1, #80	; 0x50
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f965 	bl	8003c06 <TIM_ITRx_SetConfig>
      break;
 800393c:	e02c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	461a      	mov	r2, r3
 800394c:	f000 f92b 	bl	8003ba6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2160      	movs	r1, #96	; 0x60
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f955 	bl	8003c06 <TIM_ITRx_SetConfig>
      break;
 800395c:	e01c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	461a      	mov	r2, r3
 800396c:	f000 f8ec 	bl	8003b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2140      	movs	r1, #64	; 0x40
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f945 	bl	8003c06 <TIM_ITRx_SetConfig>
      break;
 800397c:	e00c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f000 f93c 	bl	8003c06 <TIM_ITRx_SetConfig>
      break;
 800398e:	e003      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e000      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	fffeff88 	.word	0xfffeff88

080039b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a40      	ldr	r2, [pc, #256]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d00f      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d027      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d023      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d017      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <TIM_Base_SetConfig+0x128>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <TIM_Base_SetConfig+0x12c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <TIM_Base_SetConfig+0x130>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <TIM_Base_SetConfig+0x134>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <TIM_Base_SetConfig+0x138>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <TIM_Base_SetConfig+0x13c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0xf8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	615a      	str	r2, [r3, #20]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800
 8003b3c:	40001800 	.word	0x40001800
 8003b40:	40001c00 	.word	0x40001c00
 8003b44:	40002000 	.word	0x40002000

08003b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 0201 	bic.w	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f023 030a 	bic.w	r3, r3, #10
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b087      	sub	sp, #28
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0210 	bic.w	r2, r3, #16
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	031b      	lsls	r3, r3, #12
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f043 0307 	orr.w	r3, r3, #7
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	609a      	str	r2, [r3, #8]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e06d      	b.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d022      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d01d      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d018      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00e      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10c      	bne.n	8003d5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40010400 	.word	0x40010400
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40001800 	.word	0x40001800

08003d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e040      	b.n	8003e68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fd5c 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb1e 	bl	8004454 <UART_SetConfig>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e022      	b.n	8003e68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fd76 	bl	800491c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fdfd 	bl	8004a60 <UART_CheckIdleState>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b0ba      	sub	sp, #232	; 0xe8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d115      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8297 	beq.w	80043fc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
      }
      return;
 8003ed6:	e291      	b.n	80043fc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8117 	beq.w	8004110 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ef2:	4b85      	ldr	r3, [pc, #532]	; (8004108 <HAL_UART_IRQHandler+0x298>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 810a 	beq.w	8004110 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d011      	beq.n	8003f2c <HAL_UART_IRQHandler+0xbc>
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d011      	beq.n	8003f5c <HAL_UART_IRQHandler+0xec>
 8003f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f52:	f043 0204 	orr.w	r2, r3, #4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d011      	beq.n	8003f8c <HAL_UART_IRQHandler+0x11c>
 8003f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f82:	f043 0202 	orr.w	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d017      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbe:	f043 0208 	orr.w	r2, r3, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d012      	beq.n	8003ffa <HAL_UART_IRQHandler+0x18a>
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff0:	f043 0220 	orr.w	r2, r3, #32
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 81fd 	beq.w	8004400 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800404a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04f      	beq.n	80040f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fe01 	bl	8004c5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d141      	bne.n	80040ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800407c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800409e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1d9      	bne.n	8004066 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <HAL_UART_IRQHandler+0x29c>)
 80040c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fe63 	bl	8001d92 <HAL_DMA_Abort_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d017      	beq.n	8004102 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00f      	b.n	8004102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9a0 	bl	8004428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00b      	b.n	8004102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f99c 	bl	8004428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e007      	b.n	8004102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f998 	bl	8004428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004100:	e17e      	b.n	8004400 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004102:	bf00      	nop
    return;
 8004104:	e17c      	b.n	8004400 <HAL_UART_IRQHandler+0x590>
 8004106:	bf00      	nop
 8004108:	04000120 	.word	0x04000120
 800410c:	08004d23 	.word	0x08004d23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 814c 	bne.w	80043b2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8145 	beq.w	80043b2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 813e 	beq.w	80043b2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2210      	movs	r2, #16
 800413c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	f040 80b6 	bne.w	80042ba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800415a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 8150 	beq.w	8004404 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800416e:	429a      	cmp	r2, r3
 8004170:	f080 8148 	bcs.w	8004404 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800417a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004188:	f000 8086 	beq.w	8004298 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1da      	bne.n	800418c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800420c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e1      	bne.n	80041d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3308      	adds	r3, #8
 8004232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800423c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e3      	bne.n	8004212 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004268:	f023 0310 	bic.w	r3, r3, #16
 800426c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800427a:	65bb      	str	r3, [r7, #88]	; 0x58
 800427c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e4      	bne.n	8004258 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd fd0d 	bl	8001cb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8c2 	bl	800443c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042b8:	e0a4      	b.n	8004404 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8096 	beq.w	8004408 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80042dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8091 	beq.w	8004408 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
 800430a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800430e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e4      	bne.n	80042e6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	623b      	str	r3, [r7, #32]
   return(result);
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3308      	adds	r3, #8
 800433c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004340:	633a      	str	r2, [r7, #48]	; 0x30
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e3      	bne.n	800431c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	60fb      	str	r3, [r7, #12]
   return(result);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	69b9      	ldr	r1, [r7, #24]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	617b      	str	r3, [r7, #20]
   return(result);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e4      	bne.n	8004368 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f846 	bl	800443c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043b0:	e02a      	b.n	8004408 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01c      	beq.n	800440c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
    }
    return;
 80043da:	e017      	b.n	800440c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <HAL_UART_IRQHandler+0x59e>
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fcaa 	bl	8004d4e <UART_EndTransmit_IT>
    return;
 80043fa:	e008      	b.n	800440e <HAL_UART_IRQHandler+0x59e>
      return;
 80043fc:	bf00      	nop
 80043fe:	e006      	b.n	800440e <HAL_UART_IRQHandler+0x59e>
    return;
 8004400:	bf00      	nop
 8004402:	e004      	b.n	800440e <HAL_UART_IRQHandler+0x59e>
      return;
 8004404:	bf00      	nop
 8004406:	e002      	b.n	800440e <HAL_UART_IRQHandler+0x59e>
      return;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HAL_UART_IRQHandler+0x59e>
    return;
 800440c:	bf00      	nop
  }

}
 800440e:	37e8      	adds	r7, #232	; 0xe8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4ba6      	ldr	r3, [pc, #664]	; (8004718 <UART_SetConfig+0x2c4>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	6979      	ldr	r1, [r7, #20]
 8004488:	430b      	orrs	r3, r1
 800448a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a94      	ldr	r2, [pc, #592]	; (800471c <UART_SetConfig+0x2c8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d120      	bne.n	8004512 <UART_SetConfig+0xbe>
 80044d0:	4b93      	ldr	r3, [pc, #588]	; (8004720 <UART_SetConfig+0x2cc>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d816      	bhi.n	800450c <UART_SetConfig+0xb8>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x90>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	08004501 	.word	0x08004501
 80044ec:	080044fb 	.word	0x080044fb
 80044f0:	08004507 	.word	0x08004507
 80044f4:	2301      	movs	r3, #1
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e150      	b.n	800479c <UART_SetConfig+0x348>
 80044fa:	2302      	movs	r3, #2
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e14d      	b.n	800479c <UART_SetConfig+0x348>
 8004500:	2304      	movs	r3, #4
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e14a      	b.n	800479c <UART_SetConfig+0x348>
 8004506:	2308      	movs	r3, #8
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e147      	b.n	800479c <UART_SetConfig+0x348>
 800450c:	2310      	movs	r3, #16
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e144      	b.n	800479c <UART_SetConfig+0x348>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a83      	ldr	r2, [pc, #524]	; (8004724 <UART_SetConfig+0x2d0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d132      	bne.n	8004582 <UART_SetConfig+0x12e>
 800451c:	4b80      	ldr	r3, [pc, #512]	; (8004720 <UART_SetConfig+0x2cc>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d828      	bhi.n	800457c <UART_SetConfig+0x128>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0xdc>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004565 	.word	0x08004565
 8004534:	0800457d 	.word	0x0800457d
 8004538:	0800457d 	.word	0x0800457d
 800453c:	0800457d 	.word	0x0800457d
 8004540:	08004571 	.word	0x08004571
 8004544:	0800457d 	.word	0x0800457d
 8004548:	0800457d 	.word	0x0800457d
 800454c:	0800457d 	.word	0x0800457d
 8004550:	0800456b 	.word	0x0800456b
 8004554:	0800457d 	.word	0x0800457d
 8004558:	0800457d 	.word	0x0800457d
 800455c:	0800457d 	.word	0x0800457d
 8004560:	08004577 	.word	0x08004577
 8004564:	2300      	movs	r3, #0
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e118      	b.n	800479c <UART_SetConfig+0x348>
 800456a:	2302      	movs	r3, #2
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e115      	b.n	800479c <UART_SetConfig+0x348>
 8004570:	2304      	movs	r3, #4
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e112      	b.n	800479c <UART_SetConfig+0x348>
 8004576:	2308      	movs	r3, #8
 8004578:	77fb      	strb	r3, [r7, #31]
 800457a:	e10f      	b.n	800479c <UART_SetConfig+0x348>
 800457c:	2310      	movs	r3, #16
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e10c      	b.n	800479c <UART_SetConfig+0x348>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a68      	ldr	r2, [pc, #416]	; (8004728 <UART_SetConfig+0x2d4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d120      	bne.n	80045ce <UART_SetConfig+0x17a>
 800458c:	4b64      	ldr	r3, [pc, #400]	; (8004720 <UART_SetConfig+0x2cc>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004596:	2b30      	cmp	r3, #48	; 0x30
 8004598:	d013      	beq.n	80045c2 <UART_SetConfig+0x16e>
 800459a:	2b30      	cmp	r3, #48	; 0x30
 800459c:	d814      	bhi.n	80045c8 <UART_SetConfig+0x174>
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d009      	beq.n	80045b6 <UART_SetConfig+0x162>
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d810      	bhi.n	80045c8 <UART_SetConfig+0x174>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <UART_SetConfig+0x15c>
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d006      	beq.n	80045bc <UART_SetConfig+0x168>
 80045ae:	e00b      	b.n	80045c8 <UART_SetConfig+0x174>
 80045b0:	2300      	movs	r3, #0
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e0f2      	b.n	800479c <UART_SetConfig+0x348>
 80045b6:	2302      	movs	r3, #2
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e0ef      	b.n	800479c <UART_SetConfig+0x348>
 80045bc:	2304      	movs	r3, #4
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e0ec      	b.n	800479c <UART_SetConfig+0x348>
 80045c2:	2308      	movs	r3, #8
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	e0e9      	b.n	800479c <UART_SetConfig+0x348>
 80045c8:	2310      	movs	r3, #16
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e0e6      	b.n	800479c <UART_SetConfig+0x348>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a56      	ldr	r2, [pc, #344]	; (800472c <UART_SetConfig+0x2d8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d120      	bne.n	800461a <UART_SetConfig+0x1c6>
 80045d8:	4b51      	ldr	r3, [pc, #324]	; (8004720 <UART_SetConfig+0x2cc>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045e2:	2bc0      	cmp	r3, #192	; 0xc0
 80045e4:	d013      	beq.n	800460e <UART_SetConfig+0x1ba>
 80045e6:	2bc0      	cmp	r3, #192	; 0xc0
 80045e8:	d814      	bhi.n	8004614 <UART_SetConfig+0x1c0>
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	d009      	beq.n	8004602 <UART_SetConfig+0x1ae>
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d810      	bhi.n	8004614 <UART_SetConfig+0x1c0>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <UART_SetConfig+0x1a8>
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d006      	beq.n	8004608 <UART_SetConfig+0x1b4>
 80045fa:	e00b      	b.n	8004614 <UART_SetConfig+0x1c0>
 80045fc:	2300      	movs	r3, #0
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e0cc      	b.n	800479c <UART_SetConfig+0x348>
 8004602:	2302      	movs	r3, #2
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	e0c9      	b.n	800479c <UART_SetConfig+0x348>
 8004608:	2304      	movs	r3, #4
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e0c6      	b.n	800479c <UART_SetConfig+0x348>
 800460e:	2308      	movs	r3, #8
 8004610:	77fb      	strb	r3, [r7, #31]
 8004612:	e0c3      	b.n	800479c <UART_SetConfig+0x348>
 8004614:	2310      	movs	r3, #16
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e0c0      	b.n	800479c <UART_SetConfig+0x348>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a44      	ldr	r2, [pc, #272]	; (8004730 <UART_SetConfig+0x2dc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d125      	bne.n	8004670 <UART_SetConfig+0x21c>
 8004624:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <UART_SetConfig+0x2cc>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004632:	d017      	beq.n	8004664 <UART_SetConfig+0x210>
 8004634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004638:	d817      	bhi.n	800466a <UART_SetConfig+0x216>
 800463a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463e:	d00b      	beq.n	8004658 <UART_SetConfig+0x204>
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d811      	bhi.n	800466a <UART_SetConfig+0x216>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <UART_SetConfig+0x1fe>
 800464a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464e:	d006      	beq.n	800465e <UART_SetConfig+0x20a>
 8004650:	e00b      	b.n	800466a <UART_SetConfig+0x216>
 8004652:	2300      	movs	r3, #0
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e0a1      	b.n	800479c <UART_SetConfig+0x348>
 8004658:	2302      	movs	r3, #2
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e09e      	b.n	800479c <UART_SetConfig+0x348>
 800465e:	2304      	movs	r3, #4
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e09b      	b.n	800479c <UART_SetConfig+0x348>
 8004664:	2308      	movs	r3, #8
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e098      	b.n	800479c <UART_SetConfig+0x348>
 800466a:	2310      	movs	r3, #16
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e095      	b.n	800479c <UART_SetConfig+0x348>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2f      	ldr	r2, [pc, #188]	; (8004734 <UART_SetConfig+0x2e0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d125      	bne.n	80046c6 <UART_SetConfig+0x272>
 800467a:	4b29      	ldr	r3, [pc, #164]	; (8004720 <UART_SetConfig+0x2cc>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004688:	d017      	beq.n	80046ba <UART_SetConfig+0x266>
 800468a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800468e:	d817      	bhi.n	80046c0 <UART_SetConfig+0x26c>
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004694:	d00b      	beq.n	80046ae <UART_SetConfig+0x25a>
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469a:	d811      	bhi.n	80046c0 <UART_SetConfig+0x26c>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <UART_SetConfig+0x254>
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d006      	beq.n	80046b4 <UART_SetConfig+0x260>
 80046a6:	e00b      	b.n	80046c0 <UART_SetConfig+0x26c>
 80046a8:	2301      	movs	r3, #1
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e076      	b.n	800479c <UART_SetConfig+0x348>
 80046ae:	2302      	movs	r3, #2
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e073      	b.n	800479c <UART_SetConfig+0x348>
 80046b4:	2304      	movs	r3, #4
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e070      	b.n	800479c <UART_SetConfig+0x348>
 80046ba:	2308      	movs	r3, #8
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e06d      	b.n	800479c <UART_SetConfig+0x348>
 80046c0:	2310      	movs	r3, #16
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e06a      	b.n	800479c <UART_SetConfig+0x348>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <UART_SetConfig+0x2e4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d138      	bne.n	8004742 <UART_SetConfig+0x2ee>
 80046d0:	4b13      	ldr	r3, [pc, #76]	; (8004720 <UART_SetConfig+0x2cc>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046de:	d017      	beq.n	8004710 <UART_SetConfig+0x2bc>
 80046e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046e4:	d82a      	bhi.n	800473c <UART_SetConfig+0x2e8>
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	d00b      	beq.n	8004704 <UART_SetConfig+0x2b0>
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f0:	d824      	bhi.n	800473c <UART_SetConfig+0x2e8>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <UART_SetConfig+0x2aa>
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d006      	beq.n	800470a <UART_SetConfig+0x2b6>
 80046fc:	e01e      	b.n	800473c <UART_SetConfig+0x2e8>
 80046fe:	2300      	movs	r3, #0
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e04b      	b.n	800479c <UART_SetConfig+0x348>
 8004704:	2302      	movs	r3, #2
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e048      	b.n	800479c <UART_SetConfig+0x348>
 800470a:	2304      	movs	r3, #4
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e045      	b.n	800479c <UART_SetConfig+0x348>
 8004710:	2308      	movs	r3, #8
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e042      	b.n	800479c <UART_SetConfig+0x348>
 8004716:	bf00      	nop
 8004718:	efff69f3 	.word	0xefff69f3
 800471c:	40011000 	.word	0x40011000
 8004720:	40023800 	.word	0x40023800
 8004724:	40004400 	.word	0x40004400
 8004728:	40004800 	.word	0x40004800
 800472c:	40004c00 	.word	0x40004c00
 8004730:	40005000 	.word	0x40005000
 8004734:	40011400 	.word	0x40011400
 8004738:	40007800 	.word	0x40007800
 800473c:	2310      	movs	r3, #16
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e02c      	b.n	800479c <UART_SetConfig+0x348>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a72      	ldr	r2, [pc, #456]	; (8004910 <UART_SetConfig+0x4bc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d125      	bne.n	8004798 <UART_SetConfig+0x344>
 800474c:	4b71      	ldr	r3, [pc, #452]	; (8004914 <UART_SetConfig+0x4c0>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004756:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800475a:	d017      	beq.n	800478c <UART_SetConfig+0x338>
 800475c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004760:	d817      	bhi.n	8004792 <UART_SetConfig+0x33e>
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004766:	d00b      	beq.n	8004780 <UART_SetConfig+0x32c>
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476c:	d811      	bhi.n	8004792 <UART_SetConfig+0x33e>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <UART_SetConfig+0x326>
 8004772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004776:	d006      	beq.n	8004786 <UART_SetConfig+0x332>
 8004778:	e00b      	b.n	8004792 <UART_SetConfig+0x33e>
 800477a:	2300      	movs	r3, #0
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e00d      	b.n	800479c <UART_SetConfig+0x348>
 8004780:	2302      	movs	r3, #2
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e00a      	b.n	800479c <UART_SetConfig+0x348>
 8004786:	2304      	movs	r3, #4
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e007      	b.n	800479c <UART_SetConfig+0x348>
 800478c:	2308      	movs	r3, #8
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e004      	b.n	800479c <UART_SetConfig+0x348>
 8004792:	2310      	movs	r3, #16
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e001      	b.n	800479c <UART_SetConfig+0x348>
 8004798:	2310      	movs	r3, #16
 800479a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	d15b      	bne.n	800485e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80047a6:	7ffb      	ldrb	r3, [r7, #31]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d828      	bhi.n	80047fe <UART_SetConfig+0x3aa>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0x360>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	080047ff 	.word	0x080047ff
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	080047ff 	.word	0x080047ff
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7fe fa1c 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80047dc:	61b8      	str	r0, [r7, #24]
        break;
 80047de:	e013      	b.n	8004808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e0:	f7fe fa2c 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 80047e4:	61b8      	str	r0, [r7, #24]
        break;
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <UART_SetConfig+0x4c4>)
 80047ea:	61bb      	str	r3, [r7, #24]
        break;
 80047ec:	e00c      	b.n	8004808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe f8ff 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80047f2:	61b8      	str	r0, [r7, #24]
        break;
 80047f4:	e008      	b.n	8004808 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e004      	b.n	8004808 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	77bb      	strb	r3, [r7, #30]
        break;
 8004806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d074      	beq.n	80048f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	005a      	lsls	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	d916      	bls.n	8004858 <UART_SetConfig+0x404>
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d212      	bcs.n	8004858 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f023 030f 	bic.w	r3, r3, #15
 800483a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	b29a      	uxth	r2, r3
 8004848:	89fb      	ldrh	r3, [r7, #14]
 800484a:	4313      	orrs	r3, r2
 800484c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	89fa      	ldrh	r2, [r7, #14]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e04f      	b.n	80048f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	77bb      	strb	r3, [r7, #30]
 800485c:	e04c      	b.n	80048f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d828      	bhi.n	80048b6 <UART_SetConfig+0x462>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x418>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004891 	.word	0x08004891
 8004870:	08004899 	.word	0x08004899
 8004874:	080048a1 	.word	0x080048a1
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048b7 	.word	0x080048b7
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048af 	.word	0x080048af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7fe f9c0 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 8004894:	61b8      	str	r0, [r7, #24]
        break;
 8004896:	e013      	b.n	80048c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7fe f9d0 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 800489c:	61b8      	str	r0, [r7, #24]
        break;
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a0:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <UART_SetConfig+0x4c4>)
 80048a2:	61bb      	str	r3, [r7, #24]
        break;
 80048a4:	e00c      	b.n	80048c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a6:	f7fe f8a3 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80048aa:	61b8      	str	r0, [r7, #24]
        break;
 80048ac:	e008      	b.n	80048c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e004      	b.n	80048c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77bb      	strb	r3, [r7, #30]
        break;
 80048be:	bf00      	nop
    }

    if (pclk != 0U)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085a      	lsrs	r2, r3, #1
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	441a      	add	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d909      	bls.n	80048f4 <UART_SetConfig+0x4a0>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d205      	bcs.n	80048f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	e001      	b.n	80048f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004904:	7fbb      	ldrb	r3, [r7, #30]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40007c00 	.word	0x40007c00
 8004914:	40023800 	.word	0x40023800
 8004918:	00f42400 	.word	0x00f42400

0800491c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01a      	beq.n	8004a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1a:	d10a      	bne.n	8004a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a70:	f7fd f802 	bl	8001a78 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d10e      	bne.n	8004aa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f81b 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e011      	b.n	8004ac6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b09c      	sub	sp, #112	; 0x70
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ade:	e0a7      	b.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	f000 80a3 	beq.w	8004c30 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fc ffc5 	bl	8001a78 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x32>
 8004afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d13f      	bne.n	8004b80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b14:	667b      	str	r3, [r7, #100]	; 0x64
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b52:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e068      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d050      	beq.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9c:	d148      	bne.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e6      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bfa:	623a      	str	r2, [r7, #32]
 8004bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e010      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	f43f af48 	beq.w	8004ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3770      	adds	r7, #112	; 0x70
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b095      	sub	sp, #84	; 0x54
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	643b      	str	r3, [r7, #64]	; 0x40
 8004c82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e6      	bne.n	8004c62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e5      	bne.n	8004c94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d118      	bne.n	8004d02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0310 	bic.w	r3, r3, #16
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6979      	ldr	r1, [r7, #20]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e6      	bne.n	8004cd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d16:	bf00      	nop
 8004d18:	3754      	adds	r7, #84	; 0x54
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fb71 	bl	8004428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b088      	sub	sp, #32
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	613b      	str	r3, [r7, #16]
   return(result);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fb3d 	bl	8004414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9a:	bf00      	nop
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <__errno>:
 8004da4:	4b01      	ldr	r3, [pc, #4]	; (8004dac <__errno+0x8>)
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000014 	.word	0x20000014

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4d0d      	ldr	r5, [pc, #52]	; (8004de8 <__libc_init_array+0x38>)
 8004db4:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	4d0b      	ldr	r5, [pc, #44]	; (8004df0 <__libc_init_array+0x40>)
 8004dc2:	4c0c      	ldr	r4, [pc, #48]	; (8004df4 <__libc_init_array+0x44>)
 8004dc4:	f003 fb3a 	bl	800843c <_init>
 8004dc8:	1b64      	subs	r4, r4, r5
 8004dca:	10a4      	asrs	r4, r4, #2
 8004dcc:	2600      	movs	r6, #0
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	080088b4 	.word	0x080088b4
 8004dec:	080088b4 	.word	0x080088b4
 8004df0:	080088b4 	.word	0x080088b4
 8004df4:	080088b8 	.word	0x080088b8

08004df8 <memset>:
 8004df8:	4402      	add	r2, r0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	f803 1b01 	strb.w	r1, [r3], #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <_scanf_float>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	4617      	mov	r7, r2
 8004e10:	9303      	str	r3, [sp, #12]
 8004e12:	688b      	ldr	r3, [r1, #8]
 8004e14:	1e5a      	subs	r2, r3, #1
 8004e16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e1a:	bf83      	ittte	hi
 8004e1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e20:	195b      	addhi	r3, r3, r5
 8004e22:	9302      	strhi	r3, [sp, #8]
 8004e24:	2300      	movls	r3, #0
 8004e26:	bf86      	itte	hi
 8004e28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e2c:	608b      	strhi	r3, [r1, #8]
 8004e2e:	9302      	strls	r3, [sp, #8]
 8004e30:	680b      	ldr	r3, [r1, #0]
 8004e32:	468b      	mov	fp, r1
 8004e34:	2500      	movs	r5, #0
 8004e36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8004e3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e42:	4680      	mov	r8, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	465e      	mov	r6, fp
 8004e48:	46aa      	mov	sl, r5
 8004e4a:	46a9      	mov	r9, r5
 8004e4c:	9501      	str	r5, [sp, #4]
 8004e4e:	68a2      	ldr	r2, [r4, #8]
 8004e50:	b152      	cbz	r2, 8004e68 <_scanf_float+0x60>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b4e      	cmp	r3, #78	; 0x4e
 8004e58:	d864      	bhi.n	8004f24 <_scanf_float+0x11c>
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d83c      	bhi.n	8004ed8 <_scanf_float+0xd0>
 8004e5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004e62:	b2c8      	uxtb	r0, r1
 8004e64:	280e      	cmp	r0, #14
 8004e66:	d93a      	bls.n	8004ede <_scanf_float+0xd6>
 8004e68:	f1b9 0f00 	cmp.w	r9, #0
 8004e6c:	d003      	beq.n	8004e76 <_scanf_float+0x6e>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e7a:	f1ba 0f01 	cmp.w	sl, #1
 8004e7e:	f200 8113 	bhi.w	80050a8 <_scanf_float+0x2a0>
 8004e82:	455e      	cmp	r6, fp
 8004e84:	f200 8105 	bhi.w	8005092 <_scanf_float+0x28a>
 8004e88:	2501      	movs	r5, #1
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	b007      	add	sp, #28
 8004e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004e96:	2a0d      	cmp	r2, #13
 8004e98:	d8e6      	bhi.n	8004e68 <_scanf_float+0x60>
 8004e9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ea0 <_scanf_float+0x98>)
 8004e9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ea0:	08004fdf 	.word	0x08004fdf
 8004ea4:	08004e69 	.word	0x08004e69
 8004ea8:	08004e69 	.word	0x08004e69
 8004eac:	08004e69 	.word	0x08004e69
 8004eb0:	0800503f 	.word	0x0800503f
 8004eb4:	08005017 	.word	0x08005017
 8004eb8:	08004e69 	.word	0x08004e69
 8004ebc:	08004e69 	.word	0x08004e69
 8004ec0:	08004fed 	.word	0x08004fed
 8004ec4:	08004e69 	.word	0x08004e69
 8004ec8:	08004e69 	.word	0x08004e69
 8004ecc:	08004e69 	.word	0x08004e69
 8004ed0:	08004e69 	.word	0x08004e69
 8004ed4:	08004fa5 	.word	0x08004fa5
 8004ed8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004edc:	e7db      	b.n	8004e96 <_scanf_float+0x8e>
 8004ede:	290e      	cmp	r1, #14
 8004ee0:	d8c2      	bhi.n	8004e68 <_scanf_float+0x60>
 8004ee2:	a001      	add	r0, pc, #4	; (adr r0, 8004ee8 <_scanf_float+0xe0>)
 8004ee4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ee8:	08004f97 	.word	0x08004f97
 8004eec:	08004e69 	.word	0x08004e69
 8004ef0:	08004f97 	.word	0x08004f97
 8004ef4:	0800502b 	.word	0x0800502b
 8004ef8:	08004e69 	.word	0x08004e69
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f81 	.word	0x08004f81
 8004f04:	08004f81 	.word	0x08004f81
 8004f08:	08004f81 	.word	0x08004f81
 8004f0c:	08004f81 	.word	0x08004f81
 8004f10:	08004f81 	.word	0x08004f81
 8004f14:	08004f81 	.word	0x08004f81
 8004f18:	08004f81 	.word	0x08004f81
 8004f1c:	08004f81 	.word	0x08004f81
 8004f20:	08004f81 	.word	0x08004f81
 8004f24:	2b6e      	cmp	r3, #110	; 0x6e
 8004f26:	d809      	bhi.n	8004f3c <_scanf_float+0x134>
 8004f28:	2b60      	cmp	r3, #96	; 0x60
 8004f2a:	d8b2      	bhi.n	8004e92 <_scanf_float+0x8a>
 8004f2c:	2b54      	cmp	r3, #84	; 0x54
 8004f2e:	d077      	beq.n	8005020 <_scanf_float+0x218>
 8004f30:	2b59      	cmp	r3, #89	; 0x59
 8004f32:	d199      	bne.n	8004e68 <_scanf_float+0x60>
 8004f34:	2d07      	cmp	r5, #7
 8004f36:	d197      	bne.n	8004e68 <_scanf_float+0x60>
 8004f38:	2508      	movs	r5, #8
 8004f3a:	e029      	b.n	8004f90 <_scanf_float+0x188>
 8004f3c:	2b74      	cmp	r3, #116	; 0x74
 8004f3e:	d06f      	beq.n	8005020 <_scanf_float+0x218>
 8004f40:	2b79      	cmp	r3, #121	; 0x79
 8004f42:	e7f6      	b.n	8004f32 <_scanf_float+0x12a>
 8004f44:	6821      	ldr	r1, [r4, #0]
 8004f46:	05c8      	lsls	r0, r1, #23
 8004f48:	d51a      	bpl.n	8004f80 <_scanf_float+0x178>
 8004f4a:	9b02      	ldr	r3, [sp, #8]
 8004f4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f50:	6021      	str	r1, [r4, #0]
 8004f52:	f109 0901 	add.w	r9, r9, #1
 8004f56:	b11b      	cbz	r3, 8004f60 <_scanf_float+0x158>
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	3201      	adds	r2, #1
 8004f5c:	9302      	str	r3, [sp, #8]
 8004f5e:	60a2      	str	r2, [r4, #8]
 8004f60:	68a3      	ldr	r3, [r4, #8]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	6123      	str	r3, [r4, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	607b      	str	r3, [r7, #4]
 8004f74:	f340 8084 	ble.w	8005080 <_scanf_float+0x278>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	603b      	str	r3, [r7, #0]
 8004f7e:	e766      	b.n	8004e4e <_scanf_float+0x46>
 8004f80:	eb1a 0f05 	cmn.w	sl, r5
 8004f84:	f47f af70 	bne.w	8004e68 <_scanf_float+0x60>
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	f806 3b01 	strb.w	r3, [r6], #1
 8004f94:	e7e4      	b.n	8004f60 <_scanf_float+0x158>
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	0610      	lsls	r0, r2, #24
 8004f9a:	f57f af65 	bpl.w	8004e68 <_scanf_float+0x60>
 8004f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fa2:	e7f4      	b.n	8004f8e <_scanf_float+0x186>
 8004fa4:	f1ba 0f00 	cmp.w	sl, #0
 8004fa8:	d10e      	bne.n	8004fc8 <_scanf_float+0x1c0>
 8004faa:	f1b9 0f00 	cmp.w	r9, #0
 8004fae:	d10e      	bne.n	8004fce <_scanf_float+0x1c6>
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004fb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004fba:	d108      	bne.n	8004fce <_scanf_float+0x1c6>
 8004fbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fc0:	6022      	str	r2, [r4, #0]
 8004fc2:	f04f 0a01 	mov.w	sl, #1
 8004fc6:	e7e3      	b.n	8004f90 <_scanf_float+0x188>
 8004fc8:	f1ba 0f02 	cmp.w	sl, #2
 8004fcc:	d055      	beq.n	800507a <_scanf_float+0x272>
 8004fce:	2d01      	cmp	r5, #1
 8004fd0:	d002      	beq.n	8004fd8 <_scanf_float+0x1d0>
 8004fd2:	2d04      	cmp	r5, #4
 8004fd4:	f47f af48 	bne.w	8004e68 <_scanf_float+0x60>
 8004fd8:	3501      	adds	r5, #1
 8004fda:	b2ed      	uxtb	r5, r5
 8004fdc:	e7d8      	b.n	8004f90 <_scanf_float+0x188>
 8004fde:	f1ba 0f01 	cmp.w	sl, #1
 8004fe2:	f47f af41 	bne.w	8004e68 <_scanf_float+0x60>
 8004fe6:	f04f 0a02 	mov.w	sl, #2
 8004fea:	e7d1      	b.n	8004f90 <_scanf_float+0x188>
 8004fec:	b97d      	cbnz	r5, 800500e <_scanf_float+0x206>
 8004fee:	f1b9 0f00 	cmp.w	r9, #0
 8004ff2:	f47f af3c 	bne.w	8004e6e <_scanf_float+0x66>
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ffc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005000:	f47f af39 	bne.w	8004e76 <_scanf_float+0x6e>
 8005004:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005008:	6022      	str	r2, [r4, #0]
 800500a:	2501      	movs	r5, #1
 800500c:	e7c0      	b.n	8004f90 <_scanf_float+0x188>
 800500e:	2d03      	cmp	r5, #3
 8005010:	d0e2      	beq.n	8004fd8 <_scanf_float+0x1d0>
 8005012:	2d05      	cmp	r5, #5
 8005014:	e7de      	b.n	8004fd4 <_scanf_float+0x1cc>
 8005016:	2d02      	cmp	r5, #2
 8005018:	f47f af26 	bne.w	8004e68 <_scanf_float+0x60>
 800501c:	2503      	movs	r5, #3
 800501e:	e7b7      	b.n	8004f90 <_scanf_float+0x188>
 8005020:	2d06      	cmp	r5, #6
 8005022:	f47f af21 	bne.w	8004e68 <_scanf_float+0x60>
 8005026:	2507      	movs	r5, #7
 8005028:	e7b2      	b.n	8004f90 <_scanf_float+0x188>
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	0591      	lsls	r1, r2, #22
 800502e:	f57f af1b 	bpl.w	8004e68 <_scanf_float+0x60>
 8005032:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	f8cd 9004 	str.w	r9, [sp, #4]
 800503c:	e7a8      	b.n	8004f90 <_scanf_float+0x188>
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005044:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005048:	d006      	beq.n	8005058 <_scanf_float+0x250>
 800504a:	0550      	lsls	r0, r2, #21
 800504c:	f57f af0c 	bpl.w	8004e68 <_scanf_float+0x60>
 8005050:	f1b9 0f00 	cmp.w	r9, #0
 8005054:	f43f af0f 	beq.w	8004e76 <_scanf_float+0x6e>
 8005058:	0591      	lsls	r1, r2, #22
 800505a:	bf58      	it	pl
 800505c:	9901      	ldrpl	r1, [sp, #4]
 800505e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005062:	bf58      	it	pl
 8005064:	eba9 0101 	subpl.w	r1, r9, r1
 8005068:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800506c:	bf58      	it	pl
 800506e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	f04f 0900 	mov.w	r9, #0
 8005078:	e78a      	b.n	8004f90 <_scanf_float+0x188>
 800507a:	f04f 0a03 	mov.w	sl, #3
 800507e:	e787      	b.n	8004f90 <_scanf_float+0x188>
 8005080:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005084:	4639      	mov	r1, r7
 8005086:	4640      	mov	r0, r8
 8005088:	4798      	blx	r3
 800508a:	2800      	cmp	r0, #0
 800508c:	f43f aedf 	beq.w	8004e4e <_scanf_float+0x46>
 8005090:	e6ea      	b.n	8004e68 <_scanf_float+0x60>
 8005092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005096:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800509a:	463a      	mov	r2, r7
 800509c:	4640      	mov	r0, r8
 800509e:	4798      	blx	r3
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	e6ec      	b.n	8004e82 <_scanf_float+0x7a>
 80050a8:	1e6b      	subs	r3, r5, #1
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d825      	bhi.n	80050fa <_scanf_float+0x2f2>
 80050ae:	2d02      	cmp	r5, #2
 80050b0:	d836      	bhi.n	8005120 <_scanf_float+0x318>
 80050b2:	455e      	cmp	r6, fp
 80050b4:	f67f aee8 	bls.w	8004e88 <_scanf_float+0x80>
 80050b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050c0:	463a      	mov	r2, r7
 80050c2:	4640      	mov	r0, r8
 80050c4:	4798      	blx	r3
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	e7f1      	b.n	80050b2 <_scanf_float+0x2aa>
 80050ce:	9802      	ldr	r0, [sp, #8]
 80050d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80050d8:	9002      	str	r0, [sp, #8]
 80050da:	463a      	mov	r2, r7
 80050dc:	4640      	mov	r0, r8
 80050de:	4798      	blx	r3
 80050e0:	6923      	ldr	r3, [r4, #16]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	6123      	str	r3, [r4, #16]
 80050e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ea:	fa5f fa8a 	uxtb.w	sl, sl
 80050ee:	f1ba 0f02 	cmp.w	sl, #2
 80050f2:	d1ec      	bne.n	80050ce <_scanf_float+0x2c6>
 80050f4:	3d03      	subs	r5, #3
 80050f6:	b2ed      	uxtb	r5, r5
 80050f8:	1b76      	subs	r6, r6, r5
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	05da      	lsls	r2, r3, #23
 80050fe:	d52f      	bpl.n	8005160 <_scanf_float+0x358>
 8005100:	055b      	lsls	r3, r3, #21
 8005102:	d510      	bpl.n	8005126 <_scanf_float+0x31e>
 8005104:	455e      	cmp	r6, fp
 8005106:	f67f aebf 	bls.w	8004e88 <_scanf_float+0x80>
 800510a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800510e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005112:	463a      	mov	r2, r7
 8005114:	4640      	mov	r0, r8
 8005116:	4798      	blx	r3
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	3b01      	subs	r3, #1
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	e7f1      	b.n	8005104 <_scanf_float+0x2fc>
 8005120:	46aa      	mov	sl, r5
 8005122:	9602      	str	r6, [sp, #8]
 8005124:	e7df      	b.n	80050e6 <_scanf_float+0x2de>
 8005126:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	2965      	cmp	r1, #101	; 0x65
 800512e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005132:	f106 35ff 	add.w	r5, r6, #4294967295
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	d00c      	beq.n	8005154 <_scanf_float+0x34c>
 800513a:	2945      	cmp	r1, #69	; 0x45
 800513c:	d00a      	beq.n	8005154 <_scanf_float+0x34c>
 800513e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005142:	463a      	mov	r2, r7
 8005144:	4640      	mov	r0, r8
 8005146:	4798      	blx	r3
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800514e:	3b01      	subs	r3, #1
 8005150:	1eb5      	subs	r5, r6, #2
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005158:	463a      	mov	r2, r7
 800515a:	4640      	mov	r0, r8
 800515c:	4798      	blx	r3
 800515e:	462e      	mov	r6, r5
 8005160:	6825      	ldr	r5, [r4, #0]
 8005162:	f015 0510 	ands.w	r5, r5, #16
 8005166:	d159      	bne.n	800521c <_scanf_float+0x414>
 8005168:	7035      	strb	r5, [r6, #0]
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005174:	d11b      	bne.n	80051ae <_scanf_float+0x3a6>
 8005176:	9b01      	ldr	r3, [sp, #4]
 8005178:	454b      	cmp	r3, r9
 800517a:	eba3 0209 	sub.w	r2, r3, r9
 800517e:	d123      	bne.n	80051c8 <_scanf_float+0x3c0>
 8005180:	2200      	movs	r2, #0
 8005182:	4659      	mov	r1, fp
 8005184:	4640      	mov	r0, r8
 8005186:	f000 fead 	bl	8005ee4 <_strtod_r>
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	f012 0f02 	tst.w	r2, #2
 8005192:	ec57 6b10 	vmov	r6, r7, d0
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	d021      	beq.n	80051de <_scanf_float+0x3d6>
 800519a:	9903      	ldr	r1, [sp, #12]
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	600a      	str	r2, [r1, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	e9c3 6700 	strd	r6, r7, [r3]
 80051a6:	68e3      	ldr	r3, [r4, #12]
 80051a8:	3301      	adds	r3, #1
 80051aa:	60e3      	str	r3, [r4, #12]
 80051ac:	e66d      	b.n	8004e8a <_scanf_float+0x82>
 80051ae:	9b04      	ldr	r3, [sp, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0e5      	beq.n	8005180 <_scanf_float+0x378>
 80051b4:	9905      	ldr	r1, [sp, #20]
 80051b6:	230a      	movs	r3, #10
 80051b8:	462a      	mov	r2, r5
 80051ba:	3101      	adds	r1, #1
 80051bc:	4640      	mov	r0, r8
 80051be:	f000 ff19 	bl	8005ff4 <_strtol_r>
 80051c2:	9b04      	ldr	r3, [sp, #16]
 80051c4:	9e05      	ldr	r6, [sp, #20]
 80051c6:	1ac2      	subs	r2, r0, r3
 80051c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80051cc:	429e      	cmp	r6, r3
 80051ce:	bf28      	it	cs
 80051d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80051d4:	4912      	ldr	r1, [pc, #72]	; (8005220 <_scanf_float+0x418>)
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 f82c 	bl	8005234 <siprintf>
 80051dc:	e7d0      	b.n	8005180 <_scanf_float+0x378>
 80051de:	9903      	ldr	r1, [sp, #12]
 80051e0:	f012 0f04 	tst.w	r2, #4
 80051e4:	f103 0204 	add.w	r2, r3, #4
 80051e8:	600a      	str	r2, [r1, #0]
 80051ea:	d1d9      	bne.n	80051a0 <_scanf_float+0x398>
 80051ec:	f8d3 8000 	ldr.w	r8, [r3]
 80051f0:	ee10 2a10 	vmov	r2, s0
 80051f4:	ee10 0a10 	vmov	r0, s0
 80051f8:	463b      	mov	r3, r7
 80051fa:	4639      	mov	r1, r7
 80051fc:	f7fb fcb6 	bl	8000b6c <__aeabi_dcmpun>
 8005200:	b128      	cbz	r0, 800520e <_scanf_float+0x406>
 8005202:	4808      	ldr	r0, [pc, #32]	; (8005224 <_scanf_float+0x41c>)
 8005204:	f000 f810 	bl	8005228 <nanf>
 8005208:	ed88 0a00 	vstr	s0, [r8]
 800520c:	e7cb      	b.n	80051a6 <_scanf_float+0x39e>
 800520e:	4630      	mov	r0, r6
 8005210:	4639      	mov	r1, r7
 8005212:	f7fb fce1 	bl	8000bd8 <__aeabi_d2f>
 8005216:	f8c8 0000 	str.w	r0, [r8]
 800521a:	e7c4      	b.n	80051a6 <_scanf_float+0x39e>
 800521c:	2500      	movs	r5, #0
 800521e:	e634      	b.n	8004e8a <_scanf_float+0x82>
 8005220:	08008474 	.word	0x08008474
 8005224:	080088aa 	.word	0x080088aa

08005228 <nanf>:
 8005228:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005230 <nanf+0x8>
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	7fc00000 	.word	0x7fc00000

08005234 <siprintf>:
 8005234:	b40e      	push	{r1, r2, r3}
 8005236:	b500      	push	{lr}
 8005238:	b09c      	sub	sp, #112	; 0x70
 800523a:	ab1d      	add	r3, sp, #116	; 0x74
 800523c:	9002      	str	r0, [sp, #8]
 800523e:	9006      	str	r0, [sp, #24]
 8005240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005244:	4809      	ldr	r0, [pc, #36]	; (800526c <siprintf+0x38>)
 8005246:	9107      	str	r1, [sp, #28]
 8005248:	9104      	str	r1, [sp, #16]
 800524a:	4909      	ldr	r1, [pc, #36]	; (8005270 <siprintf+0x3c>)
 800524c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005250:	9105      	str	r1, [sp, #20]
 8005252:	6800      	ldr	r0, [r0, #0]
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	a902      	add	r1, sp, #8
 8005258:	f002 fb50 	bl	80078fc <_svfiprintf_r>
 800525c:	9b02      	ldr	r3, [sp, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	b01c      	add	sp, #112	; 0x70
 8005264:	f85d eb04 	ldr.w	lr, [sp], #4
 8005268:	b003      	add	sp, #12
 800526a:	4770      	bx	lr
 800526c:	20000014 	.word	0x20000014
 8005270:	ffff0208 	.word	0xffff0208

08005274 <strncmp>:
 8005274:	b510      	push	{r4, lr}
 8005276:	b17a      	cbz	r2, 8005298 <strncmp+0x24>
 8005278:	4603      	mov	r3, r0
 800527a:	3901      	subs	r1, #1
 800527c:	1884      	adds	r4, r0, r2
 800527e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005282:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005286:	4290      	cmp	r0, r2
 8005288:	d101      	bne.n	800528e <strncmp+0x1a>
 800528a:	42a3      	cmp	r3, r4
 800528c:	d101      	bne.n	8005292 <strncmp+0x1e>
 800528e:	1a80      	subs	r0, r0, r2
 8005290:	bd10      	pop	{r4, pc}
 8005292:	2800      	cmp	r0, #0
 8005294:	d1f3      	bne.n	800527e <strncmp+0xa>
 8005296:	e7fa      	b.n	800528e <strncmp+0x1a>
 8005298:	4610      	mov	r0, r2
 800529a:	e7f9      	b.n	8005290 <strncmp+0x1c>

0800529c <sulp>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	ec45 4b10 	vmov	d0, r4, r5
 80052a6:	4616      	mov	r6, r2
 80052a8:	f002 f886 	bl	80073b8 <__ulp>
 80052ac:	ec51 0b10 	vmov	r0, r1, d0
 80052b0:	b17e      	cbz	r6, 80052d2 <sulp+0x36>
 80052b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80052b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dd09      	ble.n	80052d2 <sulp+0x36>
 80052be:	051b      	lsls	r3, r3, #20
 80052c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80052c4:	2400      	movs	r4, #0
 80052c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	f7fb f9b3 	bl	8000638 <__aeabi_dmul>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	0000      	movs	r0, r0
	...

080052d8 <_strtod_l>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	ed2d 8b02 	vpush	{d8}
 80052e0:	b09d      	sub	sp, #116	; 0x74
 80052e2:	461f      	mov	r7, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	9318      	str	r3, [sp, #96]	; 0x60
 80052e8:	4ba2      	ldr	r3, [pc, #648]	; (8005574 <_strtod_l+0x29c>)
 80052ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	4604      	mov	r4, r0
 80052f2:	4618      	mov	r0, r3
 80052f4:	4688      	mov	r8, r1
 80052f6:	f7fa ff8b 	bl	8000210 <strlen>
 80052fa:	f04f 0a00 	mov.w	sl, #0
 80052fe:	4605      	mov	r5, r0
 8005300:	f04f 0b00 	mov.w	fp, #0
 8005304:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	2a2b      	cmp	r2, #43	; 0x2b
 800530e:	d04e      	beq.n	80053ae <_strtod_l+0xd6>
 8005310:	d83b      	bhi.n	800538a <_strtod_l+0xb2>
 8005312:	2a0d      	cmp	r2, #13
 8005314:	d834      	bhi.n	8005380 <_strtod_l+0xa8>
 8005316:	2a08      	cmp	r2, #8
 8005318:	d834      	bhi.n	8005384 <_strtod_l+0xac>
 800531a:	2a00      	cmp	r2, #0
 800531c:	d03e      	beq.n	800539c <_strtod_l+0xc4>
 800531e:	2300      	movs	r3, #0
 8005320:	930a      	str	r3, [sp, #40]	; 0x28
 8005322:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005324:	7833      	ldrb	r3, [r6, #0]
 8005326:	2b30      	cmp	r3, #48	; 0x30
 8005328:	f040 80b0 	bne.w	800548c <_strtod_l+0x1b4>
 800532c:	7873      	ldrb	r3, [r6, #1]
 800532e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005332:	2b58      	cmp	r3, #88	; 0x58
 8005334:	d168      	bne.n	8005408 <_strtod_l+0x130>
 8005336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	ab18      	add	r3, sp, #96	; 0x60
 800533c:	9702      	str	r7, [sp, #8]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	4a8d      	ldr	r2, [pc, #564]	; (8005578 <_strtod_l+0x2a0>)
 8005342:	ab19      	add	r3, sp, #100	; 0x64
 8005344:	a917      	add	r1, sp, #92	; 0x5c
 8005346:	4620      	mov	r0, r4
 8005348:	f001 f934 	bl	80065b4 <__gethex>
 800534c:	f010 0707 	ands.w	r7, r0, #7
 8005350:	4605      	mov	r5, r0
 8005352:	d005      	beq.n	8005360 <_strtod_l+0x88>
 8005354:	2f06      	cmp	r7, #6
 8005356:	d12c      	bne.n	80053b2 <_strtod_l+0xda>
 8005358:	3601      	adds	r6, #1
 800535a:	2300      	movs	r3, #0
 800535c:	9617      	str	r6, [sp, #92]	; 0x5c
 800535e:	930a      	str	r3, [sp, #40]	; 0x28
 8005360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 8590 	bne.w	8005e88 <_strtod_l+0xbb0>
 8005368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800536a:	b1eb      	cbz	r3, 80053a8 <_strtod_l+0xd0>
 800536c:	4652      	mov	r2, sl
 800536e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005372:	ec43 2b10 	vmov	d0, r2, r3
 8005376:	b01d      	add	sp, #116	; 0x74
 8005378:	ecbd 8b02 	vpop	{d8}
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	2a20      	cmp	r2, #32
 8005382:	d1cc      	bne.n	800531e <_strtod_l+0x46>
 8005384:	3301      	adds	r3, #1
 8005386:	9317      	str	r3, [sp, #92]	; 0x5c
 8005388:	e7be      	b.n	8005308 <_strtod_l+0x30>
 800538a:	2a2d      	cmp	r2, #45	; 0x2d
 800538c:	d1c7      	bne.n	800531e <_strtod_l+0x46>
 800538e:	2201      	movs	r2, #1
 8005390:	920a      	str	r2, [sp, #40]	; 0x28
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	9217      	str	r2, [sp, #92]	; 0x5c
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1c2      	bne.n	8005322 <_strtod_l+0x4a>
 800539c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800539e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f040 856e 	bne.w	8005e84 <_strtod_l+0xbac>
 80053a8:	4652      	mov	r2, sl
 80053aa:	465b      	mov	r3, fp
 80053ac:	e7e1      	b.n	8005372 <_strtod_l+0x9a>
 80053ae:	2200      	movs	r2, #0
 80053b0:	e7ee      	b.n	8005390 <_strtod_l+0xb8>
 80053b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80053b4:	b13a      	cbz	r2, 80053c6 <_strtod_l+0xee>
 80053b6:	2135      	movs	r1, #53	; 0x35
 80053b8:	a81a      	add	r0, sp, #104	; 0x68
 80053ba:	f002 f908 	bl	80075ce <__copybits>
 80053be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80053c0:	4620      	mov	r0, r4
 80053c2:	f001 fcc7 	bl	8006d54 <_Bfree>
 80053c6:	3f01      	subs	r7, #1
 80053c8:	2f04      	cmp	r7, #4
 80053ca:	d806      	bhi.n	80053da <_strtod_l+0x102>
 80053cc:	e8df f007 	tbb	[pc, r7]
 80053d0:	1714030a 	.word	0x1714030a
 80053d4:	0a          	.byte	0x0a
 80053d5:	00          	.byte	0x00
 80053d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80053da:	0728      	lsls	r0, r5, #28
 80053dc:	d5c0      	bpl.n	8005360 <_strtod_l+0x88>
 80053de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80053e2:	e7bd      	b.n	8005360 <_strtod_l+0x88>
 80053e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80053e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80053f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80053f6:	e7f0      	b.n	80053da <_strtod_l+0x102>
 80053f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800557c <_strtod_l+0x2a4>
 80053fc:	e7ed      	b.n	80053da <_strtod_l+0x102>
 80053fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005402:	f04f 3aff 	mov.w	sl, #4294967295
 8005406:	e7e8      	b.n	80053da <_strtod_l+0x102>
 8005408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	9217      	str	r2, [sp, #92]	; 0x5c
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	d0f9      	beq.n	8005408 <_strtod_l+0x130>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0a3      	beq.n	8005360 <_strtod_l+0x88>
 8005418:	2301      	movs	r3, #1
 800541a:	f04f 0900 	mov.w	r9, #0
 800541e:	9304      	str	r3, [sp, #16]
 8005420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005422:	9308      	str	r3, [sp, #32]
 8005424:	f8cd 901c 	str.w	r9, [sp, #28]
 8005428:	464f      	mov	r7, r9
 800542a:	220a      	movs	r2, #10
 800542c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800542e:	7806      	ldrb	r6, [r0, #0]
 8005430:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005434:	b2d9      	uxtb	r1, r3
 8005436:	2909      	cmp	r1, #9
 8005438:	d92a      	bls.n	8005490 <_strtod_l+0x1b8>
 800543a:	9905      	ldr	r1, [sp, #20]
 800543c:	462a      	mov	r2, r5
 800543e:	f7ff ff19 	bl	8005274 <strncmp>
 8005442:	b398      	cbz	r0, 80054ac <_strtod_l+0x1d4>
 8005444:	2000      	movs	r0, #0
 8005446:	4632      	mov	r2, r6
 8005448:	463d      	mov	r5, r7
 800544a:	9005      	str	r0, [sp, #20]
 800544c:	4603      	mov	r3, r0
 800544e:	2a65      	cmp	r2, #101	; 0x65
 8005450:	d001      	beq.n	8005456 <_strtod_l+0x17e>
 8005452:	2a45      	cmp	r2, #69	; 0x45
 8005454:	d118      	bne.n	8005488 <_strtod_l+0x1b0>
 8005456:	b91d      	cbnz	r5, 8005460 <_strtod_l+0x188>
 8005458:	9a04      	ldr	r2, [sp, #16]
 800545a:	4302      	orrs	r2, r0
 800545c:	d09e      	beq.n	800539c <_strtod_l+0xc4>
 800545e:	2500      	movs	r5, #0
 8005460:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005464:	f108 0201 	add.w	r2, r8, #1
 8005468:	9217      	str	r2, [sp, #92]	; 0x5c
 800546a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800546e:	2a2b      	cmp	r2, #43	; 0x2b
 8005470:	d075      	beq.n	800555e <_strtod_l+0x286>
 8005472:	2a2d      	cmp	r2, #45	; 0x2d
 8005474:	d07b      	beq.n	800556e <_strtod_l+0x296>
 8005476:	f04f 0c00 	mov.w	ip, #0
 800547a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800547e:	2909      	cmp	r1, #9
 8005480:	f240 8082 	bls.w	8005588 <_strtod_l+0x2b0>
 8005484:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005488:	2600      	movs	r6, #0
 800548a:	e09d      	b.n	80055c8 <_strtod_l+0x2f0>
 800548c:	2300      	movs	r3, #0
 800548e:	e7c4      	b.n	800541a <_strtod_l+0x142>
 8005490:	2f08      	cmp	r7, #8
 8005492:	bfd8      	it	le
 8005494:	9907      	ldrle	r1, [sp, #28]
 8005496:	f100 0001 	add.w	r0, r0, #1
 800549a:	bfda      	itte	le
 800549c:	fb02 3301 	mlale	r3, r2, r1, r3
 80054a0:	9307      	strle	r3, [sp, #28]
 80054a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80054a6:	3701      	adds	r7, #1
 80054a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80054aa:	e7bf      	b.n	800542c <_strtod_l+0x154>
 80054ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054ae:	195a      	adds	r2, r3, r5
 80054b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80054b2:	5d5a      	ldrb	r2, [r3, r5]
 80054b4:	2f00      	cmp	r7, #0
 80054b6:	d037      	beq.n	8005528 <_strtod_l+0x250>
 80054b8:	9005      	str	r0, [sp, #20]
 80054ba:	463d      	mov	r5, r7
 80054bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d912      	bls.n	80054ea <_strtod_l+0x212>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e7c2      	b.n	800544e <_strtod_l+0x176>
 80054c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80054ce:	785a      	ldrb	r2, [r3, #1]
 80054d0:	3001      	adds	r0, #1
 80054d2:	2a30      	cmp	r2, #48	; 0x30
 80054d4:	d0f8      	beq.n	80054c8 <_strtod_l+0x1f0>
 80054d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80054da:	2b08      	cmp	r3, #8
 80054dc:	f200 84d9 	bhi.w	8005e92 <_strtod_l+0xbba>
 80054e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054e2:	9005      	str	r0, [sp, #20]
 80054e4:	2000      	movs	r0, #0
 80054e6:	9308      	str	r3, [sp, #32]
 80054e8:	4605      	mov	r5, r0
 80054ea:	3a30      	subs	r2, #48	; 0x30
 80054ec:	f100 0301 	add.w	r3, r0, #1
 80054f0:	d014      	beq.n	800551c <_strtod_l+0x244>
 80054f2:	9905      	ldr	r1, [sp, #20]
 80054f4:	4419      	add	r1, r3
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	462b      	mov	r3, r5
 80054fa:	eb00 0e05 	add.w	lr, r0, r5
 80054fe:	210a      	movs	r1, #10
 8005500:	4573      	cmp	r3, lr
 8005502:	d113      	bne.n	800552c <_strtod_l+0x254>
 8005504:	182b      	adds	r3, r5, r0
 8005506:	2b08      	cmp	r3, #8
 8005508:	f105 0501 	add.w	r5, r5, #1
 800550c:	4405      	add	r5, r0
 800550e:	dc1c      	bgt.n	800554a <_strtod_l+0x272>
 8005510:	9907      	ldr	r1, [sp, #28]
 8005512:	230a      	movs	r3, #10
 8005514:	fb03 2301 	mla	r3, r3, r1, r2
 8005518:	9307      	str	r3, [sp, #28]
 800551a:	2300      	movs	r3, #0
 800551c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800551e:	1c51      	adds	r1, r2, #1
 8005520:	9117      	str	r1, [sp, #92]	; 0x5c
 8005522:	7852      	ldrb	r2, [r2, #1]
 8005524:	4618      	mov	r0, r3
 8005526:	e7c9      	b.n	80054bc <_strtod_l+0x1e4>
 8005528:	4638      	mov	r0, r7
 800552a:	e7d2      	b.n	80054d2 <_strtod_l+0x1fa>
 800552c:	2b08      	cmp	r3, #8
 800552e:	dc04      	bgt.n	800553a <_strtod_l+0x262>
 8005530:	9e07      	ldr	r6, [sp, #28]
 8005532:	434e      	muls	r6, r1
 8005534:	9607      	str	r6, [sp, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	e7e2      	b.n	8005500 <_strtod_l+0x228>
 800553a:	f103 0c01 	add.w	ip, r3, #1
 800553e:	f1bc 0f10 	cmp.w	ip, #16
 8005542:	bfd8      	it	le
 8005544:	fb01 f909 	mulle.w	r9, r1, r9
 8005548:	e7f5      	b.n	8005536 <_strtod_l+0x25e>
 800554a:	2d10      	cmp	r5, #16
 800554c:	bfdc      	itt	le
 800554e:	230a      	movle	r3, #10
 8005550:	fb03 2909 	mlale	r9, r3, r9, r2
 8005554:	e7e1      	b.n	800551a <_strtod_l+0x242>
 8005556:	2300      	movs	r3, #0
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	2301      	movs	r3, #1
 800555c:	e77c      	b.n	8005458 <_strtod_l+0x180>
 800555e:	f04f 0c00 	mov.w	ip, #0
 8005562:	f108 0202 	add.w	r2, r8, #2
 8005566:	9217      	str	r2, [sp, #92]	; 0x5c
 8005568:	f898 2002 	ldrb.w	r2, [r8, #2]
 800556c:	e785      	b.n	800547a <_strtod_l+0x1a2>
 800556e:	f04f 0c01 	mov.w	ip, #1
 8005572:	e7f6      	b.n	8005562 <_strtod_l+0x28a>
 8005574:	080086b4 	.word	0x080086b4
 8005578:	08008488 	.word	0x08008488
 800557c:	7ff00000 	.word	0x7ff00000
 8005580:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005582:	1c51      	adds	r1, r2, #1
 8005584:	9117      	str	r1, [sp, #92]	; 0x5c
 8005586:	7852      	ldrb	r2, [r2, #1]
 8005588:	2a30      	cmp	r2, #48	; 0x30
 800558a:	d0f9      	beq.n	8005580 <_strtod_l+0x2a8>
 800558c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005590:	2908      	cmp	r1, #8
 8005592:	f63f af79 	bhi.w	8005488 <_strtod_l+0x1b0>
 8005596:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800559a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800559c:	9206      	str	r2, [sp, #24]
 800559e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80055a0:	1c51      	adds	r1, r2, #1
 80055a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80055a4:	7852      	ldrb	r2, [r2, #1]
 80055a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80055aa:	2e09      	cmp	r6, #9
 80055ac:	d937      	bls.n	800561e <_strtod_l+0x346>
 80055ae:	9e06      	ldr	r6, [sp, #24]
 80055b0:	1b89      	subs	r1, r1, r6
 80055b2:	2908      	cmp	r1, #8
 80055b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80055b8:	dc02      	bgt.n	80055c0 <_strtod_l+0x2e8>
 80055ba:	4576      	cmp	r6, lr
 80055bc:	bfa8      	it	ge
 80055be:	4676      	movge	r6, lr
 80055c0:	f1bc 0f00 	cmp.w	ip, #0
 80055c4:	d000      	beq.n	80055c8 <_strtod_l+0x2f0>
 80055c6:	4276      	negs	r6, r6
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	d14d      	bne.n	8005668 <_strtod_l+0x390>
 80055cc:	9904      	ldr	r1, [sp, #16]
 80055ce:	4301      	orrs	r1, r0
 80055d0:	f47f aec6 	bne.w	8005360 <_strtod_l+0x88>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f47f aee1 	bne.w	800539c <_strtod_l+0xc4>
 80055da:	2a69      	cmp	r2, #105	; 0x69
 80055dc:	d027      	beq.n	800562e <_strtod_l+0x356>
 80055de:	dc24      	bgt.n	800562a <_strtod_l+0x352>
 80055e0:	2a49      	cmp	r2, #73	; 0x49
 80055e2:	d024      	beq.n	800562e <_strtod_l+0x356>
 80055e4:	2a4e      	cmp	r2, #78	; 0x4e
 80055e6:	f47f aed9 	bne.w	800539c <_strtod_l+0xc4>
 80055ea:	499f      	ldr	r1, [pc, #636]	; (8005868 <_strtod_l+0x590>)
 80055ec:	a817      	add	r0, sp, #92	; 0x5c
 80055ee:	f001 fa39 	bl	8006a64 <__match>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f43f aed2 	beq.w	800539c <_strtod_l+0xc4>
 80055f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b28      	cmp	r3, #40	; 0x28
 80055fe:	d12d      	bne.n	800565c <_strtod_l+0x384>
 8005600:	499a      	ldr	r1, [pc, #616]	; (800586c <_strtod_l+0x594>)
 8005602:	aa1a      	add	r2, sp, #104	; 0x68
 8005604:	a817      	add	r0, sp, #92	; 0x5c
 8005606:	f001 fa41 	bl	8006a8c <__hexnan>
 800560a:	2805      	cmp	r0, #5
 800560c:	d126      	bne.n	800565c <_strtod_l+0x384>
 800560e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005610:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005614:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005618:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800561c:	e6a0      	b.n	8005360 <_strtod_l+0x88>
 800561e:	210a      	movs	r1, #10
 8005620:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005624:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005628:	e7b9      	b.n	800559e <_strtod_l+0x2c6>
 800562a:	2a6e      	cmp	r2, #110	; 0x6e
 800562c:	e7db      	b.n	80055e6 <_strtod_l+0x30e>
 800562e:	4990      	ldr	r1, [pc, #576]	; (8005870 <_strtod_l+0x598>)
 8005630:	a817      	add	r0, sp, #92	; 0x5c
 8005632:	f001 fa17 	bl	8006a64 <__match>
 8005636:	2800      	cmp	r0, #0
 8005638:	f43f aeb0 	beq.w	800539c <_strtod_l+0xc4>
 800563c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800563e:	498d      	ldr	r1, [pc, #564]	; (8005874 <_strtod_l+0x59c>)
 8005640:	3b01      	subs	r3, #1
 8005642:	a817      	add	r0, sp, #92	; 0x5c
 8005644:	9317      	str	r3, [sp, #92]	; 0x5c
 8005646:	f001 fa0d 	bl	8006a64 <__match>
 800564a:	b910      	cbnz	r0, 8005652 <_strtod_l+0x37a>
 800564c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800564e:	3301      	adds	r3, #1
 8005650:	9317      	str	r3, [sp, #92]	; 0x5c
 8005652:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005884 <_strtod_l+0x5ac>
 8005656:	f04f 0a00 	mov.w	sl, #0
 800565a:	e681      	b.n	8005360 <_strtod_l+0x88>
 800565c:	4886      	ldr	r0, [pc, #536]	; (8005878 <_strtod_l+0x5a0>)
 800565e:	f002 fbe3 	bl	8007e28 <nan>
 8005662:	ec5b ab10 	vmov	sl, fp, d0
 8005666:	e67b      	b.n	8005360 <_strtod_l+0x88>
 8005668:	9b05      	ldr	r3, [sp, #20]
 800566a:	9807      	ldr	r0, [sp, #28]
 800566c:	1af3      	subs	r3, r6, r3
 800566e:	2f00      	cmp	r7, #0
 8005670:	bf08      	it	eq
 8005672:	462f      	moveq	r7, r5
 8005674:	2d10      	cmp	r5, #16
 8005676:	9306      	str	r3, [sp, #24]
 8005678:	46a8      	mov	r8, r5
 800567a:	bfa8      	it	ge
 800567c:	f04f 0810 	movge.w	r8, #16
 8005680:	f7fa ff60 	bl	8000544 <__aeabi_ui2d>
 8005684:	2d09      	cmp	r5, #9
 8005686:	4682      	mov	sl, r0
 8005688:	468b      	mov	fp, r1
 800568a:	dd13      	ble.n	80056b4 <_strtod_l+0x3dc>
 800568c:	4b7b      	ldr	r3, [pc, #492]	; (800587c <_strtod_l+0x5a4>)
 800568e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005692:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005696:	f7fa ffcf 	bl	8000638 <__aeabi_dmul>
 800569a:	4682      	mov	sl, r0
 800569c:	4648      	mov	r0, r9
 800569e:	468b      	mov	fp, r1
 80056a0:	f7fa ff50 	bl	8000544 <__aeabi_ui2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4650      	mov	r0, sl
 80056aa:	4659      	mov	r1, fp
 80056ac:	f7fa fe0e 	bl	80002cc <__adddf3>
 80056b0:	4682      	mov	sl, r0
 80056b2:	468b      	mov	fp, r1
 80056b4:	2d0f      	cmp	r5, #15
 80056b6:	dc38      	bgt.n	800572a <_strtod_l+0x452>
 80056b8:	9b06      	ldr	r3, [sp, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f43f ae50 	beq.w	8005360 <_strtod_l+0x88>
 80056c0:	dd24      	ble.n	800570c <_strtod_l+0x434>
 80056c2:	2b16      	cmp	r3, #22
 80056c4:	dc0b      	bgt.n	80056de <_strtod_l+0x406>
 80056c6:	496d      	ldr	r1, [pc, #436]	; (800587c <_strtod_l+0x5a4>)
 80056c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056d0:	4652      	mov	r2, sl
 80056d2:	465b      	mov	r3, fp
 80056d4:	f7fa ffb0 	bl	8000638 <__aeabi_dmul>
 80056d8:	4682      	mov	sl, r0
 80056da:	468b      	mov	fp, r1
 80056dc:	e640      	b.n	8005360 <_strtod_l+0x88>
 80056de:	9a06      	ldr	r2, [sp, #24]
 80056e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80056e4:	4293      	cmp	r3, r2
 80056e6:	db20      	blt.n	800572a <_strtod_l+0x452>
 80056e8:	4c64      	ldr	r4, [pc, #400]	; (800587c <_strtod_l+0x5a4>)
 80056ea:	f1c5 050f 	rsb	r5, r5, #15
 80056ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80056f2:	4652      	mov	r2, sl
 80056f4:	465b      	mov	r3, fp
 80056f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fa:	f7fa ff9d 	bl	8000638 <__aeabi_dmul>
 80056fe:	9b06      	ldr	r3, [sp, #24]
 8005700:	1b5d      	subs	r5, r3, r5
 8005702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800570a:	e7e3      	b.n	80056d4 <_strtod_l+0x3fc>
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	3316      	adds	r3, #22
 8005710:	db0b      	blt.n	800572a <_strtod_l+0x452>
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	1b9e      	subs	r6, r3, r6
 8005716:	4b59      	ldr	r3, [pc, #356]	; (800587c <_strtod_l+0x5a4>)
 8005718:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800571c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005720:	4650      	mov	r0, sl
 8005722:	4659      	mov	r1, fp
 8005724:	f7fb f8b2 	bl	800088c <__aeabi_ddiv>
 8005728:	e7d6      	b.n	80056d8 <_strtod_l+0x400>
 800572a:	9b06      	ldr	r3, [sp, #24]
 800572c:	eba5 0808 	sub.w	r8, r5, r8
 8005730:	4498      	add	r8, r3
 8005732:	f1b8 0f00 	cmp.w	r8, #0
 8005736:	dd74      	ble.n	8005822 <_strtod_l+0x54a>
 8005738:	f018 030f 	ands.w	r3, r8, #15
 800573c:	d00a      	beq.n	8005754 <_strtod_l+0x47c>
 800573e:	494f      	ldr	r1, [pc, #316]	; (800587c <_strtod_l+0x5a4>)
 8005740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005744:	4652      	mov	r2, sl
 8005746:	465b      	mov	r3, fp
 8005748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800574c:	f7fa ff74 	bl	8000638 <__aeabi_dmul>
 8005750:	4682      	mov	sl, r0
 8005752:	468b      	mov	fp, r1
 8005754:	f038 080f 	bics.w	r8, r8, #15
 8005758:	d04f      	beq.n	80057fa <_strtod_l+0x522>
 800575a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800575e:	dd22      	ble.n	80057a6 <_strtod_l+0x4ce>
 8005760:	2500      	movs	r5, #0
 8005762:	462e      	mov	r6, r5
 8005764:	9507      	str	r5, [sp, #28]
 8005766:	9505      	str	r5, [sp, #20]
 8005768:	2322      	movs	r3, #34	; 0x22
 800576a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005884 <_strtod_l+0x5ac>
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	f04f 0a00 	mov.w	sl, #0
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f43f adf2 	beq.w	8005360 <_strtod_l+0x88>
 800577c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800577e:	4620      	mov	r0, r4
 8005780:	f001 fae8 	bl	8006d54 <_Bfree>
 8005784:	9905      	ldr	r1, [sp, #20]
 8005786:	4620      	mov	r0, r4
 8005788:	f001 fae4 	bl	8006d54 <_Bfree>
 800578c:	4631      	mov	r1, r6
 800578e:	4620      	mov	r0, r4
 8005790:	f001 fae0 	bl	8006d54 <_Bfree>
 8005794:	9907      	ldr	r1, [sp, #28]
 8005796:	4620      	mov	r0, r4
 8005798:	f001 fadc 	bl	8006d54 <_Bfree>
 800579c:	4629      	mov	r1, r5
 800579e:	4620      	mov	r0, r4
 80057a0:	f001 fad8 	bl	8006d54 <_Bfree>
 80057a4:	e5dc      	b.n	8005360 <_strtod_l+0x88>
 80057a6:	4b36      	ldr	r3, [pc, #216]	; (8005880 <_strtod_l+0x5a8>)
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	2300      	movs	r3, #0
 80057ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80057b0:	4650      	mov	r0, sl
 80057b2:	4659      	mov	r1, fp
 80057b4:	4699      	mov	r9, r3
 80057b6:	f1b8 0f01 	cmp.w	r8, #1
 80057ba:	dc21      	bgt.n	8005800 <_strtod_l+0x528>
 80057bc:	b10b      	cbz	r3, 80057c2 <_strtod_l+0x4ea>
 80057be:	4682      	mov	sl, r0
 80057c0:	468b      	mov	fp, r1
 80057c2:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <_strtod_l+0x5a8>)
 80057c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80057c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80057cc:	4652      	mov	r2, sl
 80057ce:	465b      	mov	r3, fp
 80057d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80057d4:	f7fa ff30 	bl	8000638 <__aeabi_dmul>
 80057d8:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <_strtod_l+0x5ac>)
 80057da:	460a      	mov	r2, r1
 80057dc:	400b      	ands	r3, r1
 80057de:	492a      	ldr	r1, [pc, #168]	; (8005888 <_strtod_l+0x5b0>)
 80057e0:	428b      	cmp	r3, r1
 80057e2:	4682      	mov	sl, r0
 80057e4:	d8bc      	bhi.n	8005760 <_strtod_l+0x488>
 80057e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80057ea:	428b      	cmp	r3, r1
 80057ec:	bf86      	itte	hi
 80057ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800588c <_strtod_l+0x5b4>
 80057f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80057f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80057fa:	2300      	movs	r3, #0
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	e084      	b.n	800590a <_strtod_l+0x632>
 8005800:	f018 0f01 	tst.w	r8, #1
 8005804:	d005      	beq.n	8005812 <_strtod_l+0x53a>
 8005806:	9b04      	ldr	r3, [sp, #16]
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa ff14 	bl	8000638 <__aeabi_dmul>
 8005810:	2301      	movs	r3, #1
 8005812:	9a04      	ldr	r2, [sp, #16]
 8005814:	3208      	adds	r2, #8
 8005816:	f109 0901 	add.w	r9, r9, #1
 800581a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800581e:	9204      	str	r2, [sp, #16]
 8005820:	e7c9      	b.n	80057b6 <_strtod_l+0x4de>
 8005822:	d0ea      	beq.n	80057fa <_strtod_l+0x522>
 8005824:	f1c8 0800 	rsb	r8, r8, #0
 8005828:	f018 020f 	ands.w	r2, r8, #15
 800582c:	d00a      	beq.n	8005844 <_strtod_l+0x56c>
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <_strtod_l+0x5a4>)
 8005830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005834:	4650      	mov	r0, sl
 8005836:	4659      	mov	r1, fp
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f7fb f826 	bl	800088c <__aeabi_ddiv>
 8005840:	4682      	mov	sl, r0
 8005842:	468b      	mov	fp, r1
 8005844:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005848:	d0d7      	beq.n	80057fa <_strtod_l+0x522>
 800584a:	f1b8 0f1f 	cmp.w	r8, #31
 800584e:	dd1f      	ble.n	8005890 <_strtod_l+0x5b8>
 8005850:	2500      	movs	r5, #0
 8005852:	462e      	mov	r6, r5
 8005854:	9507      	str	r5, [sp, #28]
 8005856:	9505      	str	r5, [sp, #20]
 8005858:	2322      	movs	r3, #34	; 0x22
 800585a:	f04f 0a00 	mov.w	sl, #0
 800585e:	f04f 0b00 	mov.w	fp, #0
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	e786      	b.n	8005774 <_strtod_l+0x49c>
 8005866:	bf00      	nop
 8005868:	08008482 	.word	0x08008482
 800586c:	0800849c 	.word	0x0800849c
 8005870:	08008479 	.word	0x08008479
 8005874:	0800847c 	.word	0x0800847c
 8005878:	080088aa 	.word	0x080088aa
 800587c:	08008768 	.word	0x08008768
 8005880:	08008740 	.word	0x08008740
 8005884:	7ff00000 	.word	0x7ff00000
 8005888:	7ca00000 	.word	0x7ca00000
 800588c:	7fefffff 	.word	0x7fefffff
 8005890:	f018 0310 	ands.w	r3, r8, #16
 8005894:	bf18      	it	ne
 8005896:	236a      	movne	r3, #106	; 0x6a
 8005898:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005c48 <_strtod_l+0x970>
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	4650      	mov	r0, sl
 80058a0:	4659      	mov	r1, fp
 80058a2:	2300      	movs	r3, #0
 80058a4:	f018 0f01 	tst.w	r8, #1
 80058a8:	d004      	beq.n	80058b4 <_strtod_l+0x5dc>
 80058aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80058ae:	f7fa fec3 	bl	8000638 <__aeabi_dmul>
 80058b2:	2301      	movs	r3, #1
 80058b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80058b8:	f109 0908 	add.w	r9, r9, #8
 80058bc:	d1f2      	bne.n	80058a4 <_strtod_l+0x5cc>
 80058be:	b10b      	cbz	r3, 80058c4 <_strtod_l+0x5ec>
 80058c0:	4682      	mov	sl, r0
 80058c2:	468b      	mov	fp, r1
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	b1c3      	cbz	r3, 80058fa <_strtod_l+0x622>
 80058c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80058cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	4659      	mov	r1, fp
 80058d4:	dd11      	ble.n	80058fa <_strtod_l+0x622>
 80058d6:	2b1f      	cmp	r3, #31
 80058d8:	f340 8124 	ble.w	8005b24 <_strtod_l+0x84c>
 80058dc:	2b34      	cmp	r3, #52	; 0x34
 80058de:	bfde      	ittt	le
 80058e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80058e4:	f04f 33ff 	movle.w	r3, #4294967295
 80058e8:	fa03 f202 	lslle.w	r2, r3, r2
 80058ec:	f04f 0a00 	mov.w	sl, #0
 80058f0:	bfcc      	ite	gt
 80058f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80058f6:	ea02 0b01 	andle.w	fp, r2, r1
 80058fa:	2200      	movs	r2, #0
 80058fc:	2300      	movs	r3, #0
 80058fe:	4650      	mov	r0, sl
 8005900:	4659      	mov	r1, fp
 8005902:	f7fb f901 	bl	8000b08 <__aeabi_dcmpeq>
 8005906:	2800      	cmp	r0, #0
 8005908:	d1a2      	bne.n	8005850 <_strtod_l+0x578>
 800590a:	9b07      	ldr	r3, [sp, #28]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	9908      	ldr	r1, [sp, #32]
 8005910:	462b      	mov	r3, r5
 8005912:	463a      	mov	r2, r7
 8005914:	4620      	mov	r0, r4
 8005916:	f001 fa85 	bl	8006e24 <__s2b>
 800591a:	9007      	str	r0, [sp, #28]
 800591c:	2800      	cmp	r0, #0
 800591e:	f43f af1f 	beq.w	8005760 <_strtod_l+0x488>
 8005922:	9b05      	ldr	r3, [sp, #20]
 8005924:	1b9e      	subs	r6, r3, r6
 8005926:	9b06      	ldr	r3, [sp, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	bfb4      	ite	lt
 800592c:	4633      	movlt	r3, r6
 800592e:	2300      	movge	r3, #0
 8005930:	930c      	str	r3, [sp, #48]	; 0x30
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	2500      	movs	r5, #0
 8005936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800593a:	9312      	str	r3, [sp, #72]	; 0x48
 800593c:	462e      	mov	r6, r5
 800593e:	9b07      	ldr	r3, [sp, #28]
 8005940:	4620      	mov	r0, r4
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	f001 f9c6 	bl	8006cd4 <_Balloc>
 8005948:	9005      	str	r0, [sp, #20]
 800594a:	2800      	cmp	r0, #0
 800594c:	f43f af0c 	beq.w	8005768 <_strtod_l+0x490>
 8005950:	9b07      	ldr	r3, [sp, #28]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	3202      	adds	r2, #2
 8005956:	f103 010c 	add.w	r1, r3, #12
 800595a:	0092      	lsls	r2, r2, #2
 800595c:	300c      	adds	r0, #12
 800595e:	f001 f9ab 	bl	8006cb8 <memcpy>
 8005962:	ec4b ab10 	vmov	d0, sl, fp
 8005966:	aa1a      	add	r2, sp, #104	; 0x68
 8005968:	a919      	add	r1, sp, #100	; 0x64
 800596a:	4620      	mov	r0, r4
 800596c:	f001 fda0 	bl	80074b0 <__d2b>
 8005970:	ec4b ab18 	vmov	d8, sl, fp
 8005974:	9018      	str	r0, [sp, #96]	; 0x60
 8005976:	2800      	cmp	r0, #0
 8005978:	f43f aef6 	beq.w	8005768 <_strtod_l+0x490>
 800597c:	2101      	movs	r1, #1
 800597e:	4620      	mov	r0, r4
 8005980:	f001 faea 	bl	8006f58 <__i2b>
 8005984:	4606      	mov	r6, r0
 8005986:	2800      	cmp	r0, #0
 8005988:	f43f aeee 	beq.w	8005768 <_strtod_l+0x490>
 800598c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800598e:	9904      	ldr	r1, [sp, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfab      	itete	ge
 8005994:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005996:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005998:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800599a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800599e:	bfac      	ite	ge
 80059a0:	eb03 0902 	addge.w	r9, r3, r2
 80059a4:	1ad7      	sublt	r7, r2, r3
 80059a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80059a8:	eba3 0801 	sub.w	r8, r3, r1
 80059ac:	4490      	add	r8, r2
 80059ae:	4ba1      	ldr	r3, [pc, #644]	; (8005c34 <_strtod_l+0x95c>)
 80059b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80059b4:	4598      	cmp	r8, r3
 80059b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80059ba:	f280 80c7 	bge.w	8005b4c <_strtod_l+0x874>
 80059be:	eba3 0308 	sub.w	r3, r3, r8
 80059c2:	2b1f      	cmp	r3, #31
 80059c4:	eba2 0203 	sub.w	r2, r2, r3
 80059c8:	f04f 0101 	mov.w	r1, #1
 80059cc:	f300 80b1 	bgt.w	8005b32 <_strtod_l+0x85a>
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	930d      	str	r3, [sp, #52]	; 0x34
 80059d6:	2300      	movs	r3, #0
 80059d8:	9308      	str	r3, [sp, #32]
 80059da:	eb09 0802 	add.w	r8, r9, r2
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	45c1      	cmp	r9, r8
 80059e2:	4417      	add	r7, r2
 80059e4:	441f      	add	r7, r3
 80059e6:	464b      	mov	r3, r9
 80059e8:	bfa8      	it	ge
 80059ea:	4643      	movge	r3, r8
 80059ec:	42bb      	cmp	r3, r7
 80059ee:	bfa8      	it	ge
 80059f0:	463b      	movge	r3, r7
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfc2      	ittt	gt
 80059f6:	eba8 0803 	subgt.w	r8, r8, r3
 80059fa:	1aff      	subgt	r7, r7, r3
 80059fc:	eba9 0903 	subgt.w	r9, r9, r3
 8005a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dd17      	ble.n	8005a36 <_strtod_l+0x75e>
 8005a06:	4631      	mov	r1, r6
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f001 fb64 	bl	80070d8 <__pow5mult>
 8005a10:	4606      	mov	r6, r0
 8005a12:	2800      	cmp	r0, #0
 8005a14:	f43f aea8 	beq.w	8005768 <_strtod_l+0x490>
 8005a18:	4601      	mov	r1, r0
 8005a1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f001 fab1 	bl	8006f84 <__multiply>
 8005a22:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f43f ae9f 	beq.w	8005768 <_strtod_l+0x490>
 8005a2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f001 f991 	bl	8006d54 <_Bfree>
 8005a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a34:	9318      	str	r3, [sp, #96]	; 0x60
 8005a36:	f1b8 0f00 	cmp.w	r8, #0
 8005a3a:	f300 808c 	bgt.w	8005b56 <_strtod_l+0x87e>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dd08      	ble.n	8005a56 <_strtod_l+0x77e>
 8005a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a46:	9905      	ldr	r1, [sp, #20]
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f001 fb45 	bl	80070d8 <__pow5mult>
 8005a4e:	9005      	str	r0, [sp, #20]
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f43f ae89 	beq.w	8005768 <_strtod_l+0x490>
 8005a56:	2f00      	cmp	r7, #0
 8005a58:	dd08      	ble.n	8005a6c <_strtod_l+0x794>
 8005a5a:	9905      	ldr	r1, [sp, #20]
 8005a5c:	463a      	mov	r2, r7
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f001 fb94 	bl	800718c <__lshift>
 8005a64:	9005      	str	r0, [sp, #20]
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f43f ae7e 	beq.w	8005768 <_strtod_l+0x490>
 8005a6c:	f1b9 0f00 	cmp.w	r9, #0
 8005a70:	dd08      	ble.n	8005a84 <_strtod_l+0x7ac>
 8005a72:	4631      	mov	r1, r6
 8005a74:	464a      	mov	r2, r9
 8005a76:	4620      	mov	r0, r4
 8005a78:	f001 fb88 	bl	800718c <__lshift>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f43f ae72 	beq.w	8005768 <_strtod_l+0x490>
 8005a84:	9a05      	ldr	r2, [sp, #20]
 8005a86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f001 fc0b 	bl	80072a4 <__mdiff>
 8005a8e:	4605      	mov	r5, r0
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f43f ae69 	beq.w	8005768 <_strtod_l+0x490>
 8005a96:	68c3      	ldr	r3, [r0, #12]
 8005a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60c3      	str	r3, [r0, #12]
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	f001 fbe4 	bl	800726c <__mcmp>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	da60      	bge.n	8005b6a <_strtod_l+0x892>
 8005aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aaa:	ea53 030a 	orrs.w	r3, r3, sl
 8005aae:	f040 8082 	bne.w	8005bb6 <_strtod_l+0x8de>
 8005ab2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d17d      	bne.n	8005bb6 <_strtod_l+0x8de>
 8005aba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005abe:	0d1b      	lsrs	r3, r3, #20
 8005ac0:	051b      	lsls	r3, r3, #20
 8005ac2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ac6:	d976      	bls.n	8005bb6 <_strtod_l+0x8de>
 8005ac8:	696b      	ldr	r3, [r5, #20]
 8005aca:	b913      	cbnz	r3, 8005ad2 <_strtod_l+0x7fa>
 8005acc:	692b      	ldr	r3, [r5, #16]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	dd71      	ble.n	8005bb6 <_strtod_l+0x8de>
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f001 fb58 	bl	800718c <__lshift>
 8005adc:	4631      	mov	r1, r6
 8005ade:	4605      	mov	r5, r0
 8005ae0:	f001 fbc4 	bl	800726c <__mcmp>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	dd66      	ble.n	8005bb6 <_strtod_l+0x8de>
 8005ae8:	9904      	ldr	r1, [sp, #16]
 8005aea:	4a53      	ldr	r2, [pc, #332]	; (8005c38 <_strtod_l+0x960>)
 8005aec:	465b      	mov	r3, fp
 8005aee:	2900      	cmp	r1, #0
 8005af0:	f000 8081 	beq.w	8005bf6 <_strtod_l+0x91e>
 8005af4:	ea02 010b 	and.w	r1, r2, fp
 8005af8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005afc:	dc7b      	bgt.n	8005bf6 <_strtod_l+0x91e>
 8005afe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005b02:	f77f aea9 	ble.w	8005858 <_strtod_l+0x580>
 8005b06:	4b4d      	ldr	r3, [pc, #308]	; (8005c3c <_strtod_l+0x964>)
 8005b08:	4650      	mov	r0, sl
 8005b0a:	4659      	mov	r1, fp
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f7fa fd93 	bl	8000638 <__aeabi_dmul>
 8005b12:	460b      	mov	r3, r1
 8005b14:	4303      	orrs	r3, r0
 8005b16:	bf08      	it	eq
 8005b18:	2322      	moveq	r3, #34	; 0x22
 8005b1a:	4682      	mov	sl, r0
 8005b1c:	468b      	mov	fp, r1
 8005b1e:	bf08      	it	eq
 8005b20:	6023      	streq	r3, [r4, #0]
 8005b22:	e62b      	b.n	800577c <_strtod_l+0x4a4>
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	ea03 0a0a 	and.w	sl, r3, sl
 8005b30:	e6e3      	b.n	80058fa <_strtod_l+0x622>
 8005b32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005b36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005b3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005b3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005b42:	fa01 f308 	lsl.w	r3, r1, r8
 8005b46:	9308      	str	r3, [sp, #32]
 8005b48:	910d      	str	r1, [sp, #52]	; 0x34
 8005b4a:	e746      	b.n	80059da <_strtod_l+0x702>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9308      	str	r3, [sp, #32]
 8005b50:	2301      	movs	r3, #1
 8005b52:	930d      	str	r3, [sp, #52]	; 0x34
 8005b54:	e741      	b.n	80059da <_strtod_l+0x702>
 8005b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b58:	4642      	mov	r2, r8
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f001 fb16 	bl	800718c <__lshift>
 8005b60:	9018      	str	r0, [sp, #96]	; 0x60
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f47f af6b 	bne.w	8005a3e <_strtod_l+0x766>
 8005b68:	e5fe      	b.n	8005768 <_strtod_l+0x490>
 8005b6a:	465f      	mov	r7, fp
 8005b6c:	d16e      	bne.n	8005c4c <_strtod_l+0x974>
 8005b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b74:	b342      	cbz	r2, 8005bc8 <_strtod_l+0x8f0>
 8005b76:	4a32      	ldr	r2, [pc, #200]	; (8005c40 <_strtod_l+0x968>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d128      	bne.n	8005bce <_strtod_l+0x8f6>
 8005b7c:	9b04      	ldr	r3, [sp, #16]
 8005b7e:	4651      	mov	r1, sl
 8005b80:	b1eb      	cbz	r3, 8005bbe <_strtod_l+0x8e6>
 8005b82:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <_strtod_l+0x960>)
 8005b84:	403b      	ands	r3, r7
 8005b86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	d819      	bhi.n	8005bc4 <_strtod_l+0x8ec>
 8005b90:	0d1b      	lsrs	r3, r3, #20
 8005b92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	d117      	bne.n	8005bce <_strtod_l+0x8f6>
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <_strtod_l+0x96c>)
 8005ba0:	429f      	cmp	r7, r3
 8005ba2:	d102      	bne.n	8005baa <_strtod_l+0x8d2>
 8005ba4:	3101      	adds	r1, #1
 8005ba6:	f43f addf 	beq.w	8005768 <_strtod_l+0x490>
 8005baa:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <_strtod_l+0x960>)
 8005bac:	403b      	ands	r3, r7
 8005bae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005bb2:	f04f 0a00 	mov.w	sl, #0
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1a4      	bne.n	8005b06 <_strtod_l+0x82e>
 8005bbc:	e5de      	b.n	800577c <_strtod_l+0x4a4>
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	e7ea      	b.n	8005b9a <_strtod_l+0x8c2>
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	e7e8      	b.n	8005b9a <_strtod_l+0x8c2>
 8005bc8:	ea53 030a 	orrs.w	r3, r3, sl
 8005bcc:	d08c      	beq.n	8005ae8 <_strtod_l+0x810>
 8005bce:	9b08      	ldr	r3, [sp, #32]
 8005bd0:	b1db      	cbz	r3, 8005c0a <_strtod_l+0x932>
 8005bd2:	423b      	tst	r3, r7
 8005bd4:	d0ef      	beq.n	8005bb6 <_strtod_l+0x8de>
 8005bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd8:	9a04      	ldr	r2, [sp, #16]
 8005bda:	4650      	mov	r0, sl
 8005bdc:	4659      	mov	r1, fp
 8005bde:	b1c3      	cbz	r3, 8005c12 <_strtod_l+0x93a>
 8005be0:	f7ff fb5c 	bl	800529c <sulp>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	ec51 0b18 	vmov	r0, r1, d8
 8005bec:	f7fa fb6e 	bl	80002cc <__adddf3>
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	468b      	mov	fp, r1
 8005bf4:	e7df      	b.n	8005bb6 <_strtod_l+0x8de>
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005bfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c04:	f04f 3aff 	mov.w	sl, #4294967295
 8005c08:	e7d5      	b.n	8005bb6 <_strtod_l+0x8de>
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0c:	ea13 0f0a 	tst.w	r3, sl
 8005c10:	e7e0      	b.n	8005bd4 <_strtod_l+0x8fc>
 8005c12:	f7ff fb43 	bl	800529c <sulp>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	ec51 0b18 	vmov	r0, r1, d8
 8005c1e:	f7fa fb53 	bl	80002c8 <__aeabi_dsub>
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	4682      	mov	sl, r0
 8005c28:	468b      	mov	fp, r1
 8005c2a:	f7fa ff6d 	bl	8000b08 <__aeabi_dcmpeq>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d0c1      	beq.n	8005bb6 <_strtod_l+0x8de>
 8005c32:	e611      	b.n	8005858 <_strtod_l+0x580>
 8005c34:	fffffc02 	.word	0xfffffc02
 8005c38:	7ff00000 	.word	0x7ff00000
 8005c3c:	39500000 	.word	0x39500000
 8005c40:	000fffff 	.word	0x000fffff
 8005c44:	7fefffff 	.word	0x7fefffff
 8005c48:	080084b0 	.word	0x080084b0
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f001 fc8a 	bl	8007568 <__ratio>
 8005c54:	ec59 8b10 	vmov	r8, r9, d0
 8005c58:	ee10 0a10 	vmov	r0, s0
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa ff64 	bl	8000b30 <__aeabi_dcmple>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d07a      	beq.n	8005d62 <_strtod_l+0xa8a>
 8005c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d04a      	beq.n	8005d08 <_strtod_l+0xa30>
 8005c72:	4b95      	ldr	r3, [pc, #596]	; (8005ec8 <_strtod_l+0xbf0>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005ec8 <_strtod_l+0xbf0>
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	4b92      	ldr	r3, [pc, #584]	; (8005ecc <_strtod_l+0xbf4>)
 8005c84:	403b      	ands	r3, r7
 8005c86:	930d      	str	r3, [sp, #52]	; 0x34
 8005c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c8a:	4b91      	ldr	r3, [pc, #580]	; (8005ed0 <_strtod_l+0xbf8>)
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	f040 80b0 	bne.w	8005df2 <_strtod_l+0xb1a>
 8005c92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005c9a:	ec4b ab10 	vmov	d0, sl, fp
 8005c9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ca2:	f001 fb89 	bl	80073b8 <__ulp>
 8005ca6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005caa:	ec53 2b10 	vmov	r2, r3, d0
 8005cae:	f7fa fcc3 	bl	8000638 <__aeabi_dmul>
 8005cb2:	4652      	mov	r2, sl
 8005cb4:	465b      	mov	r3, fp
 8005cb6:	f7fa fb09 	bl	80002cc <__adddf3>
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4983      	ldr	r1, [pc, #524]	; (8005ecc <_strtod_l+0xbf4>)
 8005cbe:	4a85      	ldr	r2, [pc, #532]	; (8005ed4 <_strtod_l+0xbfc>)
 8005cc0:	4019      	ands	r1, r3
 8005cc2:	4291      	cmp	r1, r2
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	d960      	bls.n	8005d8a <_strtod_l+0xab2>
 8005cc8:	ee18 3a90 	vmov	r3, s17
 8005ccc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d104      	bne.n	8005cde <_strtod_l+0xa06>
 8005cd4:	ee18 3a10 	vmov	r3, s16
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f43f ad45 	beq.w	8005768 <_strtod_l+0x490>
 8005cde:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005ee0 <_strtod_l+0xc08>
 8005ce2:	f04f 3aff 	mov.w	sl, #4294967295
 8005ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f001 f833 	bl	8006d54 <_Bfree>
 8005cee:	9905      	ldr	r1, [sp, #20]
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f001 f82f 	bl	8006d54 <_Bfree>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f001 f82b 	bl	8006d54 <_Bfree>
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4620      	mov	r0, r4
 8005d02:	f001 f827 	bl	8006d54 <_Bfree>
 8005d06:	e61a      	b.n	800593e <_strtod_l+0x666>
 8005d08:	f1ba 0f00 	cmp.w	sl, #0
 8005d0c:	d11b      	bne.n	8005d46 <_strtod_l+0xa6e>
 8005d0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d12:	b9f3      	cbnz	r3, 8005d52 <_strtod_l+0xa7a>
 8005d14:	4b6c      	ldr	r3, [pc, #432]	; (8005ec8 <_strtod_l+0xbf0>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa fefe 	bl	8000b1c <__aeabi_dcmplt>
 8005d20:	b9d0      	cbnz	r0, 8005d58 <_strtod_l+0xa80>
 8005d22:	4640      	mov	r0, r8
 8005d24:	4649      	mov	r1, r9
 8005d26:	4b6c      	ldr	r3, [pc, #432]	; (8005ed8 <_strtod_l+0xc00>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f7fa fc85 	bl	8000638 <__aeabi_dmul>
 8005d2e:	4680      	mov	r8, r0
 8005d30:	4689      	mov	r9, r1
 8005d32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005d3a:	9315      	str	r3, [sp, #84]	; 0x54
 8005d3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005d40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d44:	e79d      	b.n	8005c82 <_strtod_l+0x9aa>
 8005d46:	f1ba 0f01 	cmp.w	sl, #1
 8005d4a:	d102      	bne.n	8005d52 <_strtod_l+0xa7a>
 8005d4c:	2f00      	cmp	r7, #0
 8005d4e:	f43f ad83 	beq.w	8005858 <_strtod_l+0x580>
 8005d52:	4b62      	ldr	r3, [pc, #392]	; (8005edc <_strtod_l+0xc04>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	e78e      	b.n	8005c76 <_strtod_l+0x99e>
 8005d58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005ed8 <_strtod_l+0xc00>
 8005d5c:	f04f 0800 	mov.w	r8, #0
 8005d60:	e7e7      	b.n	8005d32 <_strtod_l+0xa5a>
 8005d62:	4b5d      	ldr	r3, [pc, #372]	; (8005ed8 <_strtod_l+0xc00>)
 8005d64:	4640      	mov	r0, r8
 8005d66:	4649      	mov	r1, r9
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f7fa fc65 	bl	8000638 <__aeabi_dmul>
 8005d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	b933      	cbnz	r3, 8005d84 <_strtod_l+0xaac>
 8005d76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d7a:	900e      	str	r0, [sp, #56]	; 0x38
 8005d7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d82:	e7dd      	b.n	8005d40 <_strtod_l+0xa68>
 8005d84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005d88:	e7f9      	b.n	8005d7e <_strtod_l+0xaa6>
 8005d8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1a8      	bne.n	8005ce6 <_strtod_l+0xa0e>
 8005d94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d9a:	0d1b      	lsrs	r3, r3, #20
 8005d9c:	051b      	lsls	r3, r3, #20
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d1a1      	bne.n	8005ce6 <_strtod_l+0xa0e>
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa ff7f 	bl	8000ca8 <__aeabi_d2lz>
 8005daa:	f7fa fc17 	bl	80005dc <__aeabi_l2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa fa87 	bl	80002c8 <__aeabi_dsub>
 8005dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dc0:	ea43 030a 	orr.w	r3, r3, sl
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	4689      	mov	r9, r1
 8005dca:	d055      	beq.n	8005e78 <_strtod_l+0xba0>
 8005dcc:	a336      	add	r3, pc, #216	; (adr r3, 8005ea8 <_strtod_l+0xbd0>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fea3 	bl	8000b1c <__aeabi_dcmplt>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f47f acd0 	bne.w	800577c <_strtod_l+0x4a4>
 8005ddc:	a334      	add	r3, pc, #208	; (adr r3, 8005eb0 <_strtod_l+0xbd8>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	4640      	mov	r0, r8
 8005de4:	4649      	mov	r1, r9
 8005de6:	f7fa feb7 	bl	8000b58 <__aeabi_dcmpgt>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	f43f af7b 	beq.w	8005ce6 <_strtod_l+0xa0e>
 8005df0:	e4c4      	b.n	800577c <_strtod_l+0x4a4>
 8005df2:	9b04      	ldr	r3, [sp, #16]
 8005df4:	b333      	cbz	r3, 8005e44 <_strtod_l+0xb6c>
 8005df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005dfc:	d822      	bhi.n	8005e44 <_strtod_l+0xb6c>
 8005dfe:	a32e      	add	r3, pc, #184	; (adr r3, 8005eb8 <_strtod_l+0xbe0>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	4640      	mov	r0, r8
 8005e06:	4649      	mov	r1, r9
 8005e08:	f7fa fe92 	bl	8000b30 <__aeabi_dcmple>
 8005e0c:	b1a0      	cbz	r0, 8005e38 <_strtod_l+0xb60>
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	f7fa fec1 	bl	8000b98 <__aeabi_d2uiz>
 8005e16:	2801      	cmp	r0, #1
 8005e18:	bf38      	it	cc
 8005e1a:	2001      	movcc	r0, #1
 8005e1c:	f7fa fb92 	bl	8000544 <__aeabi_ui2d>
 8005e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e22:	4680      	mov	r8, r0
 8005e24:	4689      	mov	r9, r1
 8005e26:	bb23      	cbnz	r3, 8005e72 <_strtod_l+0xb9a>
 8005e28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e2c:	9010      	str	r0, [sp, #64]	; 0x40
 8005e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8005e30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	9309      	str	r3, [sp, #36]	; 0x24
 8005e44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e48:	eeb0 0a48 	vmov.f32	s0, s16
 8005e4c:	eef0 0a68 	vmov.f32	s1, s17
 8005e50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e54:	f001 fab0 	bl	80073b8 <__ulp>
 8005e58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e5c:	ec53 2b10 	vmov	r2, r3, d0
 8005e60:	f7fa fbea 	bl	8000638 <__aeabi_dmul>
 8005e64:	ec53 2b18 	vmov	r2, r3, d8
 8005e68:	f7fa fa30 	bl	80002cc <__adddf3>
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	468b      	mov	fp, r1
 8005e70:	e78d      	b.n	8005d8e <_strtod_l+0xab6>
 8005e72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005e76:	e7db      	b.n	8005e30 <_strtod_l+0xb58>
 8005e78:	a311      	add	r3, pc, #68	; (adr r3, 8005ec0 <_strtod_l+0xbe8>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fe4d 	bl	8000b1c <__aeabi_dcmplt>
 8005e82:	e7b2      	b.n	8005dea <_strtod_l+0xb12>
 8005e84:	2300      	movs	r3, #0
 8005e86:	930a      	str	r3, [sp, #40]	; 0x28
 8005e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	f7ff ba6b 	b.w	8005368 <_strtod_l+0x90>
 8005e92:	2a65      	cmp	r2, #101	; 0x65
 8005e94:	f43f ab5f 	beq.w	8005556 <_strtod_l+0x27e>
 8005e98:	2a45      	cmp	r2, #69	; 0x45
 8005e9a:	f43f ab5c 	beq.w	8005556 <_strtod_l+0x27e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f7ff bb94 	b.w	80055cc <_strtod_l+0x2f4>
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	94a03595 	.word	0x94a03595
 8005eac:	3fdfffff 	.word	0x3fdfffff
 8005eb0:	35afe535 	.word	0x35afe535
 8005eb4:	3fe00000 	.word	0x3fe00000
 8005eb8:	ffc00000 	.word	0xffc00000
 8005ebc:	41dfffff 	.word	0x41dfffff
 8005ec0:	94a03595 	.word	0x94a03595
 8005ec4:	3fcfffff 	.word	0x3fcfffff
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	7ff00000 	.word	0x7ff00000
 8005ed0:	7fe00000 	.word	0x7fe00000
 8005ed4:	7c9fffff 	.word	0x7c9fffff
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	bff00000 	.word	0xbff00000
 8005ee0:	7fefffff 	.word	0x7fefffff

08005ee4 <_strtod_r>:
 8005ee4:	4b01      	ldr	r3, [pc, #4]	; (8005eec <_strtod_r+0x8>)
 8005ee6:	f7ff b9f7 	b.w	80052d8 <_strtod_l>
 8005eea:	bf00      	nop
 8005eec:	2000007c 	.word	0x2000007c

08005ef0 <_strtol_l.constprop.0>:
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef6:	d001      	beq.n	8005efc <_strtol_l.constprop.0+0xc>
 8005ef8:	2b24      	cmp	r3, #36	; 0x24
 8005efa:	d906      	bls.n	8005f0a <_strtol_l.constprop.0+0x1a>
 8005efc:	f7fe ff52 	bl	8004da4 <__errno>
 8005f00:	2316      	movs	r3, #22
 8005f02:	6003      	str	r3, [r0, #0]
 8005f04:	2000      	movs	r0, #0
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005ff0 <_strtol_l.constprop.0+0x100>
 8005f0e:	460d      	mov	r5, r1
 8005f10:	462e      	mov	r6, r5
 8005f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005f1a:	f017 0708 	ands.w	r7, r7, #8
 8005f1e:	d1f7      	bne.n	8005f10 <_strtol_l.constprop.0+0x20>
 8005f20:	2c2d      	cmp	r4, #45	; 0x2d
 8005f22:	d132      	bne.n	8005f8a <_strtol_l.constprop.0+0x9a>
 8005f24:	782c      	ldrb	r4, [r5, #0]
 8005f26:	2701      	movs	r7, #1
 8005f28:	1cb5      	adds	r5, r6, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d05b      	beq.n	8005fe6 <_strtol_l.constprop.0+0xf6>
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d109      	bne.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005f32:	2c30      	cmp	r4, #48	; 0x30
 8005f34:	d107      	bne.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005f36:	782c      	ldrb	r4, [r5, #0]
 8005f38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f3c:	2c58      	cmp	r4, #88	; 0x58
 8005f3e:	d14d      	bne.n	8005fdc <_strtol_l.constprop.0+0xec>
 8005f40:	786c      	ldrb	r4, [r5, #1]
 8005f42:	2310      	movs	r3, #16
 8005f44:	3502      	adds	r5, #2
 8005f46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f4e:	f04f 0c00 	mov.w	ip, #0
 8005f52:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f56:	4666      	mov	r6, ip
 8005f58:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005f60:	f1be 0f09 	cmp.w	lr, #9
 8005f64:	d816      	bhi.n	8005f94 <_strtol_l.constprop.0+0xa4>
 8005f66:	4674      	mov	r4, lr
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	dd24      	ble.n	8005fb6 <_strtol_l.constprop.0+0xc6>
 8005f6c:	f1bc 0f00 	cmp.w	ip, #0
 8005f70:	db1e      	blt.n	8005fb0 <_strtol_l.constprop.0+0xc0>
 8005f72:	45b1      	cmp	r9, r6
 8005f74:	d31c      	bcc.n	8005fb0 <_strtol_l.constprop.0+0xc0>
 8005f76:	d101      	bne.n	8005f7c <_strtol_l.constprop.0+0x8c>
 8005f78:	45a2      	cmp	sl, r4
 8005f7a:	db19      	blt.n	8005fb0 <_strtol_l.constprop.0+0xc0>
 8005f7c:	fb06 4603 	mla	r6, r6, r3, r4
 8005f80:	f04f 0c01 	mov.w	ip, #1
 8005f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f88:	e7e8      	b.n	8005f5c <_strtol_l.constprop.0+0x6c>
 8005f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8005f8c:	bf04      	itt	eq
 8005f8e:	782c      	ldrbeq	r4, [r5, #0]
 8005f90:	1cb5      	addeq	r5, r6, #2
 8005f92:	e7ca      	b.n	8005f2a <_strtol_l.constprop.0+0x3a>
 8005f94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f98:	f1be 0f19 	cmp.w	lr, #25
 8005f9c:	d801      	bhi.n	8005fa2 <_strtol_l.constprop.0+0xb2>
 8005f9e:	3c37      	subs	r4, #55	; 0x37
 8005fa0:	e7e2      	b.n	8005f68 <_strtol_l.constprop.0+0x78>
 8005fa2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005fa6:	f1be 0f19 	cmp.w	lr, #25
 8005faa:	d804      	bhi.n	8005fb6 <_strtol_l.constprop.0+0xc6>
 8005fac:	3c57      	subs	r4, #87	; 0x57
 8005fae:	e7db      	b.n	8005f68 <_strtol_l.constprop.0+0x78>
 8005fb0:	f04f 3cff 	mov.w	ip, #4294967295
 8005fb4:	e7e6      	b.n	8005f84 <_strtol_l.constprop.0+0x94>
 8005fb6:	f1bc 0f00 	cmp.w	ip, #0
 8005fba:	da05      	bge.n	8005fc8 <_strtol_l.constprop.0+0xd8>
 8005fbc:	2322      	movs	r3, #34	; 0x22
 8005fbe:	6003      	str	r3, [r0, #0]
 8005fc0:	4646      	mov	r6, r8
 8005fc2:	b942      	cbnz	r2, 8005fd6 <_strtol_l.constprop.0+0xe6>
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	e79e      	b.n	8005f06 <_strtol_l.constprop.0+0x16>
 8005fc8:	b107      	cbz	r7, 8005fcc <_strtol_l.constprop.0+0xdc>
 8005fca:	4276      	negs	r6, r6
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	d0f9      	beq.n	8005fc4 <_strtol_l.constprop.0+0xd4>
 8005fd0:	f1bc 0f00 	cmp.w	ip, #0
 8005fd4:	d000      	beq.n	8005fd8 <_strtol_l.constprop.0+0xe8>
 8005fd6:	1e69      	subs	r1, r5, #1
 8005fd8:	6011      	str	r1, [r2, #0]
 8005fda:	e7f3      	b.n	8005fc4 <_strtol_l.constprop.0+0xd4>
 8005fdc:	2430      	movs	r4, #48	; 0x30
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1b1      	bne.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	e7af      	b.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005fe6:	2c30      	cmp	r4, #48	; 0x30
 8005fe8:	d0a5      	beq.n	8005f36 <_strtol_l.constprop.0+0x46>
 8005fea:	230a      	movs	r3, #10
 8005fec:	e7ab      	b.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005fee:	bf00      	nop
 8005ff0:	080084d9 	.word	0x080084d9

08005ff4 <_strtol_r>:
 8005ff4:	f7ff bf7c 	b.w	8005ef0 <_strtol_l.constprop.0>

08005ff8 <__swbuf_r>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	4605      	mov	r5, r0
 8006000:	b118      	cbz	r0, 800600a <__swbuf_r+0x12>
 8006002:	6983      	ldr	r3, [r0, #24]
 8006004:	b90b      	cbnz	r3, 800600a <__swbuf_r+0x12>
 8006006:	f000 f9d1 	bl	80063ac <__sinit>
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <__swbuf_r+0x98>)
 800600c:	429c      	cmp	r4, r3
 800600e:	d12b      	bne.n	8006068 <__swbuf_r+0x70>
 8006010:	686c      	ldr	r4, [r5, #4]
 8006012:	69a3      	ldr	r3, [r4, #24]
 8006014:	60a3      	str	r3, [r4, #8]
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	071a      	lsls	r2, r3, #28
 800601a:	d52f      	bpl.n	800607c <__swbuf_r+0x84>
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	b36b      	cbz	r3, 800607c <__swbuf_r+0x84>
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	6820      	ldr	r0, [r4, #0]
 8006024:	1ac0      	subs	r0, r0, r3
 8006026:	6963      	ldr	r3, [r4, #20]
 8006028:	b2f6      	uxtb	r6, r6
 800602a:	4283      	cmp	r3, r0
 800602c:	4637      	mov	r7, r6
 800602e:	dc04      	bgt.n	800603a <__swbuf_r+0x42>
 8006030:	4621      	mov	r1, r4
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f926 	bl	8006284 <_fflush_r>
 8006038:	bb30      	cbnz	r0, 8006088 <__swbuf_r+0x90>
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	3b01      	subs	r3, #1
 800603e:	60a3      	str	r3, [r4, #8]
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	701e      	strb	r6, [r3, #0]
 8006048:	6963      	ldr	r3, [r4, #20]
 800604a:	3001      	adds	r0, #1
 800604c:	4283      	cmp	r3, r0
 800604e:	d004      	beq.n	800605a <__swbuf_r+0x62>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	07db      	lsls	r3, r3, #31
 8006054:	d506      	bpl.n	8006064 <__swbuf_r+0x6c>
 8006056:	2e0a      	cmp	r6, #10
 8006058:	d104      	bne.n	8006064 <__swbuf_r+0x6c>
 800605a:	4621      	mov	r1, r4
 800605c:	4628      	mov	r0, r5
 800605e:	f000 f911 	bl	8006284 <_fflush_r>
 8006062:	b988      	cbnz	r0, 8006088 <__swbuf_r+0x90>
 8006064:	4638      	mov	r0, r7
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <__swbuf_r+0x9c>)
 800606a:	429c      	cmp	r4, r3
 800606c:	d101      	bne.n	8006072 <__swbuf_r+0x7a>
 800606e:	68ac      	ldr	r4, [r5, #8]
 8006070:	e7cf      	b.n	8006012 <__swbuf_r+0x1a>
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <__swbuf_r+0xa0>)
 8006074:	429c      	cmp	r4, r3
 8006076:	bf08      	it	eq
 8006078:	68ec      	ldreq	r4, [r5, #12]
 800607a:	e7ca      	b.n	8006012 <__swbuf_r+0x1a>
 800607c:	4621      	mov	r1, r4
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f80c 	bl	800609c <__swsetup_r>
 8006084:	2800      	cmp	r0, #0
 8006086:	d0cb      	beq.n	8006020 <__swbuf_r+0x28>
 8006088:	f04f 37ff 	mov.w	r7, #4294967295
 800608c:	e7ea      	b.n	8006064 <__swbuf_r+0x6c>
 800608e:	bf00      	nop
 8006090:	080085fc 	.word	0x080085fc
 8006094:	0800861c 	.word	0x0800861c
 8006098:	080085dc 	.word	0x080085dc

0800609c <__swsetup_r>:
 800609c:	4b32      	ldr	r3, [pc, #200]	; (8006168 <__swsetup_r+0xcc>)
 800609e:	b570      	push	{r4, r5, r6, lr}
 80060a0:	681d      	ldr	r5, [r3, #0]
 80060a2:	4606      	mov	r6, r0
 80060a4:	460c      	mov	r4, r1
 80060a6:	b125      	cbz	r5, 80060b2 <__swsetup_r+0x16>
 80060a8:	69ab      	ldr	r3, [r5, #24]
 80060aa:	b913      	cbnz	r3, 80060b2 <__swsetup_r+0x16>
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 f97d 	bl	80063ac <__sinit>
 80060b2:	4b2e      	ldr	r3, [pc, #184]	; (800616c <__swsetup_r+0xd0>)
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d10f      	bne.n	80060d8 <__swsetup_r+0x3c>
 80060b8:	686c      	ldr	r4, [r5, #4]
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060c0:	0719      	lsls	r1, r3, #28
 80060c2:	d42c      	bmi.n	800611e <__swsetup_r+0x82>
 80060c4:	06dd      	lsls	r5, r3, #27
 80060c6:	d411      	bmi.n	80060ec <__swsetup_r+0x50>
 80060c8:	2309      	movs	r3, #9
 80060ca:	6033      	str	r3, [r6, #0]
 80060cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	e03e      	b.n	8006156 <__swsetup_r+0xba>
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <__swsetup_r+0xd4>)
 80060da:	429c      	cmp	r4, r3
 80060dc:	d101      	bne.n	80060e2 <__swsetup_r+0x46>
 80060de:	68ac      	ldr	r4, [r5, #8]
 80060e0:	e7eb      	b.n	80060ba <__swsetup_r+0x1e>
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <__swsetup_r+0xd8>)
 80060e4:	429c      	cmp	r4, r3
 80060e6:	bf08      	it	eq
 80060e8:	68ec      	ldreq	r4, [r5, #12]
 80060ea:	e7e6      	b.n	80060ba <__swsetup_r+0x1e>
 80060ec:	0758      	lsls	r0, r3, #29
 80060ee:	d512      	bpl.n	8006116 <__swsetup_r+0x7a>
 80060f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060f2:	b141      	cbz	r1, 8006106 <__swsetup_r+0x6a>
 80060f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d002      	beq.n	8006102 <__swsetup_r+0x66>
 80060fc:	4630      	mov	r0, r6
 80060fe:	f001 fac1 	bl	8007684 <_free_r>
 8006102:	2300      	movs	r3, #0
 8006104:	6363      	str	r3, [r4, #52]	; 0x34
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800610c:	81a3      	strh	r3, [r4, #12]
 800610e:	2300      	movs	r3, #0
 8006110:	6063      	str	r3, [r4, #4]
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f043 0308 	orr.w	r3, r3, #8
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	b94b      	cbnz	r3, 8006136 <__swsetup_r+0x9a>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800612c:	d003      	beq.n	8006136 <__swsetup_r+0x9a>
 800612e:	4621      	mov	r1, r4
 8006130:	4630      	mov	r0, r6
 8006132:	f000 fd6f 	bl	8006c14 <__smakebuf_r>
 8006136:	89a0      	ldrh	r0, [r4, #12]
 8006138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800613c:	f010 0301 	ands.w	r3, r0, #1
 8006140:	d00a      	beq.n	8006158 <__swsetup_r+0xbc>
 8006142:	2300      	movs	r3, #0
 8006144:	60a3      	str	r3, [r4, #8]
 8006146:	6963      	ldr	r3, [r4, #20]
 8006148:	425b      	negs	r3, r3
 800614a:	61a3      	str	r3, [r4, #24]
 800614c:	6923      	ldr	r3, [r4, #16]
 800614e:	b943      	cbnz	r3, 8006162 <__swsetup_r+0xc6>
 8006150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006154:	d1ba      	bne.n	80060cc <__swsetup_r+0x30>
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	0781      	lsls	r1, r0, #30
 800615a:	bf58      	it	pl
 800615c:	6963      	ldrpl	r3, [r4, #20]
 800615e:	60a3      	str	r3, [r4, #8]
 8006160:	e7f4      	b.n	800614c <__swsetup_r+0xb0>
 8006162:	2000      	movs	r0, #0
 8006164:	e7f7      	b.n	8006156 <__swsetup_r+0xba>
 8006166:	bf00      	nop
 8006168:	20000014 	.word	0x20000014
 800616c:	080085fc 	.word	0x080085fc
 8006170:	0800861c 	.word	0x0800861c
 8006174:	080085dc 	.word	0x080085dc

08006178 <__sflush_r>:
 8006178:	898a      	ldrh	r2, [r1, #12]
 800617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617e:	4605      	mov	r5, r0
 8006180:	0710      	lsls	r0, r2, #28
 8006182:	460c      	mov	r4, r1
 8006184:	d458      	bmi.n	8006238 <__sflush_r+0xc0>
 8006186:	684b      	ldr	r3, [r1, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	dc05      	bgt.n	8006198 <__sflush_r+0x20>
 800618c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	dc02      	bgt.n	8006198 <__sflush_r+0x20>
 8006192:	2000      	movs	r0, #0
 8006194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800619a:	2e00      	cmp	r6, #0
 800619c:	d0f9      	beq.n	8006192 <__sflush_r+0x1a>
 800619e:	2300      	movs	r3, #0
 80061a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061a4:	682f      	ldr	r7, [r5, #0]
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	d032      	beq.n	8006210 <__sflush_r+0x98>
 80061aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	075a      	lsls	r2, r3, #29
 80061b0:	d505      	bpl.n	80061be <__sflush_r+0x46>
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	1ac0      	subs	r0, r0, r3
 80061b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061b8:	b10b      	cbz	r3, 80061be <__sflush_r+0x46>
 80061ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061bc:	1ac0      	subs	r0, r0, r3
 80061be:	2300      	movs	r3, #0
 80061c0:	4602      	mov	r2, r0
 80061c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061c4:	6a21      	ldr	r1, [r4, #32]
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b0      	blx	r6
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	d106      	bne.n	80061de <__sflush_r+0x66>
 80061d0:	6829      	ldr	r1, [r5, #0]
 80061d2:	291d      	cmp	r1, #29
 80061d4:	d82c      	bhi.n	8006230 <__sflush_r+0xb8>
 80061d6:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <__sflush_r+0x108>)
 80061d8:	40ca      	lsrs	r2, r1
 80061da:	07d6      	lsls	r6, r2, #31
 80061dc:	d528      	bpl.n	8006230 <__sflush_r+0xb8>
 80061de:	2200      	movs	r2, #0
 80061e0:	6062      	str	r2, [r4, #4]
 80061e2:	04d9      	lsls	r1, r3, #19
 80061e4:	6922      	ldr	r2, [r4, #16]
 80061e6:	6022      	str	r2, [r4, #0]
 80061e8:	d504      	bpl.n	80061f4 <__sflush_r+0x7c>
 80061ea:	1c42      	adds	r2, r0, #1
 80061ec:	d101      	bne.n	80061f2 <__sflush_r+0x7a>
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	b903      	cbnz	r3, 80061f4 <__sflush_r+0x7c>
 80061f2:	6560      	str	r0, [r4, #84]	; 0x54
 80061f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061f6:	602f      	str	r7, [r5, #0]
 80061f8:	2900      	cmp	r1, #0
 80061fa:	d0ca      	beq.n	8006192 <__sflush_r+0x1a>
 80061fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006200:	4299      	cmp	r1, r3
 8006202:	d002      	beq.n	800620a <__sflush_r+0x92>
 8006204:	4628      	mov	r0, r5
 8006206:	f001 fa3d 	bl	8007684 <_free_r>
 800620a:	2000      	movs	r0, #0
 800620c:	6360      	str	r0, [r4, #52]	; 0x34
 800620e:	e7c1      	b.n	8006194 <__sflush_r+0x1c>
 8006210:	6a21      	ldr	r1, [r4, #32]
 8006212:	2301      	movs	r3, #1
 8006214:	4628      	mov	r0, r5
 8006216:	47b0      	blx	r6
 8006218:	1c41      	adds	r1, r0, #1
 800621a:	d1c7      	bne.n	80061ac <__sflush_r+0x34>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0c4      	beq.n	80061ac <__sflush_r+0x34>
 8006222:	2b1d      	cmp	r3, #29
 8006224:	d001      	beq.n	800622a <__sflush_r+0xb2>
 8006226:	2b16      	cmp	r3, #22
 8006228:	d101      	bne.n	800622e <__sflush_r+0xb6>
 800622a:	602f      	str	r7, [r5, #0]
 800622c:	e7b1      	b.n	8006192 <__sflush_r+0x1a>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	e7ad      	b.n	8006194 <__sflush_r+0x1c>
 8006238:	690f      	ldr	r7, [r1, #16]
 800623a:	2f00      	cmp	r7, #0
 800623c:	d0a9      	beq.n	8006192 <__sflush_r+0x1a>
 800623e:	0793      	lsls	r3, r2, #30
 8006240:	680e      	ldr	r6, [r1, #0]
 8006242:	bf08      	it	eq
 8006244:	694b      	ldreq	r3, [r1, #20]
 8006246:	600f      	str	r7, [r1, #0]
 8006248:	bf18      	it	ne
 800624a:	2300      	movne	r3, #0
 800624c:	eba6 0807 	sub.w	r8, r6, r7
 8006250:	608b      	str	r3, [r1, #8]
 8006252:	f1b8 0f00 	cmp.w	r8, #0
 8006256:	dd9c      	ble.n	8006192 <__sflush_r+0x1a>
 8006258:	6a21      	ldr	r1, [r4, #32]
 800625a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800625c:	4643      	mov	r3, r8
 800625e:	463a      	mov	r2, r7
 8006260:	4628      	mov	r0, r5
 8006262:	47b0      	blx	r6
 8006264:	2800      	cmp	r0, #0
 8006266:	dc06      	bgt.n	8006276 <__sflush_r+0xfe>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	e78e      	b.n	8006194 <__sflush_r+0x1c>
 8006276:	4407      	add	r7, r0
 8006278:	eba8 0800 	sub.w	r8, r8, r0
 800627c:	e7e9      	b.n	8006252 <__sflush_r+0xda>
 800627e:	bf00      	nop
 8006280:	20400001 	.word	0x20400001

08006284 <_fflush_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	690b      	ldr	r3, [r1, #16]
 8006288:	4605      	mov	r5, r0
 800628a:	460c      	mov	r4, r1
 800628c:	b913      	cbnz	r3, 8006294 <_fflush_r+0x10>
 800628e:	2500      	movs	r5, #0
 8006290:	4628      	mov	r0, r5
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	b118      	cbz	r0, 800629e <_fflush_r+0x1a>
 8006296:	6983      	ldr	r3, [r0, #24]
 8006298:	b90b      	cbnz	r3, 800629e <_fflush_r+0x1a>
 800629a:	f000 f887 	bl	80063ac <__sinit>
 800629e:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <_fflush_r+0x6c>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d11b      	bne.n	80062dc <_fflush_r+0x58>
 80062a4:	686c      	ldr	r4, [r5, #4]
 80062a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ef      	beq.n	800628e <_fflush_r+0xa>
 80062ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062b0:	07d0      	lsls	r0, r2, #31
 80062b2:	d404      	bmi.n	80062be <_fflush_r+0x3a>
 80062b4:	0599      	lsls	r1, r3, #22
 80062b6:	d402      	bmi.n	80062be <_fflush_r+0x3a>
 80062b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ba:	f000 fc84 	bl	8006bc6 <__retarget_lock_acquire_recursive>
 80062be:	4628      	mov	r0, r5
 80062c0:	4621      	mov	r1, r4
 80062c2:	f7ff ff59 	bl	8006178 <__sflush_r>
 80062c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062c8:	07da      	lsls	r2, r3, #31
 80062ca:	4605      	mov	r5, r0
 80062cc:	d4e0      	bmi.n	8006290 <_fflush_r+0xc>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	059b      	lsls	r3, r3, #22
 80062d2:	d4dd      	bmi.n	8006290 <_fflush_r+0xc>
 80062d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d6:	f000 fc77 	bl	8006bc8 <__retarget_lock_release_recursive>
 80062da:	e7d9      	b.n	8006290 <_fflush_r+0xc>
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <_fflush_r+0x70>)
 80062de:	429c      	cmp	r4, r3
 80062e0:	d101      	bne.n	80062e6 <_fflush_r+0x62>
 80062e2:	68ac      	ldr	r4, [r5, #8]
 80062e4:	e7df      	b.n	80062a6 <_fflush_r+0x22>
 80062e6:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <_fflush_r+0x74>)
 80062e8:	429c      	cmp	r4, r3
 80062ea:	bf08      	it	eq
 80062ec:	68ec      	ldreq	r4, [r5, #12]
 80062ee:	e7da      	b.n	80062a6 <_fflush_r+0x22>
 80062f0:	080085fc 	.word	0x080085fc
 80062f4:	0800861c 	.word	0x0800861c
 80062f8:	080085dc 	.word	0x080085dc

080062fc <std>:
 80062fc:	2300      	movs	r3, #0
 80062fe:	b510      	push	{r4, lr}
 8006300:	4604      	mov	r4, r0
 8006302:	e9c0 3300 	strd	r3, r3, [r0]
 8006306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800630a:	6083      	str	r3, [r0, #8]
 800630c:	8181      	strh	r1, [r0, #12]
 800630e:	6643      	str	r3, [r0, #100]	; 0x64
 8006310:	81c2      	strh	r2, [r0, #14]
 8006312:	6183      	str	r3, [r0, #24]
 8006314:	4619      	mov	r1, r3
 8006316:	2208      	movs	r2, #8
 8006318:	305c      	adds	r0, #92	; 0x5c
 800631a:	f7fe fd6d 	bl	8004df8 <memset>
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <std+0x38>)
 8006320:	6263      	str	r3, [r4, #36]	; 0x24
 8006322:	4b05      	ldr	r3, [pc, #20]	; (8006338 <std+0x3c>)
 8006324:	62a3      	str	r3, [r4, #40]	; 0x28
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <std+0x40>)
 8006328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <std+0x44>)
 800632c:	6224      	str	r4, [r4, #32]
 800632e:	6323      	str	r3, [r4, #48]	; 0x30
 8006330:	bd10      	pop	{r4, pc}
 8006332:	bf00      	nop
 8006334:	08007e59 	.word	0x08007e59
 8006338:	08007e7b 	.word	0x08007e7b
 800633c:	08007eb3 	.word	0x08007eb3
 8006340:	08007ed7 	.word	0x08007ed7

08006344 <_cleanup_r>:
 8006344:	4901      	ldr	r1, [pc, #4]	; (800634c <_cleanup_r+0x8>)
 8006346:	f000 b8af 	b.w	80064a8 <_fwalk_reent>
 800634a:	bf00      	nop
 800634c:	08006285 	.word	0x08006285

08006350 <__sfmoreglue>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	2268      	movs	r2, #104	; 0x68
 8006354:	1e4d      	subs	r5, r1, #1
 8006356:	4355      	muls	r5, r2
 8006358:	460e      	mov	r6, r1
 800635a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800635e:	f001 f9fd 	bl	800775c <_malloc_r>
 8006362:	4604      	mov	r4, r0
 8006364:	b140      	cbz	r0, 8006378 <__sfmoreglue+0x28>
 8006366:	2100      	movs	r1, #0
 8006368:	e9c0 1600 	strd	r1, r6, [r0]
 800636c:	300c      	adds	r0, #12
 800636e:	60a0      	str	r0, [r4, #8]
 8006370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006374:	f7fe fd40 	bl	8004df8 <memset>
 8006378:	4620      	mov	r0, r4
 800637a:	bd70      	pop	{r4, r5, r6, pc}

0800637c <__sfp_lock_acquire>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__sfp_lock_acquire+0x8>)
 800637e:	f000 bc22 	b.w	8006bc6 <__retarget_lock_acquire_recursive>
 8006382:	bf00      	nop
 8006384:	200002e5 	.word	0x200002e5

08006388 <__sfp_lock_release>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__sfp_lock_release+0x8>)
 800638a:	f000 bc1d 	b.w	8006bc8 <__retarget_lock_release_recursive>
 800638e:	bf00      	nop
 8006390:	200002e5 	.word	0x200002e5

08006394 <__sinit_lock_acquire>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__sinit_lock_acquire+0x8>)
 8006396:	f000 bc16 	b.w	8006bc6 <__retarget_lock_acquire_recursive>
 800639a:	bf00      	nop
 800639c:	200002e6 	.word	0x200002e6

080063a0 <__sinit_lock_release>:
 80063a0:	4801      	ldr	r0, [pc, #4]	; (80063a8 <__sinit_lock_release+0x8>)
 80063a2:	f000 bc11 	b.w	8006bc8 <__retarget_lock_release_recursive>
 80063a6:	bf00      	nop
 80063a8:	200002e6 	.word	0x200002e6

080063ac <__sinit>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4604      	mov	r4, r0
 80063b0:	f7ff fff0 	bl	8006394 <__sinit_lock_acquire>
 80063b4:	69a3      	ldr	r3, [r4, #24]
 80063b6:	b11b      	cbz	r3, 80063c0 <__sinit+0x14>
 80063b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063bc:	f7ff bff0 	b.w	80063a0 <__sinit_lock_release>
 80063c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063c4:	6523      	str	r3, [r4, #80]	; 0x50
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <__sinit+0x68>)
 80063c8:	4a13      	ldr	r2, [pc, #76]	; (8006418 <__sinit+0x6c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	bf04      	itt	eq
 80063d2:	2301      	moveq	r3, #1
 80063d4:	61a3      	streq	r3, [r4, #24]
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 f820 	bl	800641c <__sfp>
 80063dc:	6060      	str	r0, [r4, #4]
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 f81c 	bl	800641c <__sfp>
 80063e4:	60a0      	str	r0, [r4, #8]
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 f818 	bl	800641c <__sfp>
 80063ec:	2200      	movs	r2, #0
 80063ee:	60e0      	str	r0, [r4, #12]
 80063f0:	2104      	movs	r1, #4
 80063f2:	6860      	ldr	r0, [r4, #4]
 80063f4:	f7ff ff82 	bl	80062fc <std>
 80063f8:	68a0      	ldr	r0, [r4, #8]
 80063fa:	2201      	movs	r2, #1
 80063fc:	2109      	movs	r1, #9
 80063fe:	f7ff ff7d 	bl	80062fc <std>
 8006402:	68e0      	ldr	r0, [r4, #12]
 8006404:	2202      	movs	r2, #2
 8006406:	2112      	movs	r1, #18
 8006408:	f7ff ff78 	bl	80062fc <std>
 800640c:	2301      	movs	r3, #1
 800640e:	61a3      	str	r3, [r4, #24]
 8006410:	e7d2      	b.n	80063b8 <__sinit+0xc>
 8006412:	bf00      	nop
 8006414:	08008470 	.word	0x08008470
 8006418:	08006345 	.word	0x08006345

0800641c <__sfp>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	4607      	mov	r7, r0
 8006420:	f7ff ffac 	bl	800637c <__sfp_lock_acquire>
 8006424:	4b1e      	ldr	r3, [pc, #120]	; (80064a0 <__sfp+0x84>)
 8006426:	681e      	ldr	r6, [r3, #0]
 8006428:	69b3      	ldr	r3, [r6, #24]
 800642a:	b913      	cbnz	r3, 8006432 <__sfp+0x16>
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff ffbd 	bl	80063ac <__sinit>
 8006432:	3648      	adds	r6, #72	; 0x48
 8006434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006438:	3b01      	subs	r3, #1
 800643a:	d503      	bpl.n	8006444 <__sfp+0x28>
 800643c:	6833      	ldr	r3, [r6, #0]
 800643e:	b30b      	cbz	r3, 8006484 <__sfp+0x68>
 8006440:	6836      	ldr	r6, [r6, #0]
 8006442:	e7f7      	b.n	8006434 <__sfp+0x18>
 8006444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006448:	b9d5      	cbnz	r5, 8006480 <__sfp+0x64>
 800644a:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <__sfp+0x88>)
 800644c:	60e3      	str	r3, [r4, #12]
 800644e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006452:	6665      	str	r5, [r4, #100]	; 0x64
 8006454:	f000 fbb6 	bl	8006bc4 <__retarget_lock_init_recursive>
 8006458:	f7ff ff96 	bl	8006388 <__sfp_lock_release>
 800645c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006464:	6025      	str	r5, [r4, #0]
 8006466:	61a5      	str	r5, [r4, #24]
 8006468:	2208      	movs	r2, #8
 800646a:	4629      	mov	r1, r5
 800646c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006470:	f7fe fcc2 	bl	8004df8 <memset>
 8006474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800647c:	4620      	mov	r0, r4
 800647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006480:	3468      	adds	r4, #104	; 0x68
 8006482:	e7d9      	b.n	8006438 <__sfp+0x1c>
 8006484:	2104      	movs	r1, #4
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ff62 	bl	8006350 <__sfmoreglue>
 800648c:	4604      	mov	r4, r0
 800648e:	6030      	str	r0, [r6, #0]
 8006490:	2800      	cmp	r0, #0
 8006492:	d1d5      	bne.n	8006440 <__sfp+0x24>
 8006494:	f7ff ff78 	bl	8006388 <__sfp_lock_release>
 8006498:	230c      	movs	r3, #12
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	e7ee      	b.n	800647c <__sfp+0x60>
 800649e:	bf00      	nop
 80064a0:	08008470 	.word	0x08008470
 80064a4:	ffff0001 	.word	0xffff0001

080064a8 <_fwalk_reent>:
 80064a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ac:	4606      	mov	r6, r0
 80064ae:	4688      	mov	r8, r1
 80064b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064b4:	2700      	movs	r7, #0
 80064b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064ba:	f1b9 0901 	subs.w	r9, r9, #1
 80064be:	d505      	bpl.n	80064cc <_fwalk_reent+0x24>
 80064c0:	6824      	ldr	r4, [r4, #0]
 80064c2:	2c00      	cmp	r4, #0
 80064c4:	d1f7      	bne.n	80064b6 <_fwalk_reent+0xe>
 80064c6:	4638      	mov	r0, r7
 80064c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064cc:	89ab      	ldrh	r3, [r5, #12]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d907      	bls.n	80064e2 <_fwalk_reent+0x3a>
 80064d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064d6:	3301      	adds	r3, #1
 80064d8:	d003      	beq.n	80064e2 <_fwalk_reent+0x3a>
 80064da:	4629      	mov	r1, r5
 80064dc:	4630      	mov	r0, r6
 80064de:	47c0      	blx	r8
 80064e0:	4307      	orrs	r7, r0
 80064e2:	3568      	adds	r5, #104	; 0x68
 80064e4:	e7e9      	b.n	80064ba <_fwalk_reent+0x12>

080064e6 <rshift>:
 80064e6:	6903      	ldr	r3, [r0, #16]
 80064e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80064ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80064f4:	f100 0414 	add.w	r4, r0, #20
 80064f8:	dd45      	ble.n	8006586 <rshift+0xa0>
 80064fa:	f011 011f 	ands.w	r1, r1, #31
 80064fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006502:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006506:	d10c      	bne.n	8006522 <rshift+0x3c>
 8006508:	f100 0710 	add.w	r7, r0, #16
 800650c:	4629      	mov	r1, r5
 800650e:	42b1      	cmp	r1, r6
 8006510:	d334      	bcc.n	800657c <rshift+0x96>
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	1eea      	subs	r2, r5, #3
 8006518:	4296      	cmp	r6, r2
 800651a:	bf38      	it	cc
 800651c:	2300      	movcc	r3, #0
 800651e:	4423      	add	r3, r4
 8006520:	e015      	b.n	800654e <rshift+0x68>
 8006522:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006526:	f1c1 0820 	rsb	r8, r1, #32
 800652a:	40cf      	lsrs	r7, r1
 800652c:	f105 0e04 	add.w	lr, r5, #4
 8006530:	46a1      	mov	r9, r4
 8006532:	4576      	cmp	r6, lr
 8006534:	46f4      	mov	ip, lr
 8006536:	d815      	bhi.n	8006564 <rshift+0x7e>
 8006538:	1a9a      	subs	r2, r3, r2
 800653a:	0092      	lsls	r2, r2, #2
 800653c:	3a04      	subs	r2, #4
 800653e:	3501      	adds	r5, #1
 8006540:	42ae      	cmp	r6, r5
 8006542:	bf38      	it	cc
 8006544:	2200      	movcc	r2, #0
 8006546:	18a3      	adds	r3, r4, r2
 8006548:	50a7      	str	r7, [r4, r2]
 800654a:	b107      	cbz	r7, 800654e <rshift+0x68>
 800654c:	3304      	adds	r3, #4
 800654e:	1b1a      	subs	r2, r3, r4
 8006550:	42a3      	cmp	r3, r4
 8006552:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006556:	bf08      	it	eq
 8006558:	2300      	moveq	r3, #0
 800655a:	6102      	str	r2, [r0, #16]
 800655c:	bf08      	it	eq
 800655e:	6143      	streq	r3, [r0, #20]
 8006560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006564:	f8dc c000 	ldr.w	ip, [ip]
 8006568:	fa0c fc08 	lsl.w	ip, ip, r8
 800656c:	ea4c 0707 	orr.w	r7, ip, r7
 8006570:	f849 7b04 	str.w	r7, [r9], #4
 8006574:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006578:	40cf      	lsrs	r7, r1
 800657a:	e7da      	b.n	8006532 <rshift+0x4c>
 800657c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006580:	f847 cf04 	str.w	ip, [r7, #4]!
 8006584:	e7c3      	b.n	800650e <rshift+0x28>
 8006586:	4623      	mov	r3, r4
 8006588:	e7e1      	b.n	800654e <rshift+0x68>

0800658a <__hexdig_fun>:
 800658a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800658e:	2b09      	cmp	r3, #9
 8006590:	d802      	bhi.n	8006598 <__hexdig_fun+0xe>
 8006592:	3820      	subs	r0, #32
 8006594:	b2c0      	uxtb	r0, r0
 8006596:	4770      	bx	lr
 8006598:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800659c:	2b05      	cmp	r3, #5
 800659e:	d801      	bhi.n	80065a4 <__hexdig_fun+0x1a>
 80065a0:	3847      	subs	r0, #71	; 0x47
 80065a2:	e7f7      	b.n	8006594 <__hexdig_fun+0xa>
 80065a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d801      	bhi.n	80065b0 <__hexdig_fun+0x26>
 80065ac:	3827      	subs	r0, #39	; 0x27
 80065ae:	e7f1      	b.n	8006594 <__hexdig_fun+0xa>
 80065b0:	2000      	movs	r0, #0
 80065b2:	4770      	bx	lr

080065b4 <__gethex>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	ed2d 8b02 	vpush	{d8}
 80065bc:	b089      	sub	sp, #36	; 0x24
 80065be:	ee08 0a10 	vmov	s16, r0
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	4bb4      	ldr	r3, [pc, #720]	; (8006898 <__gethex+0x2e4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	4618      	mov	r0, r3
 80065cc:	468b      	mov	fp, r1
 80065ce:	4690      	mov	r8, r2
 80065d0:	f7f9 fe1e 	bl	8000210 <strlen>
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	f8db 2000 	ldr.w	r2, [fp]
 80065da:	4403      	add	r3, r0
 80065dc:	4682      	mov	sl, r0
 80065de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	1c93      	adds	r3, r2, #2
 80065e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80065ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80065ee:	32fe      	adds	r2, #254	; 0xfe
 80065f0:	18d1      	adds	r1, r2, r3
 80065f2:	461f      	mov	r7, r3
 80065f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80065f8:	9100      	str	r1, [sp, #0]
 80065fa:	2830      	cmp	r0, #48	; 0x30
 80065fc:	d0f8      	beq.n	80065f0 <__gethex+0x3c>
 80065fe:	f7ff ffc4 	bl	800658a <__hexdig_fun>
 8006602:	4604      	mov	r4, r0
 8006604:	2800      	cmp	r0, #0
 8006606:	d13a      	bne.n	800667e <__gethex+0xca>
 8006608:	9901      	ldr	r1, [sp, #4]
 800660a:	4652      	mov	r2, sl
 800660c:	4638      	mov	r0, r7
 800660e:	f7fe fe31 	bl	8005274 <strncmp>
 8006612:	4605      	mov	r5, r0
 8006614:	2800      	cmp	r0, #0
 8006616:	d168      	bne.n	80066ea <__gethex+0x136>
 8006618:	f817 000a 	ldrb.w	r0, [r7, sl]
 800661c:	eb07 060a 	add.w	r6, r7, sl
 8006620:	f7ff ffb3 	bl	800658a <__hexdig_fun>
 8006624:	2800      	cmp	r0, #0
 8006626:	d062      	beq.n	80066ee <__gethex+0x13a>
 8006628:	4633      	mov	r3, r6
 800662a:	7818      	ldrb	r0, [r3, #0]
 800662c:	2830      	cmp	r0, #48	; 0x30
 800662e:	461f      	mov	r7, r3
 8006630:	f103 0301 	add.w	r3, r3, #1
 8006634:	d0f9      	beq.n	800662a <__gethex+0x76>
 8006636:	f7ff ffa8 	bl	800658a <__hexdig_fun>
 800663a:	2301      	movs	r3, #1
 800663c:	fab0 f480 	clz	r4, r0
 8006640:	0964      	lsrs	r4, r4, #5
 8006642:	4635      	mov	r5, r6
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	463a      	mov	r2, r7
 8006648:	4616      	mov	r6, r2
 800664a:	3201      	adds	r2, #1
 800664c:	7830      	ldrb	r0, [r6, #0]
 800664e:	f7ff ff9c 	bl	800658a <__hexdig_fun>
 8006652:	2800      	cmp	r0, #0
 8006654:	d1f8      	bne.n	8006648 <__gethex+0x94>
 8006656:	9901      	ldr	r1, [sp, #4]
 8006658:	4652      	mov	r2, sl
 800665a:	4630      	mov	r0, r6
 800665c:	f7fe fe0a 	bl	8005274 <strncmp>
 8006660:	b980      	cbnz	r0, 8006684 <__gethex+0xd0>
 8006662:	b94d      	cbnz	r5, 8006678 <__gethex+0xc4>
 8006664:	eb06 050a 	add.w	r5, r6, sl
 8006668:	462a      	mov	r2, r5
 800666a:	4616      	mov	r6, r2
 800666c:	3201      	adds	r2, #1
 800666e:	7830      	ldrb	r0, [r6, #0]
 8006670:	f7ff ff8b 	bl	800658a <__hexdig_fun>
 8006674:	2800      	cmp	r0, #0
 8006676:	d1f8      	bne.n	800666a <__gethex+0xb6>
 8006678:	1bad      	subs	r5, r5, r6
 800667a:	00ad      	lsls	r5, r5, #2
 800667c:	e004      	b.n	8006688 <__gethex+0xd4>
 800667e:	2400      	movs	r4, #0
 8006680:	4625      	mov	r5, r4
 8006682:	e7e0      	b.n	8006646 <__gethex+0x92>
 8006684:	2d00      	cmp	r5, #0
 8006686:	d1f7      	bne.n	8006678 <__gethex+0xc4>
 8006688:	7833      	ldrb	r3, [r6, #0]
 800668a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800668e:	2b50      	cmp	r3, #80	; 0x50
 8006690:	d13b      	bne.n	800670a <__gethex+0x156>
 8006692:	7873      	ldrb	r3, [r6, #1]
 8006694:	2b2b      	cmp	r3, #43	; 0x2b
 8006696:	d02c      	beq.n	80066f2 <__gethex+0x13e>
 8006698:	2b2d      	cmp	r3, #45	; 0x2d
 800669a:	d02e      	beq.n	80066fa <__gethex+0x146>
 800669c:	1c71      	adds	r1, r6, #1
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	7808      	ldrb	r0, [r1, #0]
 80066a4:	f7ff ff71 	bl	800658a <__hexdig_fun>
 80066a8:	1e43      	subs	r3, r0, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b18      	cmp	r3, #24
 80066ae:	d82c      	bhi.n	800670a <__gethex+0x156>
 80066b0:	f1a0 0210 	sub.w	r2, r0, #16
 80066b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80066b8:	f7ff ff67 	bl	800658a <__hexdig_fun>
 80066bc:	1e43      	subs	r3, r0, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b18      	cmp	r3, #24
 80066c2:	d91d      	bls.n	8006700 <__gethex+0x14c>
 80066c4:	f1b9 0f00 	cmp.w	r9, #0
 80066c8:	d000      	beq.n	80066cc <__gethex+0x118>
 80066ca:	4252      	negs	r2, r2
 80066cc:	4415      	add	r5, r2
 80066ce:	f8cb 1000 	str.w	r1, [fp]
 80066d2:	b1e4      	cbz	r4, 800670e <__gethex+0x15a>
 80066d4:	9b00      	ldr	r3, [sp, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bf14      	ite	ne
 80066da:	2700      	movne	r7, #0
 80066dc:	2706      	moveq	r7, #6
 80066de:	4638      	mov	r0, r7
 80066e0:	b009      	add	sp, #36	; 0x24
 80066e2:	ecbd 8b02 	vpop	{d8}
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	463e      	mov	r6, r7
 80066ec:	4625      	mov	r5, r4
 80066ee:	2401      	movs	r4, #1
 80066f0:	e7ca      	b.n	8006688 <__gethex+0xd4>
 80066f2:	f04f 0900 	mov.w	r9, #0
 80066f6:	1cb1      	adds	r1, r6, #2
 80066f8:	e7d3      	b.n	80066a2 <__gethex+0xee>
 80066fa:	f04f 0901 	mov.w	r9, #1
 80066fe:	e7fa      	b.n	80066f6 <__gethex+0x142>
 8006700:	230a      	movs	r3, #10
 8006702:	fb03 0202 	mla	r2, r3, r2, r0
 8006706:	3a10      	subs	r2, #16
 8006708:	e7d4      	b.n	80066b4 <__gethex+0x100>
 800670a:	4631      	mov	r1, r6
 800670c:	e7df      	b.n	80066ce <__gethex+0x11a>
 800670e:	1bf3      	subs	r3, r6, r7
 8006710:	3b01      	subs	r3, #1
 8006712:	4621      	mov	r1, r4
 8006714:	2b07      	cmp	r3, #7
 8006716:	dc0b      	bgt.n	8006730 <__gethex+0x17c>
 8006718:	ee18 0a10 	vmov	r0, s16
 800671c:	f000 fada 	bl	8006cd4 <_Balloc>
 8006720:	4604      	mov	r4, r0
 8006722:	b940      	cbnz	r0, 8006736 <__gethex+0x182>
 8006724:	4b5d      	ldr	r3, [pc, #372]	; (800689c <__gethex+0x2e8>)
 8006726:	4602      	mov	r2, r0
 8006728:	21de      	movs	r1, #222	; 0xde
 800672a:	485d      	ldr	r0, [pc, #372]	; (80068a0 <__gethex+0x2ec>)
 800672c:	f001 fbf6 	bl	8007f1c <__assert_func>
 8006730:	3101      	adds	r1, #1
 8006732:	105b      	asrs	r3, r3, #1
 8006734:	e7ee      	b.n	8006714 <__gethex+0x160>
 8006736:	f100 0914 	add.w	r9, r0, #20
 800673a:	f04f 0b00 	mov.w	fp, #0
 800673e:	f1ca 0301 	rsb	r3, sl, #1
 8006742:	f8cd 9008 	str.w	r9, [sp, #8]
 8006746:	f8cd b000 	str.w	fp, [sp]
 800674a:	9306      	str	r3, [sp, #24]
 800674c:	42b7      	cmp	r7, r6
 800674e:	d340      	bcc.n	80067d2 <__gethex+0x21e>
 8006750:	9802      	ldr	r0, [sp, #8]
 8006752:	9b00      	ldr	r3, [sp, #0]
 8006754:	f840 3b04 	str.w	r3, [r0], #4
 8006758:	eba0 0009 	sub.w	r0, r0, r9
 800675c:	1080      	asrs	r0, r0, #2
 800675e:	0146      	lsls	r6, r0, #5
 8006760:	6120      	str	r0, [r4, #16]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fba8 	bl	8006eb8 <__hi0bits>
 8006768:	1a30      	subs	r0, r6, r0
 800676a:	f8d8 6000 	ldr.w	r6, [r8]
 800676e:	42b0      	cmp	r0, r6
 8006770:	dd63      	ble.n	800683a <__gethex+0x286>
 8006772:	1b87      	subs	r7, r0, r6
 8006774:	4639      	mov	r1, r7
 8006776:	4620      	mov	r0, r4
 8006778:	f000 ff4c 	bl	8007614 <__any_on>
 800677c:	4682      	mov	sl, r0
 800677e:	b1a8      	cbz	r0, 80067ac <__gethex+0x1f8>
 8006780:	1e7b      	subs	r3, r7, #1
 8006782:	1159      	asrs	r1, r3, #5
 8006784:	f003 021f 	and.w	r2, r3, #31
 8006788:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800678c:	f04f 0a01 	mov.w	sl, #1
 8006790:	fa0a f202 	lsl.w	r2, sl, r2
 8006794:	420a      	tst	r2, r1
 8006796:	d009      	beq.n	80067ac <__gethex+0x1f8>
 8006798:	4553      	cmp	r3, sl
 800679a:	dd05      	ble.n	80067a8 <__gethex+0x1f4>
 800679c:	1eb9      	subs	r1, r7, #2
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 ff38 	bl	8007614 <__any_on>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d145      	bne.n	8006834 <__gethex+0x280>
 80067a8:	f04f 0a02 	mov.w	sl, #2
 80067ac:	4639      	mov	r1, r7
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff fe99 	bl	80064e6 <rshift>
 80067b4:	443d      	add	r5, r7
 80067b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067ba:	42ab      	cmp	r3, r5
 80067bc:	da4c      	bge.n	8006858 <__gethex+0x2a4>
 80067be:	ee18 0a10 	vmov	r0, s16
 80067c2:	4621      	mov	r1, r4
 80067c4:	f000 fac6 	bl	8006d54 <_Bfree>
 80067c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067ca:	2300      	movs	r3, #0
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	27a3      	movs	r7, #163	; 0xa3
 80067d0:	e785      	b.n	80066de <__gethex+0x12a>
 80067d2:	1e73      	subs	r3, r6, #1
 80067d4:	9a05      	ldr	r2, [sp, #20]
 80067d6:	9303      	str	r3, [sp, #12]
 80067d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067dc:	4293      	cmp	r3, r2
 80067de:	d019      	beq.n	8006814 <__gethex+0x260>
 80067e0:	f1bb 0f20 	cmp.w	fp, #32
 80067e4:	d107      	bne.n	80067f6 <__gethex+0x242>
 80067e6:	9b02      	ldr	r3, [sp, #8]
 80067e8:	9a00      	ldr	r2, [sp, #0]
 80067ea:	f843 2b04 	str.w	r2, [r3], #4
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	2300      	movs	r3, #0
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	469b      	mov	fp, r3
 80067f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80067fa:	f7ff fec6 	bl	800658a <__hexdig_fun>
 80067fe:	9b00      	ldr	r3, [sp, #0]
 8006800:	f000 000f 	and.w	r0, r0, #15
 8006804:	fa00 f00b 	lsl.w	r0, r0, fp
 8006808:	4303      	orrs	r3, r0
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	f10b 0b04 	add.w	fp, fp, #4
 8006810:	9b03      	ldr	r3, [sp, #12]
 8006812:	e00d      	b.n	8006830 <__gethex+0x27c>
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	9a06      	ldr	r2, [sp, #24]
 8006818:	4413      	add	r3, r2
 800681a:	42bb      	cmp	r3, r7
 800681c:	d3e0      	bcc.n	80067e0 <__gethex+0x22c>
 800681e:	4618      	mov	r0, r3
 8006820:	9901      	ldr	r1, [sp, #4]
 8006822:	9307      	str	r3, [sp, #28]
 8006824:	4652      	mov	r2, sl
 8006826:	f7fe fd25 	bl	8005274 <strncmp>
 800682a:	9b07      	ldr	r3, [sp, #28]
 800682c:	2800      	cmp	r0, #0
 800682e:	d1d7      	bne.n	80067e0 <__gethex+0x22c>
 8006830:	461e      	mov	r6, r3
 8006832:	e78b      	b.n	800674c <__gethex+0x198>
 8006834:	f04f 0a03 	mov.w	sl, #3
 8006838:	e7b8      	b.n	80067ac <__gethex+0x1f8>
 800683a:	da0a      	bge.n	8006852 <__gethex+0x29e>
 800683c:	1a37      	subs	r7, r6, r0
 800683e:	4621      	mov	r1, r4
 8006840:	ee18 0a10 	vmov	r0, s16
 8006844:	463a      	mov	r2, r7
 8006846:	f000 fca1 	bl	800718c <__lshift>
 800684a:	1bed      	subs	r5, r5, r7
 800684c:	4604      	mov	r4, r0
 800684e:	f100 0914 	add.w	r9, r0, #20
 8006852:	f04f 0a00 	mov.w	sl, #0
 8006856:	e7ae      	b.n	80067b6 <__gethex+0x202>
 8006858:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800685c:	42a8      	cmp	r0, r5
 800685e:	dd72      	ble.n	8006946 <__gethex+0x392>
 8006860:	1b45      	subs	r5, r0, r5
 8006862:	42ae      	cmp	r6, r5
 8006864:	dc36      	bgt.n	80068d4 <__gethex+0x320>
 8006866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d02a      	beq.n	80068c4 <__gethex+0x310>
 800686e:	2b03      	cmp	r3, #3
 8006870:	d02c      	beq.n	80068cc <__gethex+0x318>
 8006872:	2b01      	cmp	r3, #1
 8006874:	d11c      	bne.n	80068b0 <__gethex+0x2fc>
 8006876:	42ae      	cmp	r6, r5
 8006878:	d11a      	bne.n	80068b0 <__gethex+0x2fc>
 800687a:	2e01      	cmp	r6, #1
 800687c:	d112      	bne.n	80068a4 <__gethex+0x2f0>
 800687e:	9a04      	ldr	r2, [sp, #16]
 8006880:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	2301      	movs	r3, #1
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	f8c9 3000 	str.w	r3, [r9]
 800688e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006890:	2762      	movs	r7, #98	; 0x62
 8006892:	601c      	str	r4, [r3, #0]
 8006894:	e723      	b.n	80066de <__gethex+0x12a>
 8006896:	bf00      	nop
 8006898:	080086b4 	.word	0x080086b4
 800689c:	0800863c 	.word	0x0800863c
 80068a0:	0800864d 	.word	0x0800864d
 80068a4:	1e71      	subs	r1, r6, #1
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 feb4 	bl	8007614 <__any_on>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d1e6      	bne.n	800687e <__gethex+0x2ca>
 80068b0:	ee18 0a10 	vmov	r0, s16
 80068b4:	4621      	mov	r1, r4
 80068b6:	f000 fa4d 	bl	8006d54 <_Bfree>
 80068ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068bc:	2300      	movs	r3, #0
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	2750      	movs	r7, #80	; 0x50
 80068c2:	e70c      	b.n	80066de <__gethex+0x12a>
 80068c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f2      	bne.n	80068b0 <__gethex+0x2fc>
 80068ca:	e7d8      	b.n	800687e <__gethex+0x2ca>
 80068cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1d5      	bne.n	800687e <__gethex+0x2ca>
 80068d2:	e7ed      	b.n	80068b0 <__gethex+0x2fc>
 80068d4:	1e6f      	subs	r7, r5, #1
 80068d6:	f1ba 0f00 	cmp.w	sl, #0
 80068da:	d131      	bne.n	8006940 <__gethex+0x38c>
 80068dc:	b127      	cbz	r7, 80068e8 <__gethex+0x334>
 80068de:	4639      	mov	r1, r7
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fe97 	bl	8007614 <__any_on>
 80068e6:	4682      	mov	sl, r0
 80068e8:	117b      	asrs	r3, r7, #5
 80068ea:	2101      	movs	r1, #1
 80068ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80068f0:	f007 071f 	and.w	r7, r7, #31
 80068f4:	fa01 f707 	lsl.w	r7, r1, r7
 80068f8:	421f      	tst	r7, r3
 80068fa:	4629      	mov	r1, r5
 80068fc:	4620      	mov	r0, r4
 80068fe:	bf18      	it	ne
 8006900:	f04a 0a02 	orrne.w	sl, sl, #2
 8006904:	1b76      	subs	r6, r6, r5
 8006906:	f7ff fdee 	bl	80064e6 <rshift>
 800690a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800690e:	2702      	movs	r7, #2
 8006910:	f1ba 0f00 	cmp.w	sl, #0
 8006914:	d048      	beq.n	80069a8 <__gethex+0x3f4>
 8006916:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d015      	beq.n	800694a <__gethex+0x396>
 800691e:	2b03      	cmp	r3, #3
 8006920:	d017      	beq.n	8006952 <__gethex+0x39e>
 8006922:	2b01      	cmp	r3, #1
 8006924:	d109      	bne.n	800693a <__gethex+0x386>
 8006926:	f01a 0f02 	tst.w	sl, #2
 800692a:	d006      	beq.n	800693a <__gethex+0x386>
 800692c:	f8d9 0000 	ldr.w	r0, [r9]
 8006930:	ea4a 0a00 	orr.w	sl, sl, r0
 8006934:	f01a 0f01 	tst.w	sl, #1
 8006938:	d10e      	bne.n	8006958 <__gethex+0x3a4>
 800693a:	f047 0710 	orr.w	r7, r7, #16
 800693e:	e033      	b.n	80069a8 <__gethex+0x3f4>
 8006940:	f04f 0a01 	mov.w	sl, #1
 8006944:	e7d0      	b.n	80068e8 <__gethex+0x334>
 8006946:	2701      	movs	r7, #1
 8006948:	e7e2      	b.n	8006910 <__gethex+0x35c>
 800694a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800694c:	f1c3 0301 	rsb	r3, r3, #1
 8006950:	9315      	str	r3, [sp, #84]	; 0x54
 8006952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <__gethex+0x386>
 8006958:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800695c:	f104 0314 	add.w	r3, r4, #20
 8006960:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006964:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006968:	f04f 0c00 	mov.w	ip, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006976:	d01c      	beq.n	80069b2 <__gethex+0x3fe>
 8006978:	3201      	adds	r2, #1
 800697a:	6002      	str	r2, [r0, #0]
 800697c:	2f02      	cmp	r7, #2
 800697e:	f104 0314 	add.w	r3, r4, #20
 8006982:	d13f      	bne.n	8006a04 <__gethex+0x450>
 8006984:	f8d8 2000 	ldr.w	r2, [r8]
 8006988:	3a01      	subs	r2, #1
 800698a:	42b2      	cmp	r2, r6
 800698c:	d10a      	bne.n	80069a4 <__gethex+0x3f0>
 800698e:	1171      	asrs	r1, r6, #5
 8006990:	2201      	movs	r2, #1
 8006992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006996:	f006 061f 	and.w	r6, r6, #31
 800699a:	fa02 f606 	lsl.w	r6, r2, r6
 800699e:	421e      	tst	r6, r3
 80069a0:	bf18      	it	ne
 80069a2:	4617      	movne	r7, r2
 80069a4:	f047 0720 	orr.w	r7, r7, #32
 80069a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069aa:	601c      	str	r4, [r3, #0]
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	601d      	str	r5, [r3, #0]
 80069b0:	e695      	b.n	80066de <__gethex+0x12a>
 80069b2:	4299      	cmp	r1, r3
 80069b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80069b8:	d8d8      	bhi.n	800696c <__gethex+0x3b8>
 80069ba:	68a3      	ldr	r3, [r4, #8]
 80069bc:	459b      	cmp	fp, r3
 80069be:	db19      	blt.n	80069f4 <__gethex+0x440>
 80069c0:	6861      	ldr	r1, [r4, #4]
 80069c2:	ee18 0a10 	vmov	r0, s16
 80069c6:	3101      	adds	r1, #1
 80069c8:	f000 f984 	bl	8006cd4 <_Balloc>
 80069cc:	4681      	mov	r9, r0
 80069ce:	b918      	cbnz	r0, 80069d8 <__gethex+0x424>
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <__gethex+0x488>)
 80069d2:	4602      	mov	r2, r0
 80069d4:	2184      	movs	r1, #132	; 0x84
 80069d6:	e6a8      	b.n	800672a <__gethex+0x176>
 80069d8:	6922      	ldr	r2, [r4, #16]
 80069da:	3202      	adds	r2, #2
 80069dc:	f104 010c 	add.w	r1, r4, #12
 80069e0:	0092      	lsls	r2, r2, #2
 80069e2:	300c      	adds	r0, #12
 80069e4:	f000 f968 	bl	8006cb8 <memcpy>
 80069e8:	4621      	mov	r1, r4
 80069ea:	ee18 0a10 	vmov	r0, s16
 80069ee:	f000 f9b1 	bl	8006d54 <_Bfree>
 80069f2:	464c      	mov	r4, r9
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069fc:	6122      	str	r2, [r4, #16]
 80069fe:	2201      	movs	r2, #1
 8006a00:	615a      	str	r2, [r3, #20]
 8006a02:	e7bb      	b.n	800697c <__gethex+0x3c8>
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	455a      	cmp	r2, fp
 8006a08:	dd0b      	ble.n	8006a22 <__gethex+0x46e>
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7ff fd6a 	bl	80064e6 <rshift>
 8006a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a16:	3501      	adds	r5, #1
 8006a18:	42ab      	cmp	r3, r5
 8006a1a:	f6ff aed0 	blt.w	80067be <__gethex+0x20a>
 8006a1e:	2701      	movs	r7, #1
 8006a20:	e7c0      	b.n	80069a4 <__gethex+0x3f0>
 8006a22:	f016 061f 	ands.w	r6, r6, #31
 8006a26:	d0fa      	beq.n	8006a1e <__gethex+0x46a>
 8006a28:	4453      	add	r3, sl
 8006a2a:	f1c6 0620 	rsb	r6, r6, #32
 8006a2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006a32:	f000 fa41 	bl	8006eb8 <__hi0bits>
 8006a36:	42b0      	cmp	r0, r6
 8006a38:	dbe7      	blt.n	8006a0a <__gethex+0x456>
 8006a3a:	e7f0      	b.n	8006a1e <__gethex+0x46a>
 8006a3c:	0800863c 	.word	0x0800863c

08006a40 <L_shift>:
 8006a40:	f1c2 0208 	rsb	r2, r2, #8
 8006a44:	0092      	lsls	r2, r2, #2
 8006a46:	b570      	push	{r4, r5, r6, lr}
 8006a48:	f1c2 0620 	rsb	r6, r2, #32
 8006a4c:	6843      	ldr	r3, [r0, #4]
 8006a4e:	6804      	ldr	r4, [r0, #0]
 8006a50:	fa03 f506 	lsl.w	r5, r3, r6
 8006a54:	432c      	orrs	r4, r5
 8006a56:	40d3      	lsrs	r3, r2
 8006a58:	6004      	str	r4, [r0, #0]
 8006a5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a5e:	4288      	cmp	r0, r1
 8006a60:	d3f4      	bcc.n	8006a4c <L_shift+0xc>
 8006a62:	bd70      	pop	{r4, r5, r6, pc}

08006a64 <__match>:
 8006a64:	b530      	push	{r4, r5, lr}
 8006a66:	6803      	ldr	r3, [r0, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a6e:	b914      	cbnz	r4, 8006a76 <__match+0x12>
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	2001      	movs	r0, #1
 8006a74:	bd30      	pop	{r4, r5, pc}
 8006a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006a7e:	2d19      	cmp	r5, #25
 8006a80:	bf98      	it	ls
 8006a82:	3220      	addls	r2, #32
 8006a84:	42a2      	cmp	r2, r4
 8006a86:	d0f0      	beq.n	8006a6a <__match+0x6>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e7f3      	b.n	8006a74 <__match+0x10>

08006a8c <__hexnan>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	680b      	ldr	r3, [r1, #0]
 8006a92:	115e      	asrs	r6, r3, #5
 8006a94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006a98:	f013 031f 	ands.w	r3, r3, #31
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	bf18      	it	ne
 8006aa0:	3604      	addne	r6, #4
 8006aa2:	2500      	movs	r5, #0
 8006aa4:	1f37      	subs	r7, r6, #4
 8006aa6:	4690      	mov	r8, r2
 8006aa8:	6802      	ldr	r2, [r0, #0]
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	4682      	mov	sl, r0
 8006aae:	f846 5c04 	str.w	r5, [r6, #-4]
 8006ab2:	46b9      	mov	r9, r7
 8006ab4:	463c      	mov	r4, r7
 8006ab6:	9502      	str	r5, [sp, #8]
 8006ab8:	46ab      	mov	fp, r5
 8006aba:	7851      	ldrb	r1, [r2, #1]
 8006abc:	1c53      	adds	r3, r2, #1
 8006abe:	9303      	str	r3, [sp, #12]
 8006ac0:	b341      	cbz	r1, 8006b14 <__hexnan+0x88>
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	9205      	str	r2, [sp, #20]
 8006ac6:	9104      	str	r1, [sp, #16]
 8006ac8:	f7ff fd5f 	bl	800658a <__hexdig_fun>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d14f      	bne.n	8006b70 <__hexnan+0xe4>
 8006ad0:	9904      	ldr	r1, [sp, #16]
 8006ad2:	9a05      	ldr	r2, [sp, #20]
 8006ad4:	2920      	cmp	r1, #32
 8006ad6:	d818      	bhi.n	8006b0a <__hexnan+0x7e>
 8006ad8:	9b02      	ldr	r3, [sp, #8]
 8006ada:	459b      	cmp	fp, r3
 8006adc:	dd13      	ble.n	8006b06 <__hexnan+0x7a>
 8006ade:	454c      	cmp	r4, r9
 8006ae0:	d206      	bcs.n	8006af0 <__hexnan+0x64>
 8006ae2:	2d07      	cmp	r5, #7
 8006ae4:	dc04      	bgt.n	8006af0 <__hexnan+0x64>
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff ffa8 	bl	8006a40 <L_shift>
 8006af0:	4544      	cmp	r4, r8
 8006af2:	d950      	bls.n	8006b96 <__hexnan+0x10a>
 8006af4:	2300      	movs	r3, #0
 8006af6:	f1a4 0904 	sub.w	r9, r4, #4
 8006afa:	f844 3c04 	str.w	r3, [r4, #-4]
 8006afe:	f8cd b008 	str.w	fp, [sp, #8]
 8006b02:	464c      	mov	r4, r9
 8006b04:	461d      	mov	r5, r3
 8006b06:	9a03      	ldr	r2, [sp, #12]
 8006b08:	e7d7      	b.n	8006aba <__hexnan+0x2e>
 8006b0a:	2929      	cmp	r1, #41	; 0x29
 8006b0c:	d156      	bne.n	8006bbc <__hexnan+0x130>
 8006b0e:	3202      	adds	r2, #2
 8006b10:	f8ca 2000 	str.w	r2, [sl]
 8006b14:	f1bb 0f00 	cmp.w	fp, #0
 8006b18:	d050      	beq.n	8006bbc <__hexnan+0x130>
 8006b1a:	454c      	cmp	r4, r9
 8006b1c:	d206      	bcs.n	8006b2c <__hexnan+0xa0>
 8006b1e:	2d07      	cmp	r5, #7
 8006b20:	dc04      	bgt.n	8006b2c <__hexnan+0xa0>
 8006b22:	462a      	mov	r2, r5
 8006b24:	4649      	mov	r1, r9
 8006b26:	4620      	mov	r0, r4
 8006b28:	f7ff ff8a 	bl	8006a40 <L_shift>
 8006b2c:	4544      	cmp	r4, r8
 8006b2e:	d934      	bls.n	8006b9a <__hexnan+0x10e>
 8006b30:	f1a8 0204 	sub.w	r2, r8, #4
 8006b34:	4623      	mov	r3, r4
 8006b36:	f853 1b04 	ldr.w	r1, [r3], #4
 8006b3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8006b3e:	429f      	cmp	r7, r3
 8006b40:	d2f9      	bcs.n	8006b36 <__hexnan+0xaa>
 8006b42:	1b3b      	subs	r3, r7, r4
 8006b44:	f023 0303 	bic.w	r3, r3, #3
 8006b48:	3304      	adds	r3, #4
 8006b4a:	3401      	adds	r4, #1
 8006b4c:	3e03      	subs	r6, #3
 8006b4e:	42b4      	cmp	r4, r6
 8006b50:	bf88      	it	hi
 8006b52:	2304      	movhi	r3, #4
 8006b54:	4443      	add	r3, r8
 8006b56:	2200      	movs	r2, #0
 8006b58:	f843 2b04 	str.w	r2, [r3], #4
 8006b5c:	429f      	cmp	r7, r3
 8006b5e:	d2fb      	bcs.n	8006b58 <__hexnan+0xcc>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	b91b      	cbnz	r3, 8006b6c <__hexnan+0xe0>
 8006b64:	4547      	cmp	r7, r8
 8006b66:	d127      	bne.n	8006bb8 <__hexnan+0x12c>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	2005      	movs	r0, #5
 8006b6e:	e026      	b.n	8006bbe <__hexnan+0x132>
 8006b70:	3501      	adds	r5, #1
 8006b72:	2d08      	cmp	r5, #8
 8006b74:	f10b 0b01 	add.w	fp, fp, #1
 8006b78:	dd06      	ble.n	8006b88 <__hexnan+0xfc>
 8006b7a:	4544      	cmp	r4, r8
 8006b7c:	d9c3      	bls.n	8006b06 <__hexnan+0x7a>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b84:	2501      	movs	r5, #1
 8006b86:	3c04      	subs	r4, #4
 8006b88:	6822      	ldr	r2, [r4, #0]
 8006b8a:	f000 000f 	and.w	r0, r0, #15
 8006b8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006b92:	6022      	str	r2, [r4, #0]
 8006b94:	e7b7      	b.n	8006b06 <__hexnan+0x7a>
 8006b96:	2508      	movs	r5, #8
 8006b98:	e7b5      	b.n	8006b06 <__hexnan+0x7a>
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0df      	beq.n	8006b60 <__hexnan+0xd4>
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba4:	f1c3 0320 	rsb	r3, r3, #32
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006bb0:	401a      	ands	r2, r3
 8006bb2:	f846 2c04 	str.w	r2, [r6, #-4]
 8006bb6:	e7d3      	b.n	8006b60 <__hexnan+0xd4>
 8006bb8:	3f04      	subs	r7, #4
 8006bba:	e7d1      	b.n	8006b60 <__hexnan+0xd4>
 8006bbc:	2004      	movs	r0, #4
 8006bbe:	b007      	add	sp, #28
 8006bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bc4 <__retarget_lock_init_recursive>:
 8006bc4:	4770      	bx	lr

08006bc6 <__retarget_lock_acquire_recursive>:
 8006bc6:	4770      	bx	lr

08006bc8 <__retarget_lock_release_recursive>:
 8006bc8:	4770      	bx	lr

08006bca <__swhatbuf_r>:
 8006bca:	b570      	push	{r4, r5, r6, lr}
 8006bcc:	460e      	mov	r6, r1
 8006bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	b096      	sub	sp, #88	; 0x58
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	461d      	mov	r5, r3
 8006bda:	da08      	bge.n	8006bee <__swhatbuf_r+0x24>
 8006bdc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	602a      	str	r2, [r5, #0]
 8006be4:	061a      	lsls	r2, r3, #24
 8006be6:	d410      	bmi.n	8006c0a <__swhatbuf_r+0x40>
 8006be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bec:	e00e      	b.n	8006c0c <__swhatbuf_r+0x42>
 8006bee:	466a      	mov	r2, sp
 8006bf0:	f001 f9d4 	bl	8007f9c <_fstat_r>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	dbf1      	blt.n	8006bdc <__swhatbuf_r+0x12>
 8006bf8:	9a01      	ldr	r2, [sp, #4]
 8006bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c02:	425a      	negs	r2, r3
 8006c04:	415a      	adcs	r2, r3
 8006c06:	602a      	str	r2, [r5, #0]
 8006c08:	e7ee      	b.n	8006be8 <__swhatbuf_r+0x1e>
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	b016      	add	sp, #88	; 0x58
 8006c12:	bd70      	pop	{r4, r5, r6, pc}

08006c14 <__smakebuf_r>:
 8006c14:	898b      	ldrh	r3, [r1, #12]
 8006c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c18:	079d      	lsls	r5, r3, #30
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	d507      	bpl.n	8006c30 <__smakebuf_r+0x1c>
 8006c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	6123      	str	r3, [r4, #16]
 8006c28:	2301      	movs	r3, #1
 8006c2a:	6163      	str	r3, [r4, #20]
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	ab01      	add	r3, sp, #4
 8006c32:	466a      	mov	r2, sp
 8006c34:	f7ff ffc9 	bl	8006bca <__swhatbuf_r>
 8006c38:	9900      	ldr	r1, [sp, #0]
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 fd8d 	bl	800775c <_malloc_r>
 8006c42:	b948      	cbnz	r0, 8006c58 <__smakebuf_r+0x44>
 8006c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c48:	059a      	lsls	r2, r3, #22
 8006c4a:	d4ef      	bmi.n	8006c2c <__smakebuf_r+0x18>
 8006c4c:	f023 0303 	bic.w	r3, r3, #3
 8006c50:	f043 0302 	orr.w	r3, r3, #2
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	e7e3      	b.n	8006c20 <__smakebuf_r+0xc>
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <__smakebuf_r+0x7c>)
 8006c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	6020      	str	r0, [r4, #0]
 8006c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	9b00      	ldr	r3, [sp, #0]
 8006c68:	6163      	str	r3, [r4, #20]
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	6120      	str	r0, [r4, #16]
 8006c6e:	b15b      	cbz	r3, 8006c88 <__smakebuf_r+0x74>
 8006c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c74:	4630      	mov	r0, r6
 8006c76:	f001 f9a3 	bl	8007fc0 <_isatty_r>
 8006c7a:	b128      	cbz	r0, 8006c88 <__smakebuf_r+0x74>
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	89a0      	ldrh	r0, [r4, #12]
 8006c8a:	4305      	orrs	r5, r0
 8006c8c:	81a5      	strh	r5, [r4, #12]
 8006c8e:	e7cd      	b.n	8006c2c <__smakebuf_r+0x18>
 8006c90:	08006345 	.word	0x08006345

08006c94 <__ascii_mbtowc>:
 8006c94:	b082      	sub	sp, #8
 8006c96:	b901      	cbnz	r1, 8006c9a <__ascii_mbtowc+0x6>
 8006c98:	a901      	add	r1, sp, #4
 8006c9a:	b142      	cbz	r2, 8006cae <__ascii_mbtowc+0x1a>
 8006c9c:	b14b      	cbz	r3, 8006cb2 <__ascii_mbtowc+0x1e>
 8006c9e:	7813      	ldrb	r3, [r2, #0]
 8006ca0:	600b      	str	r3, [r1, #0]
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	1e10      	subs	r0, r2, #0
 8006ca6:	bf18      	it	ne
 8006ca8:	2001      	movne	r0, #1
 8006caa:	b002      	add	sp, #8
 8006cac:	4770      	bx	lr
 8006cae:	4610      	mov	r0, r2
 8006cb0:	e7fb      	b.n	8006caa <__ascii_mbtowc+0x16>
 8006cb2:	f06f 0001 	mvn.w	r0, #1
 8006cb6:	e7f8      	b.n	8006caa <__ascii_mbtowc+0x16>

08006cb8 <memcpy>:
 8006cb8:	440a      	add	r2, r1
 8006cba:	4291      	cmp	r1, r2
 8006cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cc0:	d100      	bne.n	8006cc4 <memcpy+0xc>
 8006cc2:	4770      	bx	lr
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cce:	4291      	cmp	r1, r2
 8006cd0:	d1f9      	bne.n	8006cc6 <memcpy+0xe>
 8006cd2:	bd10      	pop	{r4, pc}

08006cd4 <_Balloc>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	b976      	cbnz	r6, 8006cfc <_Balloc+0x28>
 8006cde:	2010      	movs	r0, #16
 8006ce0:	f001 f990 	bl	8008004 <malloc>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ce8:	b920      	cbnz	r0, 8006cf4 <_Balloc+0x20>
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <_Balloc+0x78>)
 8006cec:	4818      	ldr	r0, [pc, #96]	; (8006d50 <_Balloc+0x7c>)
 8006cee:	2166      	movs	r1, #102	; 0x66
 8006cf0:	f001 f914 	bl	8007f1c <__assert_func>
 8006cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cf8:	6006      	str	r6, [r0, #0]
 8006cfa:	60c6      	str	r6, [r0, #12]
 8006cfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cfe:	68f3      	ldr	r3, [r6, #12]
 8006d00:	b183      	cbz	r3, 8006d24 <_Balloc+0x50>
 8006d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d0a:	b9b8      	cbnz	r0, 8006d3c <_Balloc+0x68>
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006d12:	1d72      	adds	r2, r6, #5
 8006d14:	0092      	lsls	r2, r2, #2
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fc9d 	bl	8007656 <_calloc_r>
 8006d1c:	b160      	cbz	r0, 8006d38 <_Balloc+0x64>
 8006d1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d22:	e00e      	b.n	8006d42 <_Balloc+0x6e>
 8006d24:	2221      	movs	r2, #33	; 0x21
 8006d26:	2104      	movs	r1, #4
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fc94 	bl	8007656 <_calloc_r>
 8006d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d30:	60f0      	str	r0, [r6, #12]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e4      	bne.n	8006d02 <_Balloc+0x2e>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	6802      	ldr	r2, [r0, #0]
 8006d3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d42:	2300      	movs	r3, #0
 8006d44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d48:	e7f7      	b.n	8006d3a <_Balloc+0x66>
 8006d4a:	bf00      	nop
 8006d4c:	080086c8 	.word	0x080086c8
 8006d50:	080086df 	.word	0x080086df

08006d54 <_Bfree>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d58:	4605      	mov	r5, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	b976      	cbnz	r6, 8006d7c <_Bfree+0x28>
 8006d5e:	2010      	movs	r0, #16
 8006d60:	f001 f950 	bl	8008004 <malloc>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6268      	str	r0, [r5, #36]	; 0x24
 8006d68:	b920      	cbnz	r0, 8006d74 <_Bfree+0x20>
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <_Bfree+0x3c>)
 8006d6c:	4809      	ldr	r0, [pc, #36]	; (8006d94 <_Bfree+0x40>)
 8006d6e:	218a      	movs	r1, #138	; 0x8a
 8006d70:	f001 f8d4 	bl	8007f1c <__assert_func>
 8006d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d78:	6006      	str	r6, [r0, #0]
 8006d7a:	60c6      	str	r6, [r0, #12]
 8006d7c:	b13c      	cbz	r4, 8006d8e <_Bfree+0x3a>
 8006d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d80:	6862      	ldr	r2, [r4, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d88:	6021      	str	r1, [r4, #0]
 8006d8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	080086c8 	.word	0x080086c8
 8006d94:	080086df 	.word	0x080086df

08006d98 <__multadd>:
 8006d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9c:	690d      	ldr	r5, [r1, #16]
 8006d9e:	4607      	mov	r7, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	461e      	mov	r6, r3
 8006da4:	f101 0c14 	add.w	ip, r1, #20
 8006da8:	2000      	movs	r0, #0
 8006daa:	f8dc 3000 	ldr.w	r3, [ip]
 8006dae:	b299      	uxth	r1, r3
 8006db0:	fb02 6101 	mla	r1, r2, r1, r6
 8006db4:	0c1e      	lsrs	r6, r3, #16
 8006db6:	0c0b      	lsrs	r3, r1, #16
 8006db8:	fb02 3306 	mla	r3, r2, r6, r3
 8006dbc:	b289      	uxth	r1, r1
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dc4:	4285      	cmp	r5, r0
 8006dc6:	f84c 1b04 	str.w	r1, [ip], #4
 8006dca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dce:	dcec      	bgt.n	8006daa <__multadd+0x12>
 8006dd0:	b30e      	cbz	r6, 8006e16 <__multadd+0x7e>
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	42ab      	cmp	r3, r5
 8006dd6:	dc19      	bgt.n	8006e0c <__multadd+0x74>
 8006dd8:	6861      	ldr	r1, [r4, #4]
 8006dda:	4638      	mov	r0, r7
 8006ddc:	3101      	adds	r1, #1
 8006dde:	f7ff ff79 	bl	8006cd4 <_Balloc>
 8006de2:	4680      	mov	r8, r0
 8006de4:	b928      	cbnz	r0, 8006df2 <__multadd+0x5a>
 8006de6:	4602      	mov	r2, r0
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <__multadd+0x84>)
 8006dea:	480d      	ldr	r0, [pc, #52]	; (8006e20 <__multadd+0x88>)
 8006dec:	21b5      	movs	r1, #181	; 0xb5
 8006dee:	f001 f895 	bl	8007f1c <__assert_func>
 8006df2:	6922      	ldr	r2, [r4, #16]
 8006df4:	3202      	adds	r2, #2
 8006df6:	f104 010c 	add.w	r1, r4, #12
 8006dfa:	0092      	lsls	r2, r2, #2
 8006dfc:	300c      	adds	r0, #12
 8006dfe:	f7ff ff5b 	bl	8006cb8 <memcpy>
 8006e02:	4621      	mov	r1, r4
 8006e04:	4638      	mov	r0, r7
 8006e06:	f7ff ffa5 	bl	8006d54 <_Bfree>
 8006e0a:	4644      	mov	r4, r8
 8006e0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e10:	3501      	adds	r5, #1
 8006e12:	615e      	str	r6, [r3, #20]
 8006e14:	6125      	str	r5, [r4, #16]
 8006e16:	4620      	mov	r0, r4
 8006e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1c:	0800863c 	.word	0x0800863c
 8006e20:	080086df 	.word	0x080086df

08006e24 <__s2b>:
 8006e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	4615      	mov	r5, r2
 8006e2c:	461f      	mov	r7, r3
 8006e2e:	2209      	movs	r2, #9
 8006e30:	3308      	adds	r3, #8
 8006e32:	4606      	mov	r6, r0
 8006e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e38:	2100      	movs	r1, #0
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	db09      	blt.n	8006e54 <__s2b+0x30>
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff ff47 	bl	8006cd4 <_Balloc>
 8006e46:	b940      	cbnz	r0, 8006e5a <__s2b+0x36>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <__s2b+0x8c>)
 8006e4c:	4819      	ldr	r0, [pc, #100]	; (8006eb4 <__s2b+0x90>)
 8006e4e:	21ce      	movs	r1, #206	; 0xce
 8006e50:	f001 f864 	bl	8007f1c <__assert_func>
 8006e54:	0052      	lsls	r2, r2, #1
 8006e56:	3101      	adds	r1, #1
 8006e58:	e7f0      	b.n	8006e3c <__s2b+0x18>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	6143      	str	r3, [r0, #20]
 8006e5e:	2d09      	cmp	r5, #9
 8006e60:	f04f 0301 	mov.w	r3, #1
 8006e64:	6103      	str	r3, [r0, #16]
 8006e66:	dd16      	ble.n	8006e96 <__s2b+0x72>
 8006e68:	f104 0909 	add.w	r9, r4, #9
 8006e6c:	46c8      	mov	r8, r9
 8006e6e:	442c      	add	r4, r5
 8006e70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e74:	4601      	mov	r1, r0
 8006e76:	3b30      	subs	r3, #48	; 0x30
 8006e78:	220a      	movs	r2, #10
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7ff ff8c 	bl	8006d98 <__multadd>
 8006e80:	45a0      	cmp	r8, r4
 8006e82:	d1f5      	bne.n	8006e70 <__s2b+0x4c>
 8006e84:	f1a5 0408 	sub.w	r4, r5, #8
 8006e88:	444c      	add	r4, r9
 8006e8a:	1b2d      	subs	r5, r5, r4
 8006e8c:	1963      	adds	r3, r4, r5
 8006e8e:	42bb      	cmp	r3, r7
 8006e90:	db04      	blt.n	8006e9c <__s2b+0x78>
 8006e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e96:	340a      	adds	r4, #10
 8006e98:	2509      	movs	r5, #9
 8006e9a:	e7f6      	b.n	8006e8a <__s2b+0x66>
 8006e9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ea0:	4601      	mov	r1, r0
 8006ea2:	3b30      	subs	r3, #48	; 0x30
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7ff ff76 	bl	8006d98 <__multadd>
 8006eac:	e7ee      	b.n	8006e8c <__s2b+0x68>
 8006eae:	bf00      	nop
 8006eb0:	0800863c 	.word	0x0800863c
 8006eb4:	080086df 	.word	0x080086df

08006eb8 <__hi0bits>:
 8006eb8:	0c03      	lsrs	r3, r0, #16
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	b9d3      	cbnz	r3, 8006ef4 <__hi0bits+0x3c>
 8006ebe:	0400      	lsls	r0, r0, #16
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ec6:	bf04      	itt	eq
 8006ec8:	0200      	lsleq	r0, r0, #8
 8006eca:	3308      	addeq	r3, #8
 8006ecc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ed0:	bf04      	itt	eq
 8006ed2:	0100      	lsleq	r0, r0, #4
 8006ed4:	3304      	addeq	r3, #4
 8006ed6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006eda:	bf04      	itt	eq
 8006edc:	0080      	lsleq	r0, r0, #2
 8006ede:	3302      	addeq	r3, #2
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	db05      	blt.n	8006ef0 <__hi0bits+0x38>
 8006ee4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ee8:	f103 0301 	add.w	r3, r3, #1
 8006eec:	bf08      	it	eq
 8006eee:	2320      	moveq	r3, #32
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	4770      	bx	lr
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e7e4      	b.n	8006ec2 <__hi0bits+0xa>

08006ef8 <__lo0bits>:
 8006ef8:	6803      	ldr	r3, [r0, #0]
 8006efa:	f013 0207 	ands.w	r2, r3, #7
 8006efe:	4601      	mov	r1, r0
 8006f00:	d00b      	beq.n	8006f1a <__lo0bits+0x22>
 8006f02:	07da      	lsls	r2, r3, #31
 8006f04:	d423      	bmi.n	8006f4e <__lo0bits+0x56>
 8006f06:	0798      	lsls	r0, r3, #30
 8006f08:	bf49      	itett	mi
 8006f0a:	085b      	lsrmi	r3, r3, #1
 8006f0c:	089b      	lsrpl	r3, r3, #2
 8006f0e:	2001      	movmi	r0, #1
 8006f10:	600b      	strmi	r3, [r1, #0]
 8006f12:	bf5c      	itt	pl
 8006f14:	600b      	strpl	r3, [r1, #0]
 8006f16:	2002      	movpl	r0, #2
 8006f18:	4770      	bx	lr
 8006f1a:	b298      	uxth	r0, r3
 8006f1c:	b9a8      	cbnz	r0, 8006f4a <__lo0bits+0x52>
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	2010      	movs	r0, #16
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	b90a      	cbnz	r2, 8006f2a <__lo0bits+0x32>
 8006f26:	3008      	adds	r0, #8
 8006f28:	0a1b      	lsrs	r3, r3, #8
 8006f2a:	071a      	lsls	r2, r3, #28
 8006f2c:	bf04      	itt	eq
 8006f2e:	091b      	lsreq	r3, r3, #4
 8006f30:	3004      	addeq	r0, #4
 8006f32:	079a      	lsls	r2, r3, #30
 8006f34:	bf04      	itt	eq
 8006f36:	089b      	lsreq	r3, r3, #2
 8006f38:	3002      	addeq	r0, #2
 8006f3a:	07da      	lsls	r2, r3, #31
 8006f3c:	d403      	bmi.n	8006f46 <__lo0bits+0x4e>
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	f100 0001 	add.w	r0, r0, #1
 8006f44:	d005      	beq.n	8006f52 <__lo0bits+0x5a>
 8006f46:	600b      	str	r3, [r1, #0]
 8006f48:	4770      	bx	lr
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	e7e9      	b.n	8006f22 <__lo0bits+0x2a>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	4770      	bx	lr
 8006f52:	2020      	movs	r0, #32
 8006f54:	4770      	bx	lr
	...

08006f58 <__i2b>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	f7ff feb9 	bl	8006cd4 <_Balloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	b928      	cbnz	r0, 8006f72 <__i2b+0x1a>
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <__i2b+0x24>)
 8006f68:	4805      	ldr	r0, [pc, #20]	; (8006f80 <__i2b+0x28>)
 8006f6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f6e:	f000 ffd5 	bl	8007f1c <__assert_func>
 8006f72:	2301      	movs	r3, #1
 8006f74:	6144      	str	r4, [r0, #20]
 8006f76:	6103      	str	r3, [r0, #16]
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	bf00      	nop
 8006f7c:	0800863c 	.word	0x0800863c
 8006f80:	080086df 	.word	0x080086df

08006f84 <__multiply>:
 8006f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f88:	4691      	mov	r9, r2
 8006f8a:	690a      	ldr	r2, [r1, #16]
 8006f8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	bfb8      	it	lt
 8006f94:	460b      	movlt	r3, r1
 8006f96:	460c      	mov	r4, r1
 8006f98:	bfbc      	itt	lt
 8006f9a:	464c      	movlt	r4, r9
 8006f9c:	4699      	movlt	r9, r3
 8006f9e:	6927      	ldr	r7, [r4, #16]
 8006fa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fa4:	68a3      	ldr	r3, [r4, #8]
 8006fa6:	6861      	ldr	r1, [r4, #4]
 8006fa8:	eb07 060a 	add.w	r6, r7, sl
 8006fac:	42b3      	cmp	r3, r6
 8006fae:	b085      	sub	sp, #20
 8006fb0:	bfb8      	it	lt
 8006fb2:	3101      	addlt	r1, #1
 8006fb4:	f7ff fe8e 	bl	8006cd4 <_Balloc>
 8006fb8:	b930      	cbnz	r0, 8006fc8 <__multiply+0x44>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4b44      	ldr	r3, [pc, #272]	; (80070d0 <__multiply+0x14c>)
 8006fbe:	4845      	ldr	r0, [pc, #276]	; (80070d4 <__multiply+0x150>)
 8006fc0:	f240 115d 	movw	r1, #349	; 0x15d
 8006fc4:	f000 ffaa 	bl	8007f1c <__assert_func>
 8006fc8:	f100 0514 	add.w	r5, r0, #20
 8006fcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4543      	cmp	r3, r8
 8006fd6:	d321      	bcc.n	800701c <__multiply+0x98>
 8006fd8:	f104 0314 	add.w	r3, r4, #20
 8006fdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fe0:	f109 0314 	add.w	r3, r9, #20
 8006fe4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fe8:	9202      	str	r2, [sp, #8]
 8006fea:	1b3a      	subs	r2, r7, r4
 8006fec:	3a15      	subs	r2, #21
 8006fee:	f022 0203 	bic.w	r2, r2, #3
 8006ff2:	3204      	adds	r2, #4
 8006ff4:	f104 0115 	add.w	r1, r4, #21
 8006ff8:	428f      	cmp	r7, r1
 8006ffa:	bf38      	it	cc
 8006ffc:	2204      	movcc	r2, #4
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	9a02      	ldr	r2, [sp, #8]
 8007002:	9303      	str	r3, [sp, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d80c      	bhi.n	8007022 <__multiply+0x9e>
 8007008:	2e00      	cmp	r6, #0
 800700a:	dd03      	ble.n	8007014 <__multiply+0x90>
 800700c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007010:	2b00      	cmp	r3, #0
 8007012:	d05a      	beq.n	80070ca <__multiply+0x146>
 8007014:	6106      	str	r6, [r0, #16]
 8007016:	b005      	add	sp, #20
 8007018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701c:	f843 2b04 	str.w	r2, [r3], #4
 8007020:	e7d8      	b.n	8006fd4 <__multiply+0x50>
 8007022:	f8b3 a000 	ldrh.w	sl, [r3]
 8007026:	f1ba 0f00 	cmp.w	sl, #0
 800702a:	d024      	beq.n	8007076 <__multiply+0xf2>
 800702c:	f104 0e14 	add.w	lr, r4, #20
 8007030:	46a9      	mov	r9, r5
 8007032:	f04f 0c00 	mov.w	ip, #0
 8007036:	f85e 2b04 	ldr.w	r2, [lr], #4
 800703a:	f8d9 1000 	ldr.w	r1, [r9]
 800703e:	fa1f fb82 	uxth.w	fp, r2
 8007042:	b289      	uxth	r1, r1
 8007044:	fb0a 110b 	mla	r1, sl, fp, r1
 8007048:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800704c:	f8d9 2000 	ldr.w	r2, [r9]
 8007050:	4461      	add	r1, ip
 8007052:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007056:	fb0a c20b 	mla	r2, sl, fp, ip
 800705a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800705e:	b289      	uxth	r1, r1
 8007060:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007064:	4577      	cmp	r7, lr
 8007066:	f849 1b04 	str.w	r1, [r9], #4
 800706a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800706e:	d8e2      	bhi.n	8007036 <__multiply+0xb2>
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	f845 c002 	str.w	ip, [r5, r2]
 8007076:	9a03      	ldr	r2, [sp, #12]
 8007078:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800707c:	3304      	adds	r3, #4
 800707e:	f1b9 0f00 	cmp.w	r9, #0
 8007082:	d020      	beq.n	80070c6 <__multiply+0x142>
 8007084:	6829      	ldr	r1, [r5, #0]
 8007086:	f104 0c14 	add.w	ip, r4, #20
 800708a:	46ae      	mov	lr, r5
 800708c:	f04f 0a00 	mov.w	sl, #0
 8007090:	f8bc b000 	ldrh.w	fp, [ip]
 8007094:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007098:	fb09 220b 	mla	r2, r9, fp, r2
 800709c:	4492      	add	sl, r2
 800709e:	b289      	uxth	r1, r1
 80070a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80070a4:	f84e 1b04 	str.w	r1, [lr], #4
 80070a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80070ac:	f8be 1000 	ldrh.w	r1, [lr]
 80070b0:	0c12      	lsrs	r2, r2, #16
 80070b2:	fb09 1102 	mla	r1, r9, r2, r1
 80070b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80070ba:	4567      	cmp	r7, ip
 80070bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070c0:	d8e6      	bhi.n	8007090 <__multiply+0x10c>
 80070c2:	9a01      	ldr	r2, [sp, #4]
 80070c4:	50a9      	str	r1, [r5, r2]
 80070c6:	3504      	adds	r5, #4
 80070c8:	e79a      	b.n	8007000 <__multiply+0x7c>
 80070ca:	3e01      	subs	r6, #1
 80070cc:	e79c      	b.n	8007008 <__multiply+0x84>
 80070ce:	bf00      	nop
 80070d0:	0800863c 	.word	0x0800863c
 80070d4:	080086df 	.word	0x080086df

080070d8 <__pow5mult>:
 80070d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	4615      	mov	r5, r2
 80070de:	f012 0203 	ands.w	r2, r2, #3
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	d007      	beq.n	80070f8 <__pow5mult+0x20>
 80070e8:	4c25      	ldr	r4, [pc, #148]	; (8007180 <__pow5mult+0xa8>)
 80070ea:	3a01      	subs	r2, #1
 80070ec:	2300      	movs	r3, #0
 80070ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070f2:	f7ff fe51 	bl	8006d98 <__multadd>
 80070f6:	4607      	mov	r7, r0
 80070f8:	10ad      	asrs	r5, r5, #2
 80070fa:	d03d      	beq.n	8007178 <__pow5mult+0xa0>
 80070fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070fe:	b97c      	cbnz	r4, 8007120 <__pow5mult+0x48>
 8007100:	2010      	movs	r0, #16
 8007102:	f000 ff7f 	bl	8008004 <malloc>
 8007106:	4602      	mov	r2, r0
 8007108:	6270      	str	r0, [r6, #36]	; 0x24
 800710a:	b928      	cbnz	r0, 8007118 <__pow5mult+0x40>
 800710c:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <__pow5mult+0xac>)
 800710e:	481e      	ldr	r0, [pc, #120]	; (8007188 <__pow5mult+0xb0>)
 8007110:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007114:	f000 ff02 	bl	8007f1c <__assert_func>
 8007118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800711c:	6004      	str	r4, [r0, #0]
 800711e:	60c4      	str	r4, [r0, #12]
 8007120:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007124:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007128:	b94c      	cbnz	r4, 800713e <__pow5mult+0x66>
 800712a:	f240 2171 	movw	r1, #625	; 0x271
 800712e:	4630      	mov	r0, r6
 8007130:	f7ff ff12 	bl	8006f58 <__i2b>
 8007134:	2300      	movs	r3, #0
 8007136:	f8c8 0008 	str.w	r0, [r8, #8]
 800713a:	4604      	mov	r4, r0
 800713c:	6003      	str	r3, [r0, #0]
 800713e:	f04f 0900 	mov.w	r9, #0
 8007142:	07eb      	lsls	r3, r5, #31
 8007144:	d50a      	bpl.n	800715c <__pow5mult+0x84>
 8007146:	4639      	mov	r1, r7
 8007148:	4622      	mov	r2, r4
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff ff1a 	bl	8006f84 <__multiply>
 8007150:	4639      	mov	r1, r7
 8007152:	4680      	mov	r8, r0
 8007154:	4630      	mov	r0, r6
 8007156:	f7ff fdfd 	bl	8006d54 <_Bfree>
 800715a:	4647      	mov	r7, r8
 800715c:	106d      	asrs	r5, r5, #1
 800715e:	d00b      	beq.n	8007178 <__pow5mult+0xa0>
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	b938      	cbnz	r0, 8007174 <__pow5mult+0x9c>
 8007164:	4622      	mov	r2, r4
 8007166:	4621      	mov	r1, r4
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff ff0b 	bl	8006f84 <__multiply>
 800716e:	6020      	str	r0, [r4, #0]
 8007170:	f8c0 9000 	str.w	r9, [r0]
 8007174:	4604      	mov	r4, r0
 8007176:	e7e4      	b.n	8007142 <__pow5mult+0x6a>
 8007178:	4638      	mov	r0, r7
 800717a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800717e:	bf00      	nop
 8007180:	08008830 	.word	0x08008830
 8007184:	080086c8 	.word	0x080086c8
 8007188:	080086df 	.word	0x080086df

0800718c <__lshift>:
 800718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	460c      	mov	r4, r1
 8007192:	6849      	ldr	r1, [r1, #4]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	4607      	mov	r7, r0
 800719e:	4691      	mov	r9, r2
 80071a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071a4:	f108 0601 	add.w	r6, r8, #1
 80071a8:	42b3      	cmp	r3, r6
 80071aa:	db0b      	blt.n	80071c4 <__lshift+0x38>
 80071ac:	4638      	mov	r0, r7
 80071ae:	f7ff fd91 	bl	8006cd4 <_Balloc>
 80071b2:	4605      	mov	r5, r0
 80071b4:	b948      	cbnz	r0, 80071ca <__lshift+0x3e>
 80071b6:	4602      	mov	r2, r0
 80071b8:	4b2a      	ldr	r3, [pc, #168]	; (8007264 <__lshift+0xd8>)
 80071ba:	482b      	ldr	r0, [pc, #172]	; (8007268 <__lshift+0xdc>)
 80071bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071c0:	f000 feac 	bl	8007f1c <__assert_func>
 80071c4:	3101      	adds	r1, #1
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	e7ee      	b.n	80071a8 <__lshift+0x1c>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f100 0114 	add.w	r1, r0, #20
 80071d0:	f100 0210 	add.w	r2, r0, #16
 80071d4:	4618      	mov	r0, r3
 80071d6:	4553      	cmp	r3, sl
 80071d8:	db37      	blt.n	800724a <__lshift+0xbe>
 80071da:	6920      	ldr	r0, [r4, #16]
 80071dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071e0:	f104 0314 	add.w	r3, r4, #20
 80071e4:	f019 091f 	ands.w	r9, r9, #31
 80071e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071f0:	d02f      	beq.n	8007252 <__lshift+0xc6>
 80071f2:	f1c9 0e20 	rsb	lr, r9, #32
 80071f6:	468a      	mov	sl, r1
 80071f8:	f04f 0c00 	mov.w	ip, #0
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	fa02 f209 	lsl.w	r2, r2, r9
 8007202:	ea42 020c 	orr.w	r2, r2, ip
 8007206:	f84a 2b04 	str.w	r2, [sl], #4
 800720a:	f853 2b04 	ldr.w	r2, [r3], #4
 800720e:	4298      	cmp	r0, r3
 8007210:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007214:	d8f2      	bhi.n	80071fc <__lshift+0x70>
 8007216:	1b03      	subs	r3, r0, r4
 8007218:	3b15      	subs	r3, #21
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	3304      	adds	r3, #4
 8007220:	f104 0215 	add.w	r2, r4, #21
 8007224:	4290      	cmp	r0, r2
 8007226:	bf38      	it	cc
 8007228:	2304      	movcc	r3, #4
 800722a:	f841 c003 	str.w	ip, [r1, r3]
 800722e:	f1bc 0f00 	cmp.w	ip, #0
 8007232:	d001      	beq.n	8007238 <__lshift+0xac>
 8007234:	f108 0602 	add.w	r6, r8, #2
 8007238:	3e01      	subs	r6, #1
 800723a:	4638      	mov	r0, r7
 800723c:	612e      	str	r6, [r5, #16]
 800723e:	4621      	mov	r1, r4
 8007240:	f7ff fd88 	bl	8006d54 <_Bfree>
 8007244:	4628      	mov	r0, r5
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	f842 0f04 	str.w	r0, [r2, #4]!
 800724e:	3301      	adds	r3, #1
 8007250:	e7c1      	b.n	80071d6 <__lshift+0x4a>
 8007252:	3904      	subs	r1, #4
 8007254:	f853 2b04 	ldr.w	r2, [r3], #4
 8007258:	f841 2f04 	str.w	r2, [r1, #4]!
 800725c:	4298      	cmp	r0, r3
 800725e:	d8f9      	bhi.n	8007254 <__lshift+0xc8>
 8007260:	e7ea      	b.n	8007238 <__lshift+0xac>
 8007262:	bf00      	nop
 8007264:	0800863c 	.word	0x0800863c
 8007268:	080086df 	.word	0x080086df

0800726c <__mcmp>:
 800726c:	b530      	push	{r4, r5, lr}
 800726e:	6902      	ldr	r2, [r0, #16]
 8007270:	690c      	ldr	r4, [r1, #16]
 8007272:	1b12      	subs	r2, r2, r4
 8007274:	d10e      	bne.n	8007294 <__mcmp+0x28>
 8007276:	f100 0314 	add.w	r3, r0, #20
 800727a:	3114      	adds	r1, #20
 800727c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800728c:	42a5      	cmp	r5, r4
 800728e:	d003      	beq.n	8007298 <__mcmp+0x2c>
 8007290:	d305      	bcc.n	800729e <__mcmp+0x32>
 8007292:	2201      	movs	r2, #1
 8007294:	4610      	mov	r0, r2
 8007296:	bd30      	pop	{r4, r5, pc}
 8007298:	4283      	cmp	r3, r0
 800729a:	d3f3      	bcc.n	8007284 <__mcmp+0x18>
 800729c:	e7fa      	b.n	8007294 <__mcmp+0x28>
 800729e:	f04f 32ff 	mov.w	r2, #4294967295
 80072a2:	e7f7      	b.n	8007294 <__mcmp+0x28>

080072a4 <__mdiff>:
 80072a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a8:	460c      	mov	r4, r1
 80072aa:	4606      	mov	r6, r0
 80072ac:	4611      	mov	r1, r2
 80072ae:	4620      	mov	r0, r4
 80072b0:	4690      	mov	r8, r2
 80072b2:	f7ff ffdb 	bl	800726c <__mcmp>
 80072b6:	1e05      	subs	r5, r0, #0
 80072b8:	d110      	bne.n	80072dc <__mdiff+0x38>
 80072ba:	4629      	mov	r1, r5
 80072bc:	4630      	mov	r0, r6
 80072be:	f7ff fd09 	bl	8006cd4 <_Balloc>
 80072c2:	b930      	cbnz	r0, 80072d2 <__mdiff+0x2e>
 80072c4:	4b3a      	ldr	r3, [pc, #232]	; (80073b0 <__mdiff+0x10c>)
 80072c6:	4602      	mov	r2, r0
 80072c8:	f240 2132 	movw	r1, #562	; 0x232
 80072cc:	4839      	ldr	r0, [pc, #228]	; (80073b4 <__mdiff+0x110>)
 80072ce:	f000 fe25 	bl	8007f1c <__assert_func>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072dc:	bfa4      	itt	ge
 80072de:	4643      	movge	r3, r8
 80072e0:	46a0      	movge	r8, r4
 80072e2:	4630      	mov	r0, r6
 80072e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072e8:	bfa6      	itte	ge
 80072ea:	461c      	movge	r4, r3
 80072ec:	2500      	movge	r5, #0
 80072ee:	2501      	movlt	r5, #1
 80072f0:	f7ff fcf0 	bl	8006cd4 <_Balloc>
 80072f4:	b920      	cbnz	r0, 8007300 <__mdiff+0x5c>
 80072f6:	4b2e      	ldr	r3, [pc, #184]	; (80073b0 <__mdiff+0x10c>)
 80072f8:	4602      	mov	r2, r0
 80072fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072fe:	e7e5      	b.n	80072cc <__mdiff+0x28>
 8007300:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007304:	6926      	ldr	r6, [r4, #16]
 8007306:	60c5      	str	r5, [r0, #12]
 8007308:	f104 0914 	add.w	r9, r4, #20
 800730c:	f108 0514 	add.w	r5, r8, #20
 8007310:	f100 0e14 	add.w	lr, r0, #20
 8007314:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007318:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800731c:	f108 0210 	add.w	r2, r8, #16
 8007320:	46f2      	mov	sl, lr
 8007322:	2100      	movs	r1, #0
 8007324:	f859 3b04 	ldr.w	r3, [r9], #4
 8007328:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800732c:	fa1f f883 	uxth.w	r8, r3
 8007330:	fa11 f18b 	uxtah	r1, r1, fp
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	eba1 0808 	sub.w	r8, r1, r8
 800733a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800733e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007342:	fa1f f888 	uxth.w	r8, r8
 8007346:	1419      	asrs	r1, r3, #16
 8007348:	454e      	cmp	r6, r9
 800734a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800734e:	f84a 3b04 	str.w	r3, [sl], #4
 8007352:	d8e7      	bhi.n	8007324 <__mdiff+0x80>
 8007354:	1b33      	subs	r3, r6, r4
 8007356:	3b15      	subs	r3, #21
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	3304      	adds	r3, #4
 800735e:	3415      	adds	r4, #21
 8007360:	42a6      	cmp	r6, r4
 8007362:	bf38      	it	cc
 8007364:	2304      	movcc	r3, #4
 8007366:	441d      	add	r5, r3
 8007368:	4473      	add	r3, lr
 800736a:	469e      	mov	lr, r3
 800736c:	462e      	mov	r6, r5
 800736e:	4566      	cmp	r6, ip
 8007370:	d30e      	bcc.n	8007390 <__mdiff+0xec>
 8007372:	f10c 0203 	add.w	r2, ip, #3
 8007376:	1b52      	subs	r2, r2, r5
 8007378:	f022 0203 	bic.w	r2, r2, #3
 800737c:	3d03      	subs	r5, #3
 800737e:	45ac      	cmp	ip, r5
 8007380:	bf38      	it	cc
 8007382:	2200      	movcc	r2, #0
 8007384:	441a      	add	r2, r3
 8007386:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800738a:	b17b      	cbz	r3, 80073ac <__mdiff+0x108>
 800738c:	6107      	str	r7, [r0, #16]
 800738e:	e7a3      	b.n	80072d8 <__mdiff+0x34>
 8007390:	f856 8b04 	ldr.w	r8, [r6], #4
 8007394:	fa11 f288 	uxtah	r2, r1, r8
 8007398:	1414      	asrs	r4, r2, #16
 800739a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800739e:	b292      	uxth	r2, r2
 80073a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073a4:	f84e 2b04 	str.w	r2, [lr], #4
 80073a8:	1421      	asrs	r1, r4, #16
 80073aa:	e7e0      	b.n	800736e <__mdiff+0xca>
 80073ac:	3f01      	subs	r7, #1
 80073ae:	e7ea      	b.n	8007386 <__mdiff+0xe2>
 80073b0:	0800863c 	.word	0x0800863c
 80073b4:	080086df 	.word	0x080086df

080073b8 <__ulp>:
 80073b8:	b082      	sub	sp, #8
 80073ba:	ed8d 0b00 	vstr	d0, [sp]
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	4912      	ldr	r1, [pc, #72]	; (800740c <__ulp+0x54>)
 80073c2:	4019      	ands	r1, r3
 80073c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80073c8:	2900      	cmp	r1, #0
 80073ca:	dd05      	ble.n	80073d8 <__ulp+0x20>
 80073cc:	2200      	movs	r2, #0
 80073ce:	460b      	mov	r3, r1
 80073d0:	ec43 2b10 	vmov	d0, r2, r3
 80073d4:	b002      	add	sp, #8
 80073d6:	4770      	bx	lr
 80073d8:	4249      	negs	r1, r1
 80073da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80073de:	ea4f 5021 	mov.w	r0, r1, asr #20
 80073e2:	f04f 0200 	mov.w	r2, #0
 80073e6:	f04f 0300 	mov.w	r3, #0
 80073ea:	da04      	bge.n	80073f6 <__ulp+0x3e>
 80073ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80073f0:	fa41 f300 	asr.w	r3, r1, r0
 80073f4:	e7ec      	b.n	80073d0 <__ulp+0x18>
 80073f6:	f1a0 0114 	sub.w	r1, r0, #20
 80073fa:	291e      	cmp	r1, #30
 80073fc:	bfda      	itte	le
 80073fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007402:	fa20 f101 	lsrle.w	r1, r0, r1
 8007406:	2101      	movgt	r1, #1
 8007408:	460a      	mov	r2, r1
 800740a:	e7e1      	b.n	80073d0 <__ulp+0x18>
 800740c:	7ff00000 	.word	0x7ff00000

08007410 <__b2d>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	6905      	ldr	r5, [r0, #16]
 8007414:	f100 0714 	add.w	r7, r0, #20
 8007418:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800741c:	1f2e      	subs	r6, r5, #4
 800741e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007422:	4620      	mov	r0, r4
 8007424:	f7ff fd48 	bl	8006eb8 <__hi0bits>
 8007428:	f1c0 0320 	rsb	r3, r0, #32
 800742c:	280a      	cmp	r0, #10
 800742e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80074ac <__b2d+0x9c>
 8007432:	600b      	str	r3, [r1, #0]
 8007434:	dc14      	bgt.n	8007460 <__b2d+0x50>
 8007436:	f1c0 0e0b 	rsb	lr, r0, #11
 800743a:	fa24 f10e 	lsr.w	r1, r4, lr
 800743e:	42b7      	cmp	r7, r6
 8007440:	ea41 030c 	orr.w	r3, r1, ip
 8007444:	bf34      	ite	cc
 8007446:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800744a:	2100      	movcs	r1, #0
 800744c:	3015      	adds	r0, #21
 800744e:	fa04 f000 	lsl.w	r0, r4, r0
 8007452:	fa21 f10e 	lsr.w	r1, r1, lr
 8007456:	ea40 0201 	orr.w	r2, r0, r1
 800745a:	ec43 2b10 	vmov	d0, r2, r3
 800745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007460:	42b7      	cmp	r7, r6
 8007462:	bf3a      	itte	cc
 8007464:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007468:	f1a5 0608 	subcc.w	r6, r5, #8
 800746c:	2100      	movcs	r1, #0
 800746e:	380b      	subs	r0, #11
 8007470:	d017      	beq.n	80074a2 <__b2d+0x92>
 8007472:	f1c0 0c20 	rsb	ip, r0, #32
 8007476:	fa04 f500 	lsl.w	r5, r4, r0
 800747a:	42be      	cmp	r6, r7
 800747c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007480:	ea45 0504 	orr.w	r5, r5, r4
 8007484:	bf8c      	ite	hi
 8007486:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800748a:	2400      	movls	r4, #0
 800748c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007490:	fa01 f000 	lsl.w	r0, r1, r0
 8007494:	fa24 f40c 	lsr.w	r4, r4, ip
 8007498:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800749c:	ea40 0204 	orr.w	r2, r0, r4
 80074a0:	e7db      	b.n	800745a <__b2d+0x4a>
 80074a2:	ea44 030c 	orr.w	r3, r4, ip
 80074a6:	460a      	mov	r2, r1
 80074a8:	e7d7      	b.n	800745a <__b2d+0x4a>
 80074aa:	bf00      	nop
 80074ac:	3ff00000 	.word	0x3ff00000

080074b0 <__d2b>:
 80074b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	4689      	mov	r9, r1
 80074b6:	2101      	movs	r1, #1
 80074b8:	ec57 6b10 	vmov	r6, r7, d0
 80074bc:	4690      	mov	r8, r2
 80074be:	f7ff fc09 	bl	8006cd4 <_Balloc>
 80074c2:	4604      	mov	r4, r0
 80074c4:	b930      	cbnz	r0, 80074d4 <__d2b+0x24>
 80074c6:	4602      	mov	r2, r0
 80074c8:	4b25      	ldr	r3, [pc, #148]	; (8007560 <__d2b+0xb0>)
 80074ca:	4826      	ldr	r0, [pc, #152]	; (8007564 <__d2b+0xb4>)
 80074cc:	f240 310a 	movw	r1, #778	; 0x30a
 80074d0:	f000 fd24 	bl	8007f1c <__assert_func>
 80074d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074dc:	bb35      	cbnz	r5, 800752c <__d2b+0x7c>
 80074de:	2e00      	cmp	r6, #0
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	d028      	beq.n	8007536 <__d2b+0x86>
 80074e4:	4668      	mov	r0, sp
 80074e6:	9600      	str	r6, [sp, #0]
 80074e8:	f7ff fd06 	bl	8006ef8 <__lo0bits>
 80074ec:	9900      	ldr	r1, [sp, #0]
 80074ee:	b300      	cbz	r0, 8007532 <__d2b+0x82>
 80074f0:	9a01      	ldr	r2, [sp, #4]
 80074f2:	f1c0 0320 	rsb	r3, r0, #32
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	430b      	orrs	r3, r1
 80074fc:	40c2      	lsrs	r2, r0
 80074fe:	6163      	str	r3, [r4, #20]
 8007500:	9201      	str	r2, [sp, #4]
 8007502:	9b01      	ldr	r3, [sp, #4]
 8007504:	61a3      	str	r3, [r4, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bf14      	ite	ne
 800750a:	2202      	movne	r2, #2
 800750c:	2201      	moveq	r2, #1
 800750e:	6122      	str	r2, [r4, #16]
 8007510:	b1d5      	cbz	r5, 8007548 <__d2b+0x98>
 8007512:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007516:	4405      	add	r5, r0
 8007518:	f8c9 5000 	str.w	r5, [r9]
 800751c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007520:	f8c8 0000 	str.w	r0, [r8]
 8007524:	4620      	mov	r0, r4
 8007526:	b003      	add	sp, #12
 8007528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800752c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007530:	e7d5      	b.n	80074de <__d2b+0x2e>
 8007532:	6161      	str	r1, [r4, #20]
 8007534:	e7e5      	b.n	8007502 <__d2b+0x52>
 8007536:	a801      	add	r0, sp, #4
 8007538:	f7ff fcde 	bl	8006ef8 <__lo0bits>
 800753c:	9b01      	ldr	r3, [sp, #4]
 800753e:	6163      	str	r3, [r4, #20]
 8007540:	2201      	movs	r2, #1
 8007542:	6122      	str	r2, [r4, #16]
 8007544:	3020      	adds	r0, #32
 8007546:	e7e3      	b.n	8007510 <__d2b+0x60>
 8007548:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800754c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007550:	f8c9 0000 	str.w	r0, [r9]
 8007554:	6918      	ldr	r0, [r3, #16]
 8007556:	f7ff fcaf 	bl	8006eb8 <__hi0bits>
 800755a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800755e:	e7df      	b.n	8007520 <__d2b+0x70>
 8007560:	0800863c 	.word	0x0800863c
 8007564:	080086df 	.word	0x080086df

08007568 <__ratio>:
 8007568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	4688      	mov	r8, r1
 800756e:	4669      	mov	r1, sp
 8007570:	4681      	mov	r9, r0
 8007572:	f7ff ff4d 	bl	8007410 <__b2d>
 8007576:	a901      	add	r1, sp, #4
 8007578:	4640      	mov	r0, r8
 800757a:	ec55 4b10 	vmov	r4, r5, d0
 800757e:	f7ff ff47 	bl	8007410 <__b2d>
 8007582:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007586:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800758a:	eba3 0c02 	sub.w	ip, r3, r2
 800758e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007598:	ec51 0b10 	vmov	r0, r1, d0
 800759c:	2b00      	cmp	r3, #0
 800759e:	bfd6      	itet	le
 80075a0:	460a      	movle	r2, r1
 80075a2:	462a      	movgt	r2, r5
 80075a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80075a8:	468b      	mov	fp, r1
 80075aa:	462f      	mov	r7, r5
 80075ac:	bfd4      	ite	le
 80075ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80075b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80075b6:	4620      	mov	r0, r4
 80075b8:	ee10 2a10 	vmov	r2, s0
 80075bc:	465b      	mov	r3, fp
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f9 f964 	bl	800088c <__aeabi_ddiv>
 80075c4:	ec41 0b10 	vmov	d0, r0, r1
 80075c8:	b003      	add	sp, #12
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075ce <__copybits>:
 80075ce:	3901      	subs	r1, #1
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	1149      	asrs	r1, r1, #5
 80075d4:	6914      	ldr	r4, [r2, #16]
 80075d6:	3101      	adds	r1, #1
 80075d8:	f102 0314 	add.w	r3, r2, #20
 80075dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075e4:	1f05      	subs	r5, r0, #4
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	d30c      	bcc.n	8007604 <__copybits+0x36>
 80075ea:	1aa3      	subs	r3, r4, r2
 80075ec:	3b11      	subs	r3, #17
 80075ee:	f023 0303 	bic.w	r3, r3, #3
 80075f2:	3211      	adds	r2, #17
 80075f4:	42a2      	cmp	r2, r4
 80075f6:	bf88      	it	hi
 80075f8:	2300      	movhi	r3, #0
 80075fa:	4418      	add	r0, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	4288      	cmp	r0, r1
 8007600:	d305      	bcc.n	800760e <__copybits+0x40>
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	f853 6b04 	ldr.w	r6, [r3], #4
 8007608:	f845 6f04 	str.w	r6, [r5, #4]!
 800760c:	e7eb      	b.n	80075e6 <__copybits+0x18>
 800760e:	f840 3b04 	str.w	r3, [r0], #4
 8007612:	e7f4      	b.n	80075fe <__copybits+0x30>

08007614 <__any_on>:
 8007614:	f100 0214 	add.w	r2, r0, #20
 8007618:	6900      	ldr	r0, [r0, #16]
 800761a:	114b      	asrs	r3, r1, #5
 800761c:	4298      	cmp	r0, r3
 800761e:	b510      	push	{r4, lr}
 8007620:	db11      	blt.n	8007646 <__any_on+0x32>
 8007622:	dd0a      	ble.n	800763a <__any_on+0x26>
 8007624:	f011 011f 	ands.w	r1, r1, #31
 8007628:	d007      	beq.n	800763a <__any_on+0x26>
 800762a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800762e:	fa24 f001 	lsr.w	r0, r4, r1
 8007632:	fa00 f101 	lsl.w	r1, r0, r1
 8007636:	428c      	cmp	r4, r1
 8007638:	d10b      	bne.n	8007652 <__any_on+0x3e>
 800763a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800763e:	4293      	cmp	r3, r2
 8007640:	d803      	bhi.n	800764a <__any_on+0x36>
 8007642:	2000      	movs	r0, #0
 8007644:	bd10      	pop	{r4, pc}
 8007646:	4603      	mov	r3, r0
 8007648:	e7f7      	b.n	800763a <__any_on+0x26>
 800764a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800764e:	2900      	cmp	r1, #0
 8007650:	d0f5      	beq.n	800763e <__any_on+0x2a>
 8007652:	2001      	movs	r0, #1
 8007654:	e7f6      	b.n	8007644 <__any_on+0x30>

08007656 <_calloc_r>:
 8007656:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007658:	fba1 2402 	umull	r2, r4, r1, r2
 800765c:	b94c      	cbnz	r4, 8007672 <_calloc_r+0x1c>
 800765e:	4611      	mov	r1, r2
 8007660:	9201      	str	r2, [sp, #4]
 8007662:	f000 f87b 	bl	800775c <_malloc_r>
 8007666:	9a01      	ldr	r2, [sp, #4]
 8007668:	4605      	mov	r5, r0
 800766a:	b930      	cbnz	r0, 800767a <_calloc_r+0x24>
 800766c:	4628      	mov	r0, r5
 800766e:	b003      	add	sp, #12
 8007670:	bd30      	pop	{r4, r5, pc}
 8007672:	220c      	movs	r2, #12
 8007674:	6002      	str	r2, [r0, #0]
 8007676:	2500      	movs	r5, #0
 8007678:	e7f8      	b.n	800766c <_calloc_r+0x16>
 800767a:	4621      	mov	r1, r4
 800767c:	f7fd fbbc 	bl	8004df8 <memset>
 8007680:	e7f4      	b.n	800766c <_calloc_r+0x16>
	...

08007684 <_free_r>:
 8007684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007686:	2900      	cmp	r1, #0
 8007688:	d044      	beq.n	8007714 <_free_r+0x90>
 800768a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768e:	9001      	str	r0, [sp, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f1a1 0404 	sub.w	r4, r1, #4
 8007696:	bfb8      	it	lt
 8007698:	18e4      	addlt	r4, r4, r3
 800769a:	f000 fcd5 	bl	8008048 <__malloc_lock>
 800769e:	4a1e      	ldr	r2, [pc, #120]	; (8007718 <_free_r+0x94>)
 80076a0:	9801      	ldr	r0, [sp, #4]
 80076a2:	6813      	ldr	r3, [r2, #0]
 80076a4:	b933      	cbnz	r3, 80076b4 <_free_r+0x30>
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	6014      	str	r4, [r2, #0]
 80076aa:	b003      	add	sp, #12
 80076ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076b0:	f000 bcd0 	b.w	8008054 <__malloc_unlock>
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d908      	bls.n	80076ca <_free_r+0x46>
 80076b8:	6825      	ldr	r5, [r4, #0]
 80076ba:	1961      	adds	r1, r4, r5
 80076bc:	428b      	cmp	r3, r1
 80076be:	bf01      	itttt	eq
 80076c0:	6819      	ldreq	r1, [r3, #0]
 80076c2:	685b      	ldreq	r3, [r3, #4]
 80076c4:	1949      	addeq	r1, r1, r5
 80076c6:	6021      	streq	r1, [r4, #0]
 80076c8:	e7ed      	b.n	80076a6 <_free_r+0x22>
 80076ca:	461a      	mov	r2, r3
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	b10b      	cbz	r3, 80076d4 <_free_r+0x50>
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	d9fa      	bls.n	80076ca <_free_r+0x46>
 80076d4:	6811      	ldr	r1, [r2, #0]
 80076d6:	1855      	adds	r5, r2, r1
 80076d8:	42a5      	cmp	r5, r4
 80076da:	d10b      	bne.n	80076f4 <_free_r+0x70>
 80076dc:	6824      	ldr	r4, [r4, #0]
 80076de:	4421      	add	r1, r4
 80076e0:	1854      	adds	r4, r2, r1
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	6011      	str	r1, [r2, #0]
 80076e6:	d1e0      	bne.n	80076aa <_free_r+0x26>
 80076e8:	681c      	ldr	r4, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	6053      	str	r3, [r2, #4]
 80076ee:	4421      	add	r1, r4
 80076f0:	6011      	str	r1, [r2, #0]
 80076f2:	e7da      	b.n	80076aa <_free_r+0x26>
 80076f4:	d902      	bls.n	80076fc <_free_r+0x78>
 80076f6:	230c      	movs	r3, #12
 80076f8:	6003      	str	r3, [r0, #0]
 80076fa:	e7d6      	b.n	80076aa <_free_r+0x26>
 80076fc:	6825      	ldr	r5, [r4, #0]
 80076fe:	1961      	adds	r1, r4, r5
 8007700:	428b      	cmp	r3, r1
 8007702:	bf04      	itt	eq
 8007704:	6819      	ldreq	r1, [r3, #0]
 8007706:	685b      	ldreq	r3, [r3, #4]
 8007708:	6063      	str	r3, [r4, #4]
 800770a:	bf04      	itt	eq
 800770c:	1949      	addeq	r1, r1, r5
 800770e:	6021      	streq	r1, [r4, #0]
 8007710:	6054      	str	r4, [r2, #4]
 8007712:	e7ca      	b.n	80076aa <_free_r+0x26>
 8007714:	b003      	add	sp, #12
 8007716:	bd30      	pop	{r4, r5, pc}
 8007718:	200002e8 	.word	0x200002e8

0800771c <sbrk_aligned>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4e0e      	ldr	r6, [pc, #56]	; (8007758 <sbrk_aligned+0x3c>)
 8007720:	460c      	mov	r4, r1
 8007722:	6831      	ldr	r1, [r6, #0]
 8007724:	4605      	mov	r5, r0
 8007726:	b911      	cbnz	r1, 800772e <sbrk_aligned+0x12>
 8007728:	f000 fb86 	bl	8007e38 <_sbrk_r>
 800772c:	6030      	str	r0, [r6, #0]
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	f000 fb81 	bl	8007e38 <_sbrk_r>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	d00a      	beq.n	8007750 <sbrk_aligned+0x34>
 800773a:	1cc4      	adds	r4, r0, #3
 800773c:	f024 0403 	bic.w	r4, r4, #3
 8007740:	42a0      	cmp	r0, r4
 8007742:	d007      	beq.n	8007754 <sbrk_aligned+0x38>
 8007744:	1a21      	subs	r1, r4, r0
 8007746:	4628      	mov	r0, r5
 8007748:	f000 fb76 	bl	8007e38 <_sbrk_r>
 800774c:	3001      	adds	r0, #1
 800774e:	d101      	bne.n	8007754 <sbrk_aligned+0x38>
 8007750:	f04f 34ff 	mov.w	r4, #4294967295
 8007754:	4620      	mov	r0, r4
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	200002ec 	.word	0x200002ec

0800775c <_malloc_r>:
 800775c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007760:	1ccd      	adds	r5, r1, #3
 8007762:	f025 0503 	bic.w	r5, r5, #3
 8007766:	3508      	adds	r5, #8
 8007768:	2d0c      	cmp	r5, #12
 800776a:	bf38      	it	cc
 800776c:	250c      	movcc	r5, #12
 800776e:	2d00      	cmp	r5, #0
 8007770:	4607      	mov	r7, r0
 8007772:	db01      	blt.n	8007778 <_malloc_r+0x1c>
 8007774:	42a9      	cmp	r1, r5
 8007776:	d905      	bls.n	8007784 <_malloc_r+0x28>
 8007778:	230c      	movs	r3, #12
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	2600      	movs	r6, #0
 800777e:	4630      	mov	r0, r6
 8007780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007784:	4e2e      	ldr	r6, [pc, #184]	; (8007840 <_malloc_r+0xe4>)
 8007786:	f000 fc5f 	bl	8008048 <__malloc_lock>
 800778a:	6833      	ldr	r3, [r6, #0]
 800778c:	461c      	mov	r4, r3
 800778e:	bb34      	cbnz	r4, 80077de <_malloc_r+0x82>
 8007790:	4629      	mov	r1, r5
 8007792:	4638      	mov	r0, r7
 8007794:	f7ff ffc2 	bl	800771c <sbrk_aligned>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	4604      	mov	r4, r0
 800779c:	d14d      	bne.n	800783a <_malloc_r+0xde>
 800779e:	6834      	ldr	r4, [r6, #0]
 80077a0:	4626      	mov	r6, r4
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	d140      	bne.n	8007828 <_malloc_r+0xcc>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	4631      	mov	r1, r6
 80077aa:	4638      	mov	r0, r7
 80077ac:	eb04 0803 	add.w	r8, r4, r3
 80077b0:	f000 fb42 	bl	8007e38 <_sbrk_r>
 80077b4:	4580      	cmp	r8, r0
 80077b6:	d13a      	bne.n	800782e <_malloc_r+0xd2>
 80077b8:	6821      	ldr	r1, [r4, #0]
 80077ba:	3503      	adds	r5, #3
 80077bc:	1a6d      	subs	r5, r5, r1
 80077be:	f025 0503 	bic.w	r5, r5, #3
 80077c2:	3508      	adds	r5, #8
 80077c4:	2d0c      	cmp	r5, #12
 80077c6:	bf38      	it	cc
 80077c8:	250c      	movcc	r5, #12
 80077ca:	4629      	mov	r1, r5
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff ffa5 	bl	800771c <sbrk_aligned>
 80077d2:	3001      	adds	r0, #1
 80077d4:	d02b      	beq.n	800782e <_malloc_r+0xd2>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	442b      	add	r3, r5
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	e00e      	b.n	80077fc <_malloc_r+0xa0>
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	1b52      	subs	r2, r2, r5
 80077e2:	d41e      	bmi.n	8007822 <_malloc_r+0xc6>
 80077e4:	2a0b      	cmp	r2, #11
 80077e6:	d916      	bls.n	8007816 <_malloc_r+0xba>
 80077e8:	1961      	adds	r1, r4, r5
 80077ea:	42a3      	cmp	r3, r4
 80077ec:	6025      	str	r5, [r4, #0]
 80077ee:	bf18      	it	ne
 80077f0:	6059      	strne	r1, [r3, #4]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	bf08      	it	eq
 80077f6:	6031      	streq	r1, [r6, #0]
 80077f8:	5162      	str	r2, [r4, r5]
 80077fa:	604b      	str	r3, [r1, #4]
 80077fc:	4638      	mov	r0, r7
 80077fe:	f104 060b 	add.w	r6, r4, #11
 8007802:	f000 fc27 	bl	8008054 <__malloc_unlock>
 8007806:	f026 0607 	bic.w	r6, r6, #7
 800780a:	1d23      	adds	r3, r4, #4
 800780c:	1af2      	subs	r2, r6, r3
 800780e:	d0b6      	beq.n	800777e <_malloc_r+0x22>
 8007810:	1b9b      	subs	r3, r3, r6
 8007812:	50a3      	str	r3, [r4, r2]
 8007814:	e7b3      	b.n	800777e <_malloc_r+0x22>
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	42a3      	cmp	r3, r4
 800781a:	bf0c      	ite	eq
 800781c:	6032      	streq	r2, [r6, #0]
 800781e:	605a      	strne	r2, [r3, #4]
 8007820:	e7ec      	b.n	80077fc <_malloc_r+0xa0>
 8007822:	4623      	mov	r3, r4
 8007824:	6864      	ldr	r4, [r4, #4]
 8007826:	e7b2      	b.n	800778e <_malloc_r+0x32>
 8007828:	4634      	mov	r4, r6
 800782a:	6876      	ldr	r6, [r6, #4]
 800782c:	e7b9      	b.n	80077a2 <_malloc_r+0x46>
 800782e:	230c      	movs	r3, #12
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	4638      	mov	r0, r7
 8007834:	f000 fc0e 	bl	8008054 <__malloc_unlock>
 8007838:	e7a1      	b.n	800777e <_malloc_r+0x22>
 800783a:	6025      	str	r5, [r4, #0]
 800783c:	e7de      	b.n	80077fc <_malloc_r+0xa0>
 800783e:	bf00      	nop
 8007840:	200002e8 	.word	0x200002e8

08007844 <__ssputs_r>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	688e      	ldr	r6, [r1, #8]
 800784a:	429e      	cmp	r6, r3
 800784c:	4682      	mov	sl, r0
 800784e:	460c      	mov	r4, r1
 8007850:	4690      	mov	r8, r2
 8007852:	461f      	mov	r7, r3
 8007854:	d838      	bhi.n	80078c8 <__ssputs_r+0x84>
 8007856:	898a      	ldrh	r2, [r1, #12]
 8007858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800785c:	d032      	beq.n	80078c4 <__ssputs_r+0x80>
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	6909      	ldr	r1, [r1, #16]
 8007862:	eba5 0901 	sub.w	r9, r5, r1
 8007866:	6965      	ldr	r5, [r4, #20]
 8007868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800786c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007870:	3301      	adds	r3, #1
 8007872:	444b      	add	r3, r9
 8007874:	106d      	asrs	r5, r5, #1
 8007876:	429d      	cmp	r5, r3
 8007878:	bf38      	it	cc
 800787a:	461d      	movcc	r5, r3
 800787c:	0553      	lsls	r3, r2, #21
 800787e:	d531      	bpl.n	80078e4 <__ssputs_r+0xa0>
 8007880:	4629      	mov	r1, r5
 8007882:	f7ff ff6b 	bl	800775c <_malloc_r>
 8007886:	4606      	mov	r6, r0
 8007888:	b950      	cbnz	r0, 80078a0 <__ssputs_r+0x5c>
 800788a:	230c      	movs	r3, #12
 800788c:	f8ca 3000 	str.w	r3, [sl]
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	6921      	ldr	r1, [r4, #16]
 80078a2:	464a      	mov	r2, r9
 80078a4:	f7ff fa08 	bl	8006cb8 <memcpy>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	6126      	str	r6, [r4, #16]
 80078b6:	6165      	str	r5, [r4, #20]
 80078b8:	444e      	add	r6, r9
 80078ba:	eba5 0509 	sub.w	r5, r5, r9
 80078be:	6026      	str	r6, [r4, #0]
 80078c0:	60a5      	str	r5, [r4, #8]
 80078c2:	463e      	mov	r6, r7
 80078c4:	42be      	cmp	r6, r7
 80078c6:	d900      	bls.n	80078ca <__ssputs_r+0x86>
 80078c8:	463e      	mov	r6, r7
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	4632      	mov	r2, r6
 80078ce:	4641      	mov	r1, r8
 80078d0:	f000 fba0 	bl	8008014 <memmove>
 80078d4:	68a3      	ldr	r3, [r4, #8]
 80078d6:	1b9b      	subs	r3, r3, r6
 80078d8:	60a3      	str	r3, [r4, #8]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	4433      	add	r3, r6
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	2000      	movs	r0, #0
 80078e2:	e7db      	b.n	800789c <__ssputs_r+0x58>
 80078e4:	462a      	mov	r2, r5
 80078e6:	f000 fbbb 	bl	8008060 <_realloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d1e1      	bne.n	80078b4 <__ssputs_r+0x70>
 80078f0:	6921      	ldr	r1, [r4, #16]
 80078f2:	4650      	mov	r0, sl
 80078f4:	f7ff fec6 	bl	8007684 <_free_r>
 80078f8:	e7c7      	b.n	800788a <__ssputs_r+0x46>
	...

080078fc <_svfiprintf_r>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	4698      	mov	r8, r3
 8007902:	898b      	ldrh	r3, [r1, #12]
 8007904:	061b      	lsls	r3, r3, #24
 8007906:	b09d      	sub	sp, #116	; 0x74
 8007908:	4607      	mov	r7, r0
 800790a:	460d      	mov	r5, r1
 800790c:	4614      	mov	r4, r2
 800790e:	d50e      	bpl.n	800792e <_svfiprintf_r+0x32>
 8007910:	690b      	ldr	r3, [r1, #16]
 8007912:	b963      	cbnz	r3, 800792e <_svfiprintf_r+0x32>
 8007914:	2140      	movs	r1, #64	; 0x40
 8007916:	f7ff ff21 	bl	800775c <_malloc_r>
 800791a:	6028      	str	r0, [r5, #0]
 800791c:	6128      	str	r0, [r5, #16]
 800791e:	b920      	cbnz	r0, 800792a <_svfiprintf_r+0x2e>
 8007920:	230c      	movs	r3, #12
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e0d1      	b.n	8007ace <_svfiprintf_r+0x1d2>
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	616b      	str	r3, [r5, #20]
 800792e:	2300      	movs	r3, #0
 8007930:	9309      	str	r3, [sp, #36]	; 0x24
 8007932:	2320      	movs	r3, #32
 8007934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007938:	f8cd 800c 	str.w	r8, [sp, #12]
 800793c:	2330      	movs	r3, #48	; 0x30
 800793e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ae8 <_svfiprintf_r+0x1ec>
 8007942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007946:	f04f 0901 	mov.w	r9, #1
 800794a:	4623      	mov	r3, r4
 800794c:	469a      	mov	sl, r3
 800794e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007952:	b10a      	cbz	r2, 8007958 <_svfiprintf_r+0x5c>
 8007954:	2a25      	cmp	r2, #37	; 0x25
 8007956:	d1f9      	bne.n	800794c <_svfiprintf_r+0x50>
 8007958:	ebba 0b04 	subs.w	fp, sl, r4
 800795c:	d00b      	beq.n	8007976 <_svfiprintf_r+0x7a>
 800795e:	465b      	mov	r3, fp
 8007960:	4622      	mov	r2, r4
 8007962:	4629      	mov	r1, r5
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ff6d 	bl	8007844 <__ssputs_r>
 800796a:	3001      	adds	r0, #1
 800796c:	f000 80aa 	beq.w	8007ac4 <_svfiprintf_r+0x1c8>
 8007970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007972:	445a      	add	r2, fp
 8007974:	9209      	str	r2, [sp, #36]	; 0x24
 8007976:	f89a 3000 	ldrb.w	r3, [sl]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80a2 	beq.w	8007ac4 <_svfiprintf_r+0x1c8>
 8007980:	2300      	movs	r3, #0
 8007982:	f04f 32ff 	mov.w	r2, #4294967295
 8007986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800798a:	f10a 0a01 	add.w	sl, sl, #1
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007996:	931a      	str	r3, [sp, #104]	; 0x68
 8007998:	4654      	mov	r4, sl
 800799a:	2205      	movs	r2, #5
 800799c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a0:	4851      	ldr	r0, [pc, #324]	; (8007ae8 <_svfiprintf_r+0x1ec>)
 80079a2:	f7f8 fc3d 	bl	8000220 <memchr>
 80079a6:	9a04      	ldr	r2, [sp, #16]
 80079a8:	b9d8      	cbnz	r0, 80079e2 <_svfiprintf_r+0xe6>
 80079aa:	06d0      	lsls	r0, r2, #27
 80079ac:	bf44      	itt	mi
 80079ae:	2320      	movmi	r3, #32
 80079b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b4:	0711      	lsls	r1, r2, #28
 80079b6:	bf44      	itt	mi
 80079b8:	232b      	movmi	r3, #43	; 0x2b
 80079ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079be:	f89a 3000 	ldrb.w	r3, [sl]
 80079c2:	2b2a      	cmp	r3, #42	; 0x2a
 80079c4:	d015      	beq.n	80079f2 <_svfiprintf_r+0xf6>
 80079c6:	9a07      	ldr	r2, [sp, #28]
 80079c8:	4654      	mov	r4, sl
 80079ca:	2000      	movs	r0, #0
 80079cc:	f04f 0c0a 	mov.w	ip, #10
 80079d0:	4621      	mov	r1, r4
 80079d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d6:	3b30      	subs	r3, #48	; 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d94e      	bls.n	8007a7a <_svfiprintf_r+0x17e>
 80079dc:	b1b0      	cbz	r0, 8007a0c <_svfiprintf_r+0x110>
 80079de:	9207      	str	r2, [sp, #28]
 80079e0:	e014      	b.n	8007a0c <_svfiprintf_r+0x110>
 80079e2:	eba0 0308 	sub.w	r3, r0, r8
 80079e6:	fa09 f303 	lsl.w	r3, r9, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	46a2      	mov	sl, r4
 80079f0:	e7d2      	b.n	8007998 <_svfiprintf_r+0x9c>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	1d19      	adds	r1, r3, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	9103      	str	r1, [sp, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfbb      	ittet	lt
 80079fe:	425b      	neglt	r3, r3
 8007a00:	f042 0202 	orrlt.w	r2, r2, #2
 8007a04:	9307      	strge	r3, [sp, #28]
 8007a06:	9307      	strlt	r3, [sp, #28]
 8007a08:	bfb8      	it	lt
 8007a0a:	9204      	strlt	r2, [sp, #16]
 8007a0c:	7823      	ldrb	r3, [r4, #0]
 8007a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a10:	d10c      	bne.n	8007a2c <_svfiprintf_r+0x130>
 8007a12:	7863      	ldrb	r3, [r4, #1]
 8007a14:	2b2a      	cmp	r3, #42	; 0x2a
 8007a16:	d135      	bne.n	8007a84 <_svfiprintf_r+0x188>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	1d1a      	adds	r2, r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	9203      	str	r2, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bfb8      	it	lt
 8007a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a28:	3402      	adds	r4, #2
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007af8 <_svfiprintf_r+0x1fc>
 8007a30:	7821      	ldrb	r1, [r4, #0]
 8007a32:	2203      	movs	r2, #3
 8007a34:	4650      	mov	r0, sl
 8007a36:	f7f8 fbf3 	bl	8000220 <memchr>
 8007a3a:	b140      	cbz	r0, 8007a4e <_svfiprintf_r+0x152>
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	eba0 000a 	sub.w	r0, r0, sl
 8007a42:	fa03 f000 	lsl.w	r0, r3, r0
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	4303      	orrs	r3, r0
 8007a4a:	3401      	adds	r4, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4826      	ldr	r0, [pc, #152]	; (8007aec <_svfiprintf_r+0x1f0>)
 8007a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a58:	2206      	movs	r2, #6
 8007a5a:	f7f8 fbe1 	bl	8000220 <memchr>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d038      	beq.n	8007ad4 <_svfiprintf_r+0x1d8>
 8007a62:	4b23      	ldr	r3, [pc, #140]	; (8007af0 <_svfiprintf_r+0x1f4>)
 8007a64:	bb1b      	cbnz	r3, 8007aae <_svfiprintf_r+0x1b2>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	3307      	adds	r3, #7
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	3308      	adds	r3, #8
 8007a70:	9303      	str	r3, [sp, #12]
 8007a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a74:	4433      	add	r3, r6
 8007a76:	9309      	str	r3, [sp, #36]	; 0x24
 8007a78:	e767      	b.n	800794a <_svfiprintf_r+0x4e>
 8007a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a7e:	460c      	mov	r4, r1
 8007a80:	2001      	movs	r0, #1
 8007a82:	e7a5      	b.n	80079d0 <_svfiprintf_r+0xd4>
 8007a84:	2300      	movs	r3, #0
 8007a86:	3401      	adds	r4, #1
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f04f 0c0a 	mov.w	ip, #10
 8007a90:	4620      	mov	r0, r4
 8007a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a96:	3a30      	subs	r2, #48	; 0x30
 8007a98:	2a09      	cmp	r2, #9
 8007a9a:	d903      	bls.n	8007aa4 <_svfiprintf_r+0x1a8>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0c5      	beq.n	8007a2c <_svfiprintf_r+0x130>
 8007aa0:	9105      	str	r1, [sp, #20]
 8007aa2:	e7c3      	b.n	8007a2c <_svfiprintf_r+0x130>
 8007aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e7f0      	b.n	8007a90 <_svfiprintf_r+0x194>
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007ab6:	a904      	add	r1, sp, #16
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f3af 8000 	nop.w
 8007abe:	1c42      	adds	r2, r0, #1
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	d1d6      	bne.n	8007a72 <_svfiprintf_r+0x176>
 8007ac4:	89ab      	ldrh	r3, [r5, #12]
 8007ac6:	065b      	lsls	r3, r3, #25
 8007ac8:	f53f af2c 	bmi.w	8007924 <_svfiprintf_r+0x28>
 8007acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ace:	b01d      	add	sp, #116	; 0x74
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	ab03      	add	r3, sp, #12
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f000 f87a 	bl	8007bd8 <_printf_i>
 8007ae4:	e7eb      	b.n	8007abe <_svfiprintf_r+0x1c2>
 8007ae6:	bf00      	nop
 8007ae8:	0800883c 	.word	0x0800883c
 8007aec:	08008846 	.word	0x08008846
 8007af0:	00000000 	.word	0x00000000
 8007af4:	08007845 	.word	0x08007845
 8007af8:	08008842 	.word	0x08008842

08007afc <_printf_common>:
 8007afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	4616      	mov	r6, r2
 8007b02:	4699      	mov	r9, r3
 8007b04:	688a      	ldr	r2, [r1, #8]
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	bfb8      	it	lt
 8007b10:	4613      	movlt	r3, r2
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b18:	4607      	mov	r7, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b10a      	cbz	r2, 8007b22 <_printf_common+0x26>
 8007b1e:	3301      	adds	r3, #1
 8007b20:	6033      	str	r3, [r6, #0]
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	0699      	lsls	r1, r3, #26
 8007b26:	bf42      	ittt	mi
 8007b28:	6833      	ldrmi	r3, [r6, #0]
 8007b2a:	3302      	addmi	r3, #2
 8007b2c:	6033      	strmi	r3, [r6, #0]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	f015 0506 	ands.w	r5, r5, #6
 8007b34:	d106      	bne.n	8007b44 <_printf_common+0x48>
 8007b36:	f104 0a19 	add.w	sl, r4, #25
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	6832      	ldr	r2, [r6, #0]
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc26      	bgt.n	8007b92 <_printf_common+0x96>
 8007b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b48:	1e13      	subs	r3, r2, #0
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	bf18      	it	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	0692      	lsls	r2, r2, #26
 8007b52:	d42b      	bmi.n	8007bac <_printf_common+0xb0>
 8007b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d01e      	beq.n	8007ba0 <_printf_common+0xa4>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	68e5      	ldr	r5, [r4, #12]
 8007b66:	6832      	ldr	r2, [r6, #0]
 8007b68:	f003 0306 	and.w	r3, r3, #6
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	bf08      	it	eq
 8007b70:	1aad      	subeq	r5, r5, r2
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	6922      	ldr	r2, [r4, #16]
 8007b76:	bf0c      	ite	eq
 8007b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b7c:	2500      	movne	r5, #0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bfc4      	itt	gt
 8007b82:	1a9b      	subgt	r3, r3, r2
 8007b84:	18ed      	addgt	r5, r5, r3
 8007b86:	2600      	movs	r6, #0
 8007b88:	341a      	adds	r4, #26
 8007b8a:	42b5      	cmp	r5, r6
 8007b8c:	d11a      	bne.n	8007bc4 <_printf_common+0xc8>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e008      	b.n	8007ba4 <_printf_common+0xa8>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4652      	mov	r2, sl
 8007b96:	4649      	mov	r1, r9
 8007b98:	4638      	mov	r0, r7
 8007b9a:	47c0      	blx	r8
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d103      	bne.n	8007ba8 <_printf_common+0xac>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	3501      	adds	r5, #1
 8007baa:	e7c6      	b.n	8007b3a <_printf_common+0x3e>
 8007bac:	18e1      	adds	r1, r4, r3
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	2030      	movs	r0, #48	; 0x30
 8007bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bb6:	4422      	add	r2, r4
 8007bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	e7c7      	b.n	8007b54 <_printf_common+0x58>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c0      	blx	r8
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d0e6      	beq.n	8007ba0 <_printf_common+0xa4>
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7d9      	b.n	8007b8a <_printf_common+0x8e>
	...

08007bd8 <_printf_i>:
 8007bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	7e0f      	ldrb	r7, [r1, #24]
 8007bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007be0:	2f78      	cmp	r7, #120	; 0x78
 8007be2:	4691      	mov	r9, r2
 8007be4:	4680      	mov	r8, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	469a      	mov	sl, r3
 8007bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bee:	d807      	bhi.n	8007c00 <_printf_i+0x28>
 8007bf0:	2f62      	cmp	r7, #98	; 0x62
 8007bf2:	d80a      	bhi.n	8007c0a <_printf_i+0x32>
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	f000 80d8 	beq.w	8007daa <_printf_i+0x1d2>
 8007bfa:	2f58      	cmp	r7, #88	; 0x58
 8007bfc:	f000 80a3 	beq.w	8007d46 <_printf_i+0x16e>
 8007c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c08:	e03a      	b.n	8007c80 <_printf_i+0xa8>
 8007c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c0e:	2b15      	cmp	r3, #21
 8007c10:	d8f6      	bhi.n	8007c00 <_printf_i+0x28>
 8007c12:	a101      	add	r1, pc, #4	; (adr r1, 8007c18 <_printf_i+0x40>)
 8007c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c85 	.word	0x08007c85
 8007c20:	08007c01 	.word	0x08007c01
 8007c24:	08007c01 	.word	0x08007c01
 8007c28:	08007c01 	.word	0x08007c01
 8007c2c:	08007c01 	.word	0x08007c01
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007c01 	.word	0x08007c01
 8007c38:	08007c01 	.word	0x08007c01
 8007c3c:	08007c01 	.word	0x08007c01
 8007c40:	08007c01 	.word	0x08007c01
 8007c44:	08007d91 	.word	0x08007d91
 8007c48:	08007cb5 	.word	0x08007cb5
 8007c4c:	08007d73 	.word	0x08007d73
 8007c50:	08007c01 	.word	0x08007c01
 8007c54:	08007c01 	.word	0x08007c01
 8007c58:	08007db3 	.word	0x08007db3
 8007c5c:	08007c01 	.word	0x08007c01
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007c01 	.word	0x08007c01
 8007c68:	08007c01 	.word	0x08007c01
 8007c6c:	08007d7b 	.word	0x08007d7b
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	602a      	str	r2, [r5, #0]
 8007c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c80:	2301      	movs	r3, #1
 8007c82:	e0a3      	b.n	8007dcc <_printf_i+0x1f4>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	6829      	ldr	r1, [r5, #0]
 8007c88:	0606      	lsls	r6, r0, #24
 8007c8a:	f101 0304 	add.w	r3, r1, #4
 8007c8e:	d50a      	bpl.n	8007ca6 <_printf_i+0xce>
 8007c90:	680e      	ldr	r6, [r1, #0]
 8007c92:	602b      	str	r3, [r5, #0]
 8007c94:	2e00      	cmp	r6, #0
 8007c96:	da03      	bge.n	8007ca0 <_printf_i+0xc8>
 8007c98:	232d      	movs	r3, #45	; 0x2d
 8007c9a:	4276      	negs	r6, r6
 8007c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca0:	485e      	ldr	r0, [pc, #376]	; (8007e1c <_printf_i+0x244>)
 8007ca2:	230a      	movs	r3, #10
 8007ca4:	e019      	b.n	8007cda <_printf_i+0x102>
 8007ca6:	680e      	ldr	r6, [r1, #0]
 8007ca8:	602b      	str	r3, [r5, #0]
 8007caa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cae:	bf18      	it	ne
 8007cb0:	b236      	sxthne	r6, r6
 8007cb2:	e7ef      	b.n	8007c94 <_printf_i+0xbc>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	6820      	ldr	r0, [r4, #0]
 8007cb8:	1d19      	adds	r1, r3, #4
 8007cba:	6029      	str	r1, [r5, #0]
 8007cbc:	0601      	lsls	r1, r0, #24
 8007cbe:	d501      	bpl.n	8007cc4 <_printf_i+0xec>
 8007cc0:	681e      	ldr	r6, [r3, #0]
 8007cc2:	e002      	b.n	8007cca <_printf_i+0xf2>
 8007cc4:	0646      	lsls	r6, r0, #25
 8007cc6:	d5fb      	bpl.n	8007cc0 <_printf_i+0xe8>
 8007cc8:	881e      	ldrh	r6, [r3, #0]
 8007cca:	4854      	ldr	r0, [pc, #336]	; (8007e1c <_printf_i+0x244>)
 8007ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8007cce:	bf0c      	ite	eq
 8007cd0:	2308      	moveq	r3, #8
 8007cd2:	230a      	movne	r3, #10
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cda:	6865      	ldr	r5, [r4, #4]
 8007cdc:	60a5      	str	r5, [r4, #8]
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	bfa2      	ittt	ge
 8007ce2:	6821      	ldrge	r1, [r4, #0]
 8007ce4:	f021 0104 	bicge.w	r1, r1, #4
 8007ce8:	6021      	strge	r1, [r4, #0]
 8007cea:	b90e      	cbnz	r6, 8007cf0 <_printf_i+0x118>
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	d04d      	beq.n	8007d8c <_printf_i+0x1b4>
 8007cf0:	4615      	mov	r5, r2
 8007cf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cf6:	fb03 6711 	mls	r7, r3, r1, r6
 8007cfa:	5dc7      	ldrb	r7, [r0, r7]
 8007cfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d00:	4637      	mov	r7, r6
 8007d02:	42bb      	cmp	r3, r7
 8007d04:	460e      	mov	r6, r1
 8007d06:	d9f4      	bls.n	8007cf2 <_printf_i+0x11a>
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d10b      	bne.n	8007d24 <_printf_i+0x14c>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	07de      	lsls	r6, r3, #31
 8007d10:	d508      	bpl.n	8007d24 <_printf_i+0x14c>
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	4299      	cmp	r1, r3
 8007d18:	bfde      	ittt	le
 8007d1a:	2330      	movle	r3, #48	; 0x30
 8007d1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d24:	1b52      	subs	r2, r2, r5
 8007d26:	6122      	str	r2, [r4, #16]
 8007d28:	f8cd a000 	str.w	sl, [sp]
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	aa03      	add	r2, sp, #12
 8007d30:	4621      	mov	r1, r4
 8007d32:	4640      	mov	r0, r8
 8007d34:	f7ff fee2 	bl	8007afc <_printf_common>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d14c      	bne.n	8007dd6 <_printf_i+0x1fe>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	b004      	add	sp, #16
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	4835      	ldr	r0, [pc, #212]	; (8007e1c <_printf_i+0x244>)
 8007d48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d4c:	6829      	ldr	r1, [r5, #0]
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d54:	6029      	str	r1, [r5, #0]
 8007d56:	061d      	lsls	r5, r3, #24
 8007d58:	d514      	bpl.n	8007d84 <_printf_i+0x1ac>
 8007d5a:	07df      	lsls	r7, r3, #31
 8007d5c:	bf44      	itt	mi
 8007d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d62:	6023      	strmi	r3, [r4, #0]
 8007d64:	b91e      	cbnz	r6, 8007d6e <_printf_i+0x196>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f023 0320 	bic.w	r3, r3, #32
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	2310      	movs	r3, #16
 8007d70:	e7b0      	b.n	8007cd4 <_printf_i+0xfc>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	f043 0320 	orr.w	r3, r3, #32
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	2378      	movs	r3, #120	; 0x78
 8007d7c:	4828      	ldr	r0, [pc, #160]	; (8007e20 <_printf_i+0x248>)
 8007d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d82:	e7e3      	b.n	8007d4c <_printf_i+0x174>
 8007d84:	0659      	lsls	r1, r3, #25
 8007d86:	bf48      	it	mi
 8007d88:	b2b6      	uxthmi	r6, r6
 8007d8a:	e7e6      	b.n	8007d5a <_printf_i+0x182>
 8007d8c:	4615      	mov	r5, r2
 8007d8e:	e7bb      	b.n	8007d08 <_printf_i+0x130>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	6826      	ldr	r6, [r4, #0]
 8007d94:	6961      	ldr	r1, [r4, #20]
 8007d96:	1d18      	adds	r0, r3, #4
 8007d98:	6028      	str	r0, [r5, #0]
 8007d9a:	0635      	lsls	r5, r6, #24
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	d501      	bpl.n	8007da4 <_printf_i+0x1cc>
 8007da0:	6019      	str	r1, [r3, #0]
 8007da2:	e002      	b.n	8007daa <_printf_i+0x1d2>
 8007da4:	0670      	lsls	r0, r6, #25
 8007da6:	d5fb      	bpl.n	8007da0 <_printf_i+0x1c8>
 8007da8:	8019      	strh	r1, [r3, #0]
 8007daa:	2300      	movs	r3, #0
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	4615      	mov	r5, r2
 8007db0:	e7ba      	b.n	8007d28 <_printf_i+0x150>
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	1d1a      	adds	r2, r3, #4
 8007db6:	602a      	str	r2, [r5, #0]
 8007db8:	681d      	ldr	r5, [r3, #0]
 8007dba:	6862      	ldr	r2, [r4, #4]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f7f8 fa2e 	bl	8000220 <memchr>
 8007dc4:	b108      	cbz	r0, 8007dca <_printf_i+0x1f2>
 8007dc6:	1b40      	subs	r0, r0, r5
 8007dc8:	6060      	str	r0, [r4, #4]
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd4:	e7a8      	b.n	8007d28 <_printf_i+0x150>
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	462a      	mov	r2, r5
 8007dda:	4649      	mov	r1, r9
 8007ddc:	4640      	mov	r0, r8
 8007dde:	47d0      	blx	sl
 8007de0:	3001      	adds	r0, #1
 8007de2:	d0ab      	beq.n	8007d3c <_printf_i+0x164>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	079b      	lsls	r3, r3, #30
 8007de8:	d413      	bmi.n	8007e12 <_printf_i+0x23a>
 8007dea:	68e0      	ldr	r0, [r4, #12]
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	4298      	cmp	r0, r3
 8007df0:	bfb8      	it	lt
 8007df2:	4618      	movlt	r0, r3
 8007df4:	e7a4      	b.n	8007d40 <_printf_i+0x168>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4632      	mov	r2, r6
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	47d0      	blx	sl
 8007e00:	3001      	adds	r0, #1
 8007e02:	d09b      	beq.n	8007d3c <_printf_i+0x164>
 8007e04:	3501      	adds	r5, #1
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	9903      	ldr	r1, [sp, #12]
 8007e0a:	1a5b      	subs	r3, r3, r1
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	dcf2      	bgt.n	8007df6 <_printf_i+0x21e>
 8007e10:	e7eb      	b.n	8007dea <_printf_i+0x212>
 8007e12:	2500      	movs	r5, #0
 8007e14:	f104 0619 	add.w	r6, r4, #25
 8007e18:	e7f5      	b.n	8007e06 <_printf_i+0x22e>
 8007e1a:	bf00      	nop
 8007e1c:	0800884d 	.word	0x0800884d
 8007e20:	0800885e 	.word	0x0800885e
 8007e24:	00000000 	.word	0x00000000

08007e28 <nan>:
 8007e28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007e30 <nan+0x8>
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	00000000 	.word	0x00000000
 8007e34:	7ff80000 	.word	0x7ff80000

08007e38 <_sbrk_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d06      	ldr	r5, [pc, #24]	; (8007e54 <_sbrk_r+0x1c>)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	f7f9 fc4c 	bl	80016e0 <_sbrk>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_sbrk_r+0x1a>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_sbrk_r+0x1a>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	200002f0 	.word	0x200002f0

08007e58 <__sread>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	f000 fa86 	bl	8008370 <_read_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	bfab      	itete	ge
 8007e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e6c:	181b      	addge	r3, r3, r0
 8007e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e72:	bfac      	ite	ge
 8007e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e76:	81a3      	strhlt	r3, [r4, #12]
 8007e78:	bd10      	pop	{r4, pc}

08007e7a <__swrite>:
 8007e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	461f      	mov	r7, r3
 8007e80:	898b      	ldrh	r3, [r1, #12]
 8007e82:	05db      	lsls	r3, r3, #23
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	4616      	mov	r6, r2
 8007e8a:	d505      	bpl.n	8007e98 <__swrite+0x1e>
 8007e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e90:	2302      	movs	r3, #2
 8007e92:	2200      	movs	r2, #0
 8007e94:	f000 f8a4 	bl	8007fe0 <_lseek_r>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eae:	f000 b823 	b.w	8007ef8 <_write_r>

08007eb2 <__sseek>:
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eba:	f000 f891 	bl	8007fe0 <_lseek_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	bf15      	itete	ne
 8007ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ece:	81a3      	strheq	r3, [r4, #12]
 8007ed0:	bf18      	it	ne
 8007ed2:	81a3      	strhne	r3, [r4, #12]
 8007ed4:	bd10      	pop	{r4, pc}

08007ed6 <__sclose>:
 8007ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eda:	f000 b83d 	b.w	8007f58 <_close_r>

08007ede <__ascii_wctomb>:
 8007ede:	b149      	cbz	r1, 8007ef4 <__ascii_wctomb+0x16>
 8007ee0:	2aff      	cmp	r2, #255	; 0xff
 8007ee2:	bf85      	ittet	hi
 8007ee4:	238a      	movhi	r3, #138	; 0x8a
 8007ee6:	6003      	strhi	r3, [r0, #0]
 8007ee8:	700a      	strbls	r2, [r1, #0]
 8007eea:	f04f 30ff 	movhi.w	r0, #4294967295
 8007eee:	bf98      	it	ls
 8007ef0:	2001      	movls	r0, #1
 8007ef2:	4770      	bx	lr
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	4770      	bx	lr

08007ef8 <_write_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d07      	ldr	r5, [pc, #28]	; (8007f18 <_write_r+0x20>)
 8007efc:	4604      	mov	r4, r0
 8007efe:	4608      	mov	r0, r1
 8007f00:	4611      	mov	r1, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	602a      	str	r2, [r5, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f7f9 fb99 	bl	800163e <_write>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d102      	bne.n	8007f16 <_write_r+0x1e>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	b103      	cbz	r3, 8007f16 <_write_r+0x1e>
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
 8007f18:	200002f0 	.word	0x200002f0

08007f1c <__assert_func>:
 8007f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f1e:	4614      	mov	r4, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <__assert_func+0x2c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4605      	mov	r5, r0
 8007f28:	68d8      	ldr	r0, [r3, #12]
 8007f2a:	b14c      	cbz	r4, 8007f40 <__assert_func+0x24>
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <__assert_func+0x30>)
 8007f2e:	9100      	str	r1, [sp, #0]
 8007f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f34:	4906      	ldr	r1, [pc, #24]	; (8007f50 <__assert_func+0x34>)
 8007f36:	462b      	mov	r3, r5
 8007f38:	f000 f81e 	bl	8007f78 <fiprintf>
 8007f3c:	f000 fa2a 	bl	8008394 <abort>
 8007f40:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <__assert_func+0x38>)
 8007f42:	461c      	mov	r4, r3
 8007f44:	e7f3      	b.n	8007f2e <__assert_func+0x12>
 8007f46:	bf00      	nop
 8007f48:	20000014 	.word	0x20000014
 8007f4c:	0800886f 	.word	0x0800886f
 8007f50:	0800887c 	.word	0x0800887c
 8007f54:	080088aa 	.word	0x080088aa

08007f58 <_close_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d06      	ldr	r5, [pc, #24]	; (8007f74 <_close_r+0x1c>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7f9 fb87 	bl	8001676 <_close>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_close_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_close_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	200002f0 	.word	0x200002f0

08007f78 <fiprintf>:
 8007f78:	b40e      	push	{r1, r2, r3}
 8007f7a:	b503      	push	{r0, r1, lr}
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	4805      	ldr	r0, [pc, #20]	; (8007f98 <fiprintf+0x20>)
 8007f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f86:	6800      	ldr	r0, [r0, #0]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	f000 f8c1 	bl	8008110 <_vfiprintf_r>
 8007f8e:	b002      	add	sp, #8
 8007f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f94:	b003      	add	sp, #12
 8007f96:	4770      	bx	lr
 8007f98:	20000014 	.word	0x20000014

08007f9c <_fstat_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	; (8007fbc <_fstat_r+0x20>)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	f7f9 fb70 	bl	800168e <_fstat>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d102      	bne.n	8007fb8 <_fstat_r+0x1c>
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	b103      	cbz	r3, 8007fb8 <_fstat_r+0x1c>
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop
 8007fbc:	200002f0 	.word	0x200002f0

08007fc0 <_isatty_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d06      	ldr	r5, [pc, #24]	; (8007fdc <_isatty_r+0x1c>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	602b      	str	r3, [r5, #0]
 8007fcc:	f7f9 fb6f 	bl	80016ae <_isatty>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_isatty_r+0x1a>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_isatty_r+0x1a>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	200002f0 	.word	0x200002f0

08007fe0 <_lseek_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4d07      	ldr	r5, [pc, #28]	; (8008000 <_lseek_r+0x20>)
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	4608      	mov	r0, r1
 8007fe8:	4611      	mov	r1, r2
 8007fea:	2200      	movs	r2, #0
 8007fec:	602a      	str	r2, [r5, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f7f9 fb68 	bl	80016c4 <_lseek>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_lseek_r+0x1e>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_lseek_r+0x1e>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	200002f0 	.word	0x200002f0

08008004 <malloc>:
 8008004:	4b02      	ldr	r3, [pc, #8]	; (8008010 <malloc+0xc>)
 8008006:	4601      	mov	r1, r0
 8008008:	6818      	ldr	r0, [r3, #0]
 800800a:	f7ff bba7 	b.w	800775c <_malloc_r>
 800800e:	bf00      	nop
 8008010:	20000014 	.word	0x20000014

08008014 <memmove>:
 8008014:	4288      	cmp	r0, r1
 8008016:	b510      	push	{r4, lr}
 8008018:	eb01 0402 	add.w	r4, r1, r2
 800801c:	d902      	bls.n	8008024 <memmove+0x10>
 800801e:	4284      	cmp	r4, r0
 8008020:	4623      	mov	r3, r4
 8008022:	d807      	bhi.n	8008034 <memmove+0x20>
 8008024:	1e43      	subs	r3, r0, #1
 8008026:	42a1      	cmp	r1, r4
 8008028:	d008      	beq.n	800803c <memmove+0x28>
 800802a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800802e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008032:	e7f8      	b.n	8008026 <memmove+0x12>
 8008034:	4402      	add	r2, r0
 8008036:	4601      	mov	r1, r0
 8008038:	428a      	cmp	r2, r1
 800803a:	d100      	bne.n	800803e <memmove+0x2a>
 800803c:	bd10      	pop	{r4, pc}
 800803e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008046:	e7f7      	b.n	8008038 <memmove+0x24>

08008048 <__malloc_lock>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__malloc_lock+0x8>)
 800804a:	f7fe bdbc 	b.w	8006bc6 <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	200002e4 	.word	0x200002e4

08008054 <__malloc_unlock>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__malloc_unlock+0x8>)
 8008056:	f7fe bdb7 	b.w	8006bc8 <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	200002e4 	.word	0x200002e4

08008060 <_realloc_r>:
 8008060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008064:	4680      	mov	r8, r0
 8008066:	4614      	mov	r4, r2
 8008068:	460e      	mov	r6, r1
 800806a:	b921      	cbnz	r1, 8008076 <_realloc_r+0x16>
 800806c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008070:	4611      	mov	r1, r2
 8008072:	f7ff bb73 	b.w	800775c <_malloc_r>
 8008076:	b92a      	cbnz	r2, 8008084 <_realloc_r+0x24>
 8008078:	f7ff fb04 	bl	8007684 <_free_r>
 800807c:	4625      	mov	r5, r4
 800807e:	4628      	mov	r0, r5
 8008080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008084:	f000 f98d 	bl	80083a2 <_malloc_usable_size_r>
 8008088:	4284      	cmp	r4, r0
 800808a:	4607      	mov	r7, r0
 800808c:	d802      	bhi.n	8008094 <_realloc_r+0x34>
 800808e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008092:	d812      	bhi.n	80080ba <_realloc_r+0x5a>
 8008094:	4621      	mov	r1, r4
 8008096:	4640      	mov	r0, r8
 8008098:	f7ff fb60 	bl	800775c <_malloc_r>
 800809c:	4605      	mov	r5, r0
 800809e:	2800      	cmp	r0, #0
 80080a0:	d0ed      	beq.n	800807e <_realloc_r+0x1e>
 80080a2:	42bc      	cmp	r4, r7
 80080a4:	4622      	mov	r2, r4
 80080a6:	4631      	mov	r1, r6
 80080a8:	bf28      	it	cs
 80080aa:	463a      	movcs	r2, r7
 80080ac:	f7fe fe04 	bl	8006cb8 <memcpy>
 80080b0:	4631      	mov	r1, r6
 80080b2:	4640      	mov	r0, r8
 80080b4:	f7ff fae6 	bl	8007684 <_free_r>
 80080b8:	e7e1      	b.n	800807e <_realloc_r+0x1e>
 80080ba:	4635      	mov	r5, r6
 80080bc:	e7df      	b.n	800807e <_realloc_r+0x1e>

080080be <__sfputc_r>:
 80080be:	6893      	ldr	r3, [r2, #8]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	b410      	push	{r4}
 80080c6:	6093      	str	r3, [r2, #8]
 80080c8:	da08      	bge.n	80080dc <__sfputc_r+0x1e>
 80080ca:	6994      	ldr	r4, [r2, #24]
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	db01      	blt.n	80080d4 <__sfputc_r+0x16>
 80080d0:	290a      	cmp	r1, #10
 80080d2:	d103      	bne.n	80080dc <__sfputc_r+0x1e>
 80080d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d8:	f7fd bf8e 	b.w	8005ff8 <__swbuf_r>
 80080dc:	6813      	ldr	r3, [r2, #0]
 80080de:	1c58      	adds	r0, r3, #1
 80080e0:	6010      	str	r0, [r2, #0]
 80080e2:	7019      	strb	r1, [r3, #0]
 80080e4:	4608      	mov	r0, r1
 80080e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <__sfputs_r>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	4614      	mov	r4, r2
 80080f4:	18d5      	adds	r5, r2, r3
 80080f6:	42ac      	cmp	r4, r5
 80080f8:	d101      	bne.n	80080fe <__sfputs_r+0x12>
 80080fa:	2000      	movs	r0, #0
 80080fc:	e007      	b.n	800810e <__sfputs_r+0x22>
 80080fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008102:	463a      	mov	r2, r7
 8008104:	4630      	mov	r0, r6
 8008106:	f7ff ffda 	bl	80080be <__sfputc_r>
 800810a:	1c43      	adds	r3, r0, #1
 800810c:	d1f3      	bne.n	80080f6 <__sfputs_r+0xa>
 800810e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008110 <_vfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	460d      	mov	r5, r1
 8008116:	b09d      	sub	sp, #116	; 0x74
 8008118:	4614      	mov	r4, r2
 800811a:	4698      	mov	r8, r3
 800811c:	4606      	mov	r6, r0
 800811e:	b118      	cbz	r0, 8008128 <_vfiprintf_r+0x18>
 8008120:	6983      	ldr	r3, [r0, #24]
 8008122:	b90b      	cbnz	r3, 8008128 <_vfiprintf_r+0x18>
 8008124:	f7fe f942 	bl	80063ac <__sinit>
 8008128:	4b89      	ldr	r3, [pc, #548]	; (8008350 <_vfiprintf_r+0x240>)
 800812a:	429d      	cmp	r5, r3
 800812c:	d11b      	bne.n	8008166 <_vfiprintf_r+0x56>
 800812e:	6875      	ldr	r5, [r6, #4]
 8008130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008132:	07d9      	lsls	r1, r3, #31
 8008134:	d405      	bmi.n	8008142 <_vfiprintf_r+0x32>
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	059a      	lsls	r2, r3, #22
 800813a:	d402      	bmi.n	8008142 <_vfiprintf_r+0x32>
 800813c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800813e:	f7fe fd42 	bl	8006bc6 <__retarget_lock_acquire_recursive>
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	071b      	lsls	r3, r3, #28
 8008146:	d501      	bpl.n	800814c <_vfiprintf_r+0x3c>
 8008148:	692b      	ldr	r3, [r5, #16]
 800814a:	b9eb      	cbnz	r3, 8008188 <_vfiprintf_r+0x78>
 800814c:	4629      	mov	r1, r5
 800814e:	4630      	mov	r0, r6
 8008150:	f7fd ffa4 	bl	800609c <__swsetup_r>
 8008154:	b1c0      	cbz	r0, 8008188 <_vfiprintf_r+0x78>
 8008156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008158:	07dc      	lsls	r4, r3, #31
 800815a:	d50e      	bpl.n	800817a <_vfiprintf_r+0x6a>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	b01d      	add	sp, #116	; 0x74
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	4b7b      	ldr	r3, [pc, #492]	; (8008354 <_vfiprintf_r+0x244>)
 8008168:	429d      	cmp	r5, r3
 800816a:	d101      	bne.n	8008170 <_vfiprintf_r+0x60>
 800816c:	68b5      	ldr	r5, [r6, #8]
 800816e:	e7df      	b.n	8008130 <_vfiprintf_r+0x20>
 8008170:	4b79      	ldr	r3, [pc, #484]	; (8008358 <_vfiprintf_r+0x248>)
 8008172:	429d      	cmp	r5, r3
 8008174:	bf08      	it	eq
 8008176:	68f5      	ldreq	r5, [r6, #12]
 8008178:	e7da      	b.n	8008130 <_vfiprintf_r+0x20>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	0598      	lsls	r0, r3, #22
 800817e:	d4ed      	bmi.n	800815c <_vfiprintf_r+0x4c>
 8008180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008182:	f7fe fd21 	bl	8006bc8 <__retarget_lock_release_recursive>
 8008186:	e7e9      	b.n	800815c <_vfiprintf_r+0x4c>
 8008188:	2300      	movs	r3, #0
 800818a:	9309      	str	r3, [sp, #36]	; 0x24
 800818c:	2320      	movs	r3, #32
 800818e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008192:	f8cd 800c 	str.w	r8, [sp, #12]
 8008196:	2330      	movs	r3, #48	; 0x30
 8008198:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800835c <_vfiprintf_r+0x24c>
 800819c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a0:	f04f 0901 	mov.w	r9, #1
 80081a4:	4623      	mov	r3, r4
 80081a6:	469a      	mov	sl, r3
 80081a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ac:	b10a      	cbz	r2, 80081b2 <_vfiprintf_r+0xa2>
 80081ae:	2a25      	cmp	r2, #37	; 0x25
 80081b0:	d1f9      	bne.n	80081a6 <_vfiprintf_r+0x96>
 80081b2:	ebba 0b04 	subs.w	fp, sl, r4
 80081b6:	d00b      	beq.n	80081d0 <_vfiprintf_r+0xc0>
 80081b8:	465b      	mov	r3, fp
 80081ba:	4622      	mov	r2, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff ff94 	bl	80080ec <__sfputs_r>
 80081c4:	3001      	adds	r0, #1
 80081c6:	f000 80aa 	beq.w	800831e <_vfiprintf_r+0x20e>
 80081ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081cc:	445a      	add	r2, fp
 80081ce:	9209      	str	r2, [sp, #36]	; 0x24
 80081d0:	f89a 3000 	ldrb.w	r3, [sl]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 80a2 	beq.w	800831e <_vfiprintf_r+0x20e>
 80081da:	2300      	movs	r3, #0
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295
 80081e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e4:	f10a 0a01 	add.w	sl, sl, #1
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f0:	931a      	str	r3, [sp, #104]	; 0x68
 80081f2:	4654      	mov	r4, sl
 80081f4:	2205      	movs	r2, #5
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	4858      	ldr	r0, [pc, #352]	; (800835c <_vfiprintf_r+0x24c>)
 80081fc:	f7f8 f810 	bl	8000220 <memchr>
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	b9d8      	cbnz	r0, 800823c <_vfiprintf_r+0x12c>
 8008204:	06d1      	lsls	r1, r2, #27
 8008206:	bf44      	itt	mi
 8008208:	2320      	movmi	r3, #32
 800820a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820e:	0713      	lsls	r3, r2, #28
 8008210:	bf44      	itt	mi
 8008212:	232b      	movmi	r3, #43	; 0x2b
 8008214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008218:	f89a 3000 	ldrb.w	r3, [sl]
 800821c:	2b2a      	cmp	r3, #42	; 0x2a
 800821e:	d015      	beq.n	800824c <_vfiprintf_r+0x13c>
 8008220:	9a07      	ldr	r2, [sp, #28]
 8008222:	4654      	mov	r4, sl
 8008224:	2000      	movs	r0, #0
 8008226:	f04f 0c0a 	mov.w	ip, #10
 800822a:	4621      	mov	r1, r4
 800822c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008230:	3b30      	subs	r3, #48	; 0x30
 8008232:	2b09      	cmp	r3, #9
 8008234:	d94e      	bls.n	80082d4 <_vfiprintf_r+0x1c4>
 8008236:	b1b0      	cbz	r0, 8008266 <_vfiprintf_r+0x156>
 8008238:	9207      	str	r2, [sp, #28]
 800823a:	e014      	b.n	8008266 <_vfiprintf_r+0x156>
 800823c:	eba0 0308 	sub.w	r3, r0, r8
 8008240:	fa09 f303 	lsl.w	r3, r9, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	46a2      	mov	sl, r4
 800824a:	e7d2      	b.n	80081f2 <_vfiprintf_r+0xe2>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1d19      	adds	r1, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9103      	str	r1, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfbb      	ittet	lt
 8008258:	425b      	neglt	r3, r3
 800825a:	f042 0202 	orrlt.w	r2, r2, #2
 800825e:	9307      	strge	r3, [sp, #28]
 8008260:	9307      	strlt	r3, [sp, #28]
 8008262:	bfb8      	it	lt
 8008264:	9204      	strlt	r2, [sp, #16]
 8008266:	7823      	ldrb	r3, [r4, #0]
 8008268:	2b2e      	cmp	r3, #46	; 0x2e
 800826a:	d10c      	bne.n	8008286 <_vfiprintf_r+0x176>
 800826c:	7863      	ldrb	r3, [r4, #1]
 800826e:	2b2a      	cmp	r3, #42	; 0x2a
 8008270:	d135      	bne.n	80082de <_vfiprintf_r+0x1ce>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	9203      	str	r2, [sp, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	bfb8      	it	lt
 800827e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008282:	3402      	adds	r4, #2
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800836c <_vfiprintf_r+0x25c>
 800828a:	7821      	ldrb	r1, [r4, #0]
 800828c:	2203      	movs	r2, #3
 800828e:	4650      	mov	r0, sl
 8008290:	f7f7 ffc6 	bl	8000220 <memchr>
 8008294:	b140      	cbz	r0, 80082a8 <_vfiprintf_r+0x198>
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	eba0 000a 	sub.w	r0, r0, sl
 800829c:	fa03 f000 	lsl.w	r0, r3, r0
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	4303      	orrs	r3, r0
 80082a4:	3401      	adds	r4, #1
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ac:	482c      	ldr	r0, [pc, #176]	; (8008360 <_vfiprintf_r+0x250>)
 80082ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b2:	2206      	movs	r2, #6
 80082b4:	f7f7 ffb4 	bl	8000220 <memchr>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d03f      	beq.n	800833c <_vfiprintf_r+0x22c>
 80082bc:	4b29      	ldr	r3, [pc, #164]	; (8008364 <_vfiprintf_r+0x254>)
 80082be:	bb1b      	cbnz	r3, 8008308 <_vfiprintf_r+0x1f8>
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	3307      	adds	r3, #7
 80082c4:	f023 0307 	bic.w	r3, r3, #7
 80082c8:	3308      	adds	r3, #8
 80082ca:	9303      	str	r3, [sp, #12]
 80082cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ce:	443b      	add	r3, r7
 80082d0:	9309      	str	r3, [sp, #36]	; 0x24
 80082d2:	e767      	b.n	80081a4 <_vfiprintf_r+0x94>
 80082d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d8:	460c      	mov	r4, r1
 80082da:	2001      	movs	r0, #1
 80082dc:	e7a5      	b.n	800822a <_vfiprintf_r+0x11a>
 80082de:	2300      	movs	r3, #0
 80082e0:	3401      	adds	r4, #1
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	4619      	mov	r1, r3
 80082e6:	f04f 0c0a 	mov.w	ip, #10
 80082ea:	4620      	mov	r0, r4
 80082ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f0:	3a30      	subs	r2, #48	; 0x30
 80082f2:	2a09      	cmp	r2, #9
 80082f4:	d903      	bls.n	80082fe <_vfiprintf_r+0x1ee>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0c5      	beq.n	8008286 <_vfiprintf_r+0x176>
 80082fa:	9105      	str	r1, [sp, #20]
 80082fc:	e7c3      	b.n	8008286 <_vfiprintf_r+0x176>
 80082fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008302:	4604      	mov	r4, r0
 8008304:	2301      	movs	r3, #1
 8008306:	e7f0      	b.n	80082ea <_vfiprintf_r+0x1da>
 8008308:	ab03      	add	r3, sp, #12
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	462a      	mov	r2, r5
 800830e:	4b16      	ldr	r3, [pc, #88]	; (8008368 <_vfiprintf_r+0x258>)
 8008310:	a904      	add	r1, sp, #16
 8008312:	4630      	mov	r0, r6
 8008314:	f3af 8000 	nop.w
 8008318:	4607      	mov	r7, r0
 800831a:	1c78      	adds	r0, r7, #1
 800831c:	d1d6      	bne.n	80082cc <_vfiprintf_r+0x1bc>
 800831e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008320:	07d9      	lsls	r1, r3, #31
 8008322:	d405      	bmi.n	8008330 <_vfiprintf_r+0x220>
 8008324:	89ab      	ldrh	r3, [r5, #12]
 8008326:	059a      	lsls	r2, r3, #22
 8008328:	d402      	bmi.n	8008330 <_vfiprintf_r+0x220>
 800832a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832c:	f7fe fc4c 	bl	8006bc8 <__retarget_lock_release_recursive>
 8008330:	89ab      	ldrh	r3, [r5, #12]
 8008332:	065b      	lsls	r3, r3, #25
 8008334:	f53f af12 	bmi.w	800815c <_vfiprintf_r+0x4c>
 8008338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800833a:	e711      	b.n	8008160 <_vfiprintf_r+0x50>
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <_vfiprintf_r+0x258>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff fc46 	bl	8007bd8 <_printf_i>
 800834c:	e7e4      	b.n	8008318 <_vfiprintf_r+0x208>
 800834e:	bf00      	nop
 8008350:	080085fc 	.word	0x080085fc
 8008354:	0800861c 	.word	0x0800861c
 8008358:	080085dc 	.word	0x080085dc
 800835c:	0800883c 	.word	0x0800883c
 8008360:	08008846 	.word	0x08008846
 8008364:	00000000 	.word	0x00000000
 8008368:	080080ed 	.word	0x080080ed
 800836c:	08008842 	.word	0x08008842

08008370 <_read_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	; (8008390 <_read_r+0x20>)
 8008374:	4604      	mov	r4, r0
 8008376:	4608      	mov	r0, r1
 8008378:	4611      	mov	r1, r2
 800837a:	2200      	movs	r2, #0
 800837c:	602a      	str	r2, [r5, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	f7f9 f940 	bl	8001604 <_read>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_read_r+0x1e>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	b103      	cbz	r3, 800838e <_read_r+0x1e>
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	200002f0 	.word	0x200002f0

08008394 <abort>:
 8008394:	b508      	push	{r3, lr}
 8008396:	2006      	movs	r0, #6
 8008398:	f000 f834 	bl	8008404 <raise>
 800839c:	2001      	movs	r0, #1
 800839e:	f7f9 f927 	bl	80015f0 <_exit>

080083a2 <_malloc_usable_size_r>:
 80083a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a6:	1f18      	subs	r0, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfbc      	itt	lt
 80083ac:	580b      	ldrlt	r3, [r1, r0]
 80083ae:	18c0      	addlt	r0, r0, r3
 80083b0:	4770      	bx	lr

080083b2 <_raise_r>:
 80083b2:	291f      	cmp	r1, #31
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4604      	mov	r4, r0
 80083b8:	460d      	mov	r5, r1
 80083ba:	d904      	bls.n	80083c6 <_raise_r+0x14>
 80083bc:	2316      	movs	r3, #22
 80083be:	6003      	str	r3, [r0, #0]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
 80083c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083c8:	b112      	cbz	r2, 80083d0 <_raise_r+0x1e>
 80083ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083ce:	b94b      	cbnz	r3, 80083e4 <_raise_r+0x32>
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f831 	bl	8008438 <_getpid_r>
 80083d6:	462a      	mov	r2, r5
 80083d8:	4601      	mov	r1, r0
 80083da:	4620      	mov	r0, r4
 80083dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e0:	f000 b818 	b.w	8008414 <_kill_r>
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d00a      	beq.n	80083fe <_raise_r+0x4c>
 80083e8:	1c59      	adds	r1, r3, #1
 80083ea:	d103      	bne.n	80083f4 <_raise_r+0x42>
 80083ec:	2316      	movs	r3, #22
 80083ee:	6003      	str	r3, [r0, #0]
 80083f0:	2001      	movs	r0, #1
 80083f2:	e7e7      	b.n	80083c4 <_raise_r+0x12>
 80083f4:	2400      	movs	r4, #0
 80083f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083fa:	4628      	mov	r0, r5
 80083fc:	4798      	blx	r3
 80083fe:	2000      	movs	r0, #0
 8008400:	e7e0      	b.n	80083c4 <_raise_r+0x12>
	...

08008404 <raise>:
 8008404:	4b02      	ldr	r3, [pc, #8]	; (8008410 <raise+0xc>)
 8008406:	4601      	mov	r1, r0
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f7ff bfd2 	b.w	80083b2 <_raise_r>
 800840e:	bf00      	nop
 8008410:	20000014 	.word	0x20000014

08008414 <_kill_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	; (8008434 <_kill_r+0x20>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	4611      	mov	r1, r2
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	f7f9 f8d5 	bl	80015d0 <_kill>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d102      	bne.n	8008430 <_kill_r+0x1c>
 800842a:	682b      	ldr	r3, [r5, #0]
 800842c:	b103      	cbz	r3, 8008430 <_kill_r+0x1c>
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	bd38      	pop	{r3, r4, r5, pc}
 8008432:	bf00      	nop
 8008434:	200002f0 	.word	0x200002f0

08008438 <_getpid_r>:
 8008438:	f7f9 b8c2 	b.w	80015c0 <_getpid>

0800843c <_init>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	bf00      	nop
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr

08008448 <_fini>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr
